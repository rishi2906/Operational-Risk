---
title: "Loss Distribution Fit Analysis-Risk Event Type: M 388 [Fraud]"
author: "CRISIL"
date: "`r Sys.Date()`"
output:
  word_document: 
    toc: yes
  html_document: default
---

```{=openxml}
<w:p><w:r><w:br w:type="page"/></w:r></w:p>
```

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r,warning=FALSE,results='hide',include=FALSE,}
set.seed(100)
library(knitr)
library(flextable)
library(lubridate)
library(dplyr)
library(fExtremes)
library(metRology)
library(plotly)
library(evir)
library(zoo)  
library(fitdistrplus)
library(flexsurv)
library(xlsx)
library(reliaR)
library(EnvStats)
library(actuar)
library(pander)
library(ggpubr)
library(truncdist)
library(captioner)
library(qqplotr)
library(EnvStats)
#Use below code to install "TruncatedDistributions" Package
#install.packages("TruncatedDistributions", repos="http://R-Forge.R-project.org")
library(TruncatedDistributions)
library(truncnorm)
library(qqplotr)
library(officer)
library(readxl)
#library(truncgof)

round_df <- function(x, digits) {
    numeric_columns <- sapply(x, mode) == 'numeric'
    x[numeric_columns] <-  round(x[numeric_columns], digits)
    x
}
eda <- function(temp_df,k1,k2){
temp_df[,"Year"] <- as.yearqtr(temp_df$Date,"%Y-%m-%d")
temp_df$Loss <- as.numeric(as.character(temp_df$Loss))
#Summary Table
temp_df$value=1

#kable(summ_table,caption = "summary of the Data")
over_all_summ <- data.frame(nrow(temp_df),sort(temp_df$Year)[1],sort(temp_df$Year)[nrow(temp_df)], sum(nrow(temp_df),k1,k2),k1,k2,length(temp_df$Year),round(min(temp_df$Loss),2),round(max(temp_df$Loss),2),round(mean(temp_df$Loss),2),round(median(temp_df$Loss),2),round(sd(temp_df$Loss),2),round(skewness(temp_df$Loss),2),round(kurtosis(temp_df$Loss),2),round(quantile(temp_df$Loss,.25)[[1]],2),round(quantile(temp_df$Loss,.50)[[1]],2),round(quantile(temp_df$Loss,.75)[[1]],2),round(quantile(temp_df$Loss,.95)[[1]],2),round(quantile(temp_df$Loss,.975)[[1]],2),round(quantile(temp_df$Loss,.99)[[1]],2),round(quantile(temp_df$Loss,.999)[[1]],2))

colnames(over_all_summ) <- c("N","Start Point","End Point","Freqency Observations","NA","0's","Severity Observations","Min","Max","Mean","Median","Std. dev","Skewness","Kurtosis","25th pct","50th pct","75th pct","95th pct","97.5th pct","99th pct","99.9th pct")
return(over_all_summ)
}
table_nums <- captioner::captioner(prefix = "Table.")
x <<- 1
flag <<- 0
fign <- function(x){
  if(flag==0 & x==1){
    x <<- x+1
    flag=1
  }
  else{
    x <<- x+1
  }
  return(x)
}
# options(scipen=0)
f1=function(x){
  paste(format(round(x/1e6, 1), trim = TRUE), "M")
}

```

```{r,echo=FALSE}
tab.0 <- table_nums(name = "tab_0", caption = "Summary by Data Providers")
######table for executive Summary
tab.1 <- table_nums(name = "tab_1", caption = "Summary Table")

######tables for section 1
tab.2 <- table_nums(name = "tab_2", caption = "Summary of the Data")
tab.3 <- table_nums(name = "tab_3", caption = "Exploratory Data Analysis (EDA)")
tab.4 <- table_nums(name = "tab_4", caption = "Loss(USD) Value at different Percentiles(pct)")
tab.5 <- table_nums(name = "tab_5", caption = "Estimated Parameters")
tab.9 <- table_nums(name = "tab_9", caption = "Goodness of fit test p-value")
tab.10 <- table_nums(name = "tab_10", caption = "Goodness of fit Criteria")

######tables for section 2
tab.11 <- table_nums(name = "tab_11", caption = "Summary of the Data")
tab.12 <- table_nums(name = "tab_12", caption = "Exploratory Data Analysis (EDA)")
tab.13 <- table_nums(name = "tab_13", caption = "Log of Loss(USD) Value at different Percentiles(pct)")
tab.14 <- table_nums(name = "tab_14", caption = "Estimated Parameters")
tab.21 <- table_nums(name = "tab_21", caption = "Goodness of fit test p-value")
tab.22 <- table_nums(name = "tab_22", caption = "Goodness of fit Criteria")


######tables for section 3
tab.23 <- table_nums(name = "tab_23", caption = "Summary of the Data")
tab.24 <- table_nums(name = "tab_24", caption = "Exploratory Data Analysis (EDA)")
tab.25 <- table_nums(name = "tab_25", caption = "Log of Loss(USD) Value at different Percentiles(pct)")
tab.26 <- table_nums(name = "tab_26", caption = "Truncation Summary")
tab.27 <- table_nums(name = "tab_27", caption = "Estimated Parameters Before and After Truncation")
tab.34 <- table_nums(name = "tab_34", caption = "Goodness of fit test p-value")
tab.35 <- table_nums(name = "tab_35", caption = "Goodness of fit Criteria")

######tables for section 4
######4.1.1
tab.36 <- table_nums(name = "tab_36", caption = "No of Observation by data provider")
tab.37 <- table_nums(name = "tab_37", caption = "Summary of the Data")
tab.38 <- table_nums(name = "tab_38", caption = "Exploratory Data Analysis (EDA)")
tab.39 <- table_nums(name = "tab_39", caption = "Loss(USD) Value at different Percentiles(pct)")
tab.40 <- table_nums(name = "tab_40", caption = "Estimated Parameters")
tab.44 <- table_nums(name = "tab_44", caption = "Goodness of fit test p-value")
tab.45 <- table_nums(name = "tab_45", caption = "Goodness of fit Criteria")
#####4.1.2
tab.46 <- table_nums(name = "tab_46", caption = "Summary of the Data")
tab.47 <- table_nums(name = "tab_47", caption = "Exploratory Data Analysis (EDA)")
tab.48 <- table_nums(name = "tab_48", caption = "Loss(USD) Value at different Percentiles(pct)")
tab.49 <- table_nums(name = "tab_49", caption = "Estimated Parameters")
tab.53 <- table_nums(name = "tab_53", caption = "Goodness of fit test p-value")
tab.54 <- table_nums(name = "tab_54", caption = "Goodness of fit Criteria")
#####4.1.3
tab.55 <- table_nums(name = "tab_55", caption = "Summary of the Data")
tab.56 <- table_nums(name = "tab_56", caption = "Exploratory Data Analysis (EDA)")
tab.57 <- table_nums(name = "tab_57", caption = "Loss(USD) Value at different Percentiles(pct)")
tab.58 <- table_nums(name = "tab_58", caption = "Estimated Parameters")
tab.62 <- table_nums(name = "tab_62", caption = "Goodness of fit test p-value")
tab.63 <- table_nums(name = "tab_63", caption = "Goodness of fit Criteria")

######4.2.1
tab.64 <- table_nums(name = "tab_64", caption = "Summary of the Data")
tab.65 <- table_nums(name = "tab_65", caption = "Exploratory Data Analysis (EDA)")
tab.66 <- table_nums(name = "tab_66", caption = "Log of Loss(USD) Value at different Percentiles(pct)")
tab.67 <- table_nums(name = "tab_67", caption = "Estimated Parameters")
tab.74 <- table_nums(name = "tab_74", caption = "Goodness of fit test p-value")
tab.75 <- table_nums(name = "tab_75", caption = "Goodness of fit Criteria")

######4.2.2
tab.76 <- table_nums(name = "tab_76", caption = "Summary of the Data")
tab.77 <- table_nums(name = "tab_77", caption = "Exploratory Data Analysis (EDA)")
tab.78 <- table_nums(name = "tab_78", caption = "Log of Loss(USD) Value at different Percentiles(pct)")
tab.79 <- table_nums(name = "tab_79", caption = "Estimated Parameters")
tab.86 <- table_nums(name = "tab_86", caption = "Goodness of fit test p-value")
tab.87 <- table_nums(name = "tab_87", caption = "Goodness of fit Criteria")

####4.2.3
tab.88 <- table_nums(name = "tab_88", caption = "Summary of the Data")
tab.89 <- table_nums(name = "tab_89", caption = "Exploratory Data Analysis (EDA)")
tab.90 <- table_nums(name = "tab_90", caption = "Log of Loss(USD) Value at different Percentiles(pct)")
tab.91 <- table_nums(name = "tab_91", caption = "Estimated Parameters")
tab.98 <- table_nums(name = "tab_98", caption = "Goodness of fit test p-value")
tab.99 <- table_nums(name = "tab_99", caption = "Goodness of fit Criteria")

####4.3.1
tab.100 <- table_nums(name = "tab_100", caption = "Summary of the Data")
tab.101 <- table_nums(name = "tab_101", caption = "Exploratory Data Analysis (EDA)")
tab.102 <- table_nums(name = "tab_102", caption = "Log of Loss(USD) Value at different Percentiles(pct)")
tab.103 <- table_nums(name = "tab_103", caption = "Truncation Summary")
tab.104 <- table_nums(name = "tab_104", caption = "Estimated Parameters Before and After Truncation")
tab.111 <- table_nums(name = "tab_111", caption = "Goodness of fit test p-value")
tab.112 <- table_nums(name = "tab_112", caption = "Goodness of fit Criteria")

######4.3.2
tab.113 <- table_nums(name = "tab_113", caption = "Summary of the Data")
tab.114 <- table_nums(name = "tab_114", caption = "Exploratory Data Analysis (EDA)")
tab.115 <- table_nums(name = "tab_115", caption = "Log of Loss(USD) Value at different Percentiles(pct)")
tab.116 <- table_nums(name = "tab_116", caption = "Truncation Summary")
tab.117 <- table_nums(name = "tab_117", caption = "Estimated Parameters Before and After Truncation")
tab.124 <- table_nums(name = "tab_124", caption = "Goodness of fit test p-value")
tab.125 <- table_nums(name = "tab_125", caption = "Goodness of fit Criteria")

#######4.3.3
tab.126 <- table_nums(name = "tab_126", caption = "Summary of the Data")
tab.127<- table_nums(name = "tab_127",  caption = "Exploratory Data Analysis (EDA)")
tab.128 <- table_nums(name = "tab_128", caption = "Log of Loss(USD) Value at different Percentiles(pct)")
tab.129 <- table_nums(name = "tab_129", caption = "Truncation Summary")
tab.130 <- table_nums(name = "tab_130", caption = "Estimated Parameters Before and After Truncation")
tab.137 <- table_nums(name = "tab_137", caption = "Goodness of fit test p-value")
tab.138 <- table_nums(name = "tab_138", caption = "Goodness of fit Criteria")

###Appendix
tab.139 <- table_nums(name = "tab_139", caption = "Goodness of fit test p-value(at different truncation point) for log truncated Combined data")
tab.140 <- table_nums(name = "tab_140", caption = "Goodness of fit test p-value(at different truncation point) for log truncated Algo First data")
tab.141 <- table_nums(name = "tab_141", caption = "Goodness of fit test p-value(at different truncation point) for log truncated ORX IM data")
tab.142 <- table_nums(name = "tab_142", caption = "Goodness of fit test p-value(at different truncation point) for log truncated ORX News data")
```

```{r,echo=FALSE,warning=FALSE}
Loss <-openxlsx::read.xlsx("M 388 Fraud 2019-10-31.xlsx",sheet=1)
Loss <- Loss[,c("Dataset","Final.Date","Inflation_adjusted_Loss(USD)")]
colnames(Loss) <- c("Dataset","Date","Loss")
Loss$Date <- as.Date(Loss$Date,origin="1899-12-30")
k1_comb <- length(which(is.na(Loss$Loss)))
k2_comb <- length(which(Loss$Loss==0))
algo_first <- nrow(Loss[which(Loss$Dataset=="Algo FIRST"),])
k1_algo <- length(which(is.na(Loss[which(Loss$Dataset=="Algo FIRST"),]$Loss)))
k2_algo <- length(which(Loss[which(Loss$Dataset=="Algo FIRST"),]$Loss==0))

orx_im <- nrow(Loss[which(Loss$Dataset=="ORX Insurer Member"),])
k1_oim <- length(which(is.na(Loss[which(Loss$Dataset=="ORX Insurer Member"),]$Loss)))
k2_oim <- length(which(Loss[which(Loss$Dataset=="ORX Insurer Member"),]$Loss==0))

orx_news <- nrow(Loss[which(Loss$Dataset=="ORX News"),])
k1_onews <- length(which(is.na(Loss[which(Loss$Dataset=="ORX News"),]$Loss)))
k2_onews <- length(which(Loss[which(Loss$Dataset=="ORX News"),]$Loss==0))
```


# Executive Summary

This report contains the results of loss (severity) distribution fitting for risk event type **"Fraud"** and across all business lines. The Risk event category definition and the corresponding mapping logic is described in section 3.4.3 of the model development document "Model Documentation_TIAA_v2_09-26-2019". This event type has **`r length(Loss$Loss)`** observations (including NAs and zeros) and total **`r length(Loss$Loss)-(k1_comb+k2_comb)`** observation are left for the modelling after removing NAs and zeros. The table below contains the number of observations by data providers, count of the NA's, count of the zeros and the total count. There are sufficient observations to try the distribution fitting for severity modelling by data providers. 

```{r echo=FALSE,message=FALSE}
temp <- data.frame(c("Algo FIRST","ORX Insurer Member","ORXNews","Total"),c(algo_first,orx_im,orx_news,length(Loss$Loss)),c(k1_algo,k1_oim,k1_onews,k1_comb),c(k2_algo,k2_oim,k2_onews,k2_comb),c(k1_algo+k2_algo,k1_oim+k2_oim,k1_onews+k2_onews,k1_comb+k2_comb),c(algo_first-(k1_algo+k2_algo),orx_im-(k1_oim+k2_oim),orx_news-(k1_onews+k2_onews),length(Loss$Loss)-(k1_comb+k2_comb)))
colnames(temp) <- c("Data Provider","Count","NA","0's","Dropped Data Points","Severity Observations")
```

`r table_nums('tab_0')`
```{r,echo=FALSE,fig.cap=tab.0,ft.align='left'}
tab0 <- flextable(temp)
tab0 <- bg(tab0, bg = "#66B3FF", part = "header")
colkeys = c("Count","NA","Severity Observations")
tab0 <- colformat_num(x = tab0, col_keys = colkeys,big.mark=",", digits = 0, na_str = "N/A")
tab0 <- flextable::align(tab0,align="center", part = "all" )
tab0 <- hline(tab0,i = 3, part = "body",border = fp_border(color = "black", width = 2))
tab0 <- fontsize(x=tab0,size = 9)
tab0 <- autofit(tab0)
tab0
```

The list of candidate distributions are as follows:

+ Normal Distribution

+	Student's t Distribution

+	Log-normal Distribution

+	Gamma Distribution

+	Weibull Distribution

+ Log-logistic Distribution

+ Burr Distribution

The following goodness of fit (GOF) tests/criteria are used

+ Chi-square*

+	Kolmogorov-Smirnov (KS)

+	Anderson-Darling (AD)

+ Cramer-von Mises (CVM)

+ Log-likelihood (Loglik)

+ Akaike Information Criteria (AIC)

+ Bayesian Information Criteria (BIC)

+	Quantile-Quantile (QQ) plot

+	Probability-Probability (PP) plot

(*Chi-square test performed on truncated data is same performed without truncated data, the performance of the chi square test for goodness of fit of truncated distributions is not known. Also, this test is dependent on the number of bins. For truncated data GOF test statistics calculation is different although the test name is similar, also additional test were performed for it.)

The best fitting distribution passes all the statistical tests and is identified based on log-likelihood (higher the value better the distribution fit), AIC and BIC criteria (lower the value better the distribution fit). 

The table below summarizes the distribution fitting for the event type "Fraud"



`r table_nums('tab_1')`
```{r echo=FALSE,message=FALSE,fig.cap=tab.1,ft.align='left'}
temp <- data.frame(c("1","2","3","4.1.1","4.1.2","4.1.3","4.2.1","4.2.2","4.2.3","4.3.1","4.3.2","4.3.3"),c("None","Natural Log","Natural Log","None","None","None","Natural Log","Natural Log","Natural Log","Natural Log","Natural Log","Natural Log"),c(" "," ","Truncated","  "," "," "," "," "," ","Truncated","Truncated ","Truncated "),c("Aggregate","Aggregate","Aggregate","Algo First","ORX IM","ORX News","Algo First","ORX IM","ORX News","Algo First","ORX IM","ORX News"),c(" "," "," "," "," "," "," "," "," "," "," "," "))
colnames(temp) <-  c("Section","Transformation","Truncated","Aggregated/Data Provider","Conclusion")
tab1 <- flextable(temp,theme_fun = theme_booktabs)
tab1 <- theme_box(tab1)
tab1 <- bg(tab1, bg = "#66B3FF", part = "header")
tab1 <- autofit(tab1)
tab1
```

**Conclusion**



# Analysis on Event type: Fraud 

<!-- ########################## Model Fitting on Complete Data(after 2003Q1) without any transformation ##################################################-->

## 1. Fit on Loss Data without any transformation or break-out by provider 

### Summary

```{r,warning=FALSE,echo=FALSE}
Loss <-openxlsx::read.xlsx("M 388 Fraud 2019-10-31.xlsx",sheet=1)
Loss <- Loss[,c("Dataset","Final.Date","Inflation_adjusted_Loss(USD)")]
colnames(Loss) <- c("Dataset","Date","Loss")
Loss$Date <- as.Date(Loss$Date,origin="1899-12-30")
b1 <- Loss
k1 <- length(which(is.na(Loss$Loss)))
if(k1 > 0){
  b1 <- b1[-which(is.na(b1$Loss)),]
}
k2 <- length(which(Loss$Loss==0))
if(k2>0)
{
  b1<-b1[-which(b1$Loss==0),]
}
#b1 <- b1[-which(b1$Loss>=1000000000),]
over_all_summ <- eda(b1,k1,k2)
```

`r table_nums('tab_2')`
```{r,echo=FALSE,fig.cap=tab.2,ft.align='left'}
tab2 <- flextable(over_all_summ[,2:7])
tab2 <- bg(tab2, bg = "#66B3FF", part = "header")
colkeys = c("Freqency Observations","NA","0's","Severity Observations")
tab2 <- colformat_num(x = tab2, col_keys = colkeys,big.mark=",", digits = 0, na_str = "N/A")
tab2 <- flextable::align(tab2,align="center", part = "all" )
tab2 <- fontsize(x=tab2,size = 9)
tab2 <- autofit(tab2)
tab2
```

NA's and zeros are omitted from the analysis

Inflation adjustment to the loss values is documented in section 3.4.2.2.5 of the model development document "Model Documentation_TIAA_v2_09-26-2019".

\newline

`r table_nums('tab_3')`
```{r,echo=FALSE,fig.cap=tab.3,ft.align='left'}
tab3 <- flextable(over_all_summ[,8:14])
tab3 <- bg(tab3, bg = "#66B3FF", part = "header")
colkeys = c("Min","Max","Mean","Median","Std. dev","Skewness","Kurtosis")
tab3 <- colformat_num(x = tab3, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab3 <- fontsize(x=tab3,size = 9)
tab3 <- autofit(tab3)
tab3
```

\newline

`r table_nums('tab_4')`
```{r,echo=FALSE,fig.cap=tab.4,ft.align='left'}
tab4 <- flextable(over_all_summ[,15:21],theme_fun = theme_booktabs)
tab4 <- bg(tab4, bg = "#66B3FF", part = "header")
colkeys = c("25th pct","50th pct","75th pct","95th pct","97.5th pct","99th pct","99.9th pct")
tab4 <- colformat_num(x = tab4, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab4 <- fontsize(x=tab4,size = 9)
tab4 <- autofit(tab4)
tab4
```


```{r,echo=FALSE,message=FALSE}
x1 <- ggplot(data = b1, aes(x=Loss(USD)))+
  geom_histogram(data = as.data.frame(b1$Loss),aes(x=b1$Loss),color="black",fill="blue") + ggtitle("Histogram of Loss(USD)")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+scale_x_continuous(labels=f1)
x2 <-  ggplot(data = b1, aes(x=log(Loss(USD)))) +
  geom_histogram(data = as.data.frame(log(b1$Loss)),aes(x=log(b1$Loss)),color="black",fill="orange")+ ggtitle("Histogram of log(Loss(USD))")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
fig1 <- ggarrange(x1,x2,ncol = 2,nrow = 1)
annotate_figure(fig1,top = text_grob("Histogram", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```


```{r, echo=FALSE,warning=FALSE,include=FALSE}
fit_ln <- fitdist(b1$Loss, "lnorm",method = "mle")
fit_gm <- fitdist(b1$Loss,"gamma",method = "mme")
fit_wb <- fitdist(b1$Loss,"weibull",method = "mle")
fit_ll <- fitdist(b1$Loss,"llogis",method="mle")
```

### Estimated Parameter

```{r,echo=FALSE}
par <- data.frame(
Distribution=c("Log-normal","Log-normal","Gamma","Gamma","Weibull","Weibull","Log-logistic","Log-logistic"),Parameter=c("meanlog","sdlog","shape","rate","shape","scale","shape","scale"),
Estimates=c(fit_ln$estimate[[1]],fit_ln$estimate[[2]],fit_gm$estimate[[1]],rate=fit_gm$estimate[[2]],fit_wb$estimate[[1]],fit_wb$estimate[[2]],fit_ll$estimate[[1]],fit_ll$estimate[[2]]),
Loglik=c(fit_ln$loglik,fit_ln$loglik,fit_gm$loglik,fit_gm$loglik,fit_wb$loglik,fit_wb$loglik,fit_ll$loglik,fit_ll$loglik),
AIC=c(fit_ln$aic,fit_ln$aic,fit_gm$aic,fit_gm$aic,fit_wb$aic,fit_wb$aic,fit_ll$aic,fit_ll$aic),
BIC=c(fit_ln$bic,fit_ln$bic,fit_gm$bic,fit_gm$bic,fit_wb$bic,fit_wb$bic,fit_ll$bic,fit_ll$bic))
```

\newline
`r table_nums('tab_5')`
```{r,echo=FALSE,fig.cap=tab.5,ft.align='left'}
tab5 <- flextable(par)
tab5 <- theme_box(tab5)
tab5 <- merge_v(tab5,j=~Distribution+Loglik+AIC+BIC)
#tab5 <- theme_box(tab5)
tab5 <- bg(tab5, bg = "#66B3FF", part = "header")
tab5 <- autofit(tab5)
tab5
```


```{r,echo=FALSE,warning=FALSE}
plot.legend <- c("Log-normal","Gamma","Weibull","Log-logistic")
den <- denscomp(list(fit_ln,fit_gm,fit_wb,fit_ll), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+scale_x_continuous(labels=f1)+labs(x = "Loss(USD)", y = "Density") 

qq <- qqcomp(list(fit_ln,fit_gm,fit_wb,fit_ll), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+scale_x_continuous(labels=f1)+scale_y_continuous(labels=f1)

cdf <- cdfcomp(list(fit_ln,fit_gm,fit_wb,fit_ll), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+scale_x_continuous(labels=f1)+labs(caption = "*Black dots are Emperical CDF", x = "Loss(USD)", y = "CDF") 

pp <- ppcomp(list(fit_ln,fit_gm,fit_wb,fit_ll), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
qq1 <- qqcomp(list(fit_ln,fit_gm,fit_wb), legendtext =c("Log-normal","Gamma","Weibull") ,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+scale_x_continuous(labels=f1)+scale_y_continuous(labels=f1)
fig2 <- ggarrange(den,ncol = 1,nrow = 1)
annotate_figure(fig2,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline
```{r,echo=FALSE,warning=FALSE}
fig3 <- ggarrange(qq,ncol = 1,nrow = 1)
annotate_figure(fig3,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

```{r,echo=FALSE,warning=FALSE}
fig3a <- ggarrange(qq1,ncol = 1,nrow = 1)
annotate_figure(fig3a,top = text_grob("QQ Plot without Log-logistic", color = "black", face = "bold", size = 14),fig.lab = "Fig.3a", fig.lab.face = "bold")
```


```{r,echo=FALSE,warning=FALSE}
fig4 <- ggarrange(pp,ncol = 1,nrow = 1)
annotate_figure(fig4,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE,warning=FALSE}
fig5 <- ggarrange(cdf,ncol = 1,nrow = 1)
annotate_figure(fig5,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE,warning=FALSE,include=FALSE}
h1=hist(b1$Loss,main = "Loss(USD)")
breaks_cdf <- plnorm(h1$breaks, meanlog= fit_ln$estimate['meanlog'],sdlog=fit_ln$estimate['sdlog'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_ln <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_ln <- ks.test(b1$Loss,"plnorm",fit_ln$estimate['meanlog'],fit_ln$estimate['sdlog'])
ad_ln <- goftest::ad.test(b1$Loss,"plnorm",fit_ln$estimate['meanlog'],fit_ln$estimate['sdlog'])
cvm_ln <- goftest::cvm.test(b1$Loss,null="plnorm",fit_ln$estimate[1],fit_ln$estimate[2])

breaks_cdf <- pgamma(h1$breaks,shape = fit_gm$estimate['shape'],rate = fit_gm$estimate['rate'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_gm <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_gm <- ks.test(b1$Loss,"pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])
ad_gm <- goftest::ad.test(b1$Loss,"pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])
cvm_gm <- goftest::cvm.test(x=b1$Loss,null="pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])

breaks_cdf <- pweibull(q = h1$breaks,shape = fit_wb$estimate[[1]], scale = fit_wb$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_wb <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_wb <- ks.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])
ad_wb <- goftest::ad.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])
cvm_wb <- goftest::cvm.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])

breaks_cdf <- pllogis(q = h1$breaks, shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_ll <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_ll <- ks.test(x = b1$Loss, "pllogis", shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
ad_ll <- goftest::ad.test(x = b1$Loss, "pllogis", shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
cvm_ll <- goftest::cvm.test(b1$Loss,"pllogis",shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
```

```{r,echo=FALSE}
goft <- round_df(data.frame(ChiSq=c(a_ln$p.value,a_gm$p.value,a_wb$p.value,a_ll$p.value),KS=c(ks_ln$p.value,ks_gm$p.value,ks_wb$p.value,ks_ll$p.value),AD=c(ad_ln$p.value,ad_gm$p.value,ad_wb$p.value,ad_ll$p.value),CVM=c(cvm_ln$p.value,cvm_gm$p.value,cvm_wb$p.value,cvm_ll$p.value)),2)
```

\newline

```{r,echo=FALSE}
gofc <- round_df(data.frame(Loglik =c(fit_ln$loglik,fit_gm$loglik,fit_wb$loglik,fit_ll$loglik),AIC=c(fit_ln$aic,fit_gm$aic,fit_wb$aic,fit_ll$aic),BIC=c(fit_ln$bic,fit_gm$bic,fit_wb$bic,fit_ll$bic)),2)
```

`r table_nums('tab_9')`
```{r,echo=FALSE,fig.cap=tab.9,ft.align='left'}
goft <- cbind(Distribution=c("Log-normal","Gamma","Weibull","Log-logistic"),goft)
tab9 <- flextable(goft,theme_fun = theme_booktabs)
tab9 <- bg(tab9, bg = "#66B3FF", part = "header")
tab9 <- color(tab9, ~ ChiSq >= 0.05 , ~ChiSq,color = "green")
tab9 <- color(tab9, ~ KS >= 0.05 , ~KS,color = "green")
tab9 <- color(tab9, ~ AD >= 0.05 , ~AD,color = "green")
tab9 <- color(tab9, ~ CVM >= 0.05 , ~CVM,color = "green")
tab9 <- color(tab9, ~ (ChiSq >= 0.01 & ChiSq < 0.05) , ~ChiSq,color = "orange")
tab9 <- color(tab9, ~ (KS >= 0.01 & KS < 0.05) , ~KS,color = "orange")
tab9 <- color(tab9, ~ (AD >= 0.01 & AD < 0.05) , ~AD,color = "orange")
tab9 <- color(tab9, ~ (CVM >= 0.01 & CVM < 0.05) , ~CVM,color = "orange")
tab9 <- color(tab9, ~ (ChiSq < 0.01 ) , ~ChiSq,color = "red")
tab9 <- color(tab9, ~ (KS < 0.01) , ~KS,color = "red")
tab9 <- color(tab9, ~ (AD < 0.01) , ~AD,color = "red")
tab9 <- color(tab9, ~ (CVM < 0.01) , ~CVM,color = "red")
colkeys = c("ChiSq","KS","AD","CVM")
tab9 <- colformat_num(x = tab9, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab9 <- add_footer_lines(tab9,values = c("p-value greater than or equal to 0.05 is highlighted in green","p-value less than 0.05 and greater than or equal to 0.01 is highlighted in amber","p-value less than 0.01 is highlighted in red"),top=FALSE)
tab9 <- fontsize(x=tab9,size = 6,part = "footer")
tab9 <- autofit(tab9)
tab9
```

\newline

`r table_nums('tab_10')`
```{r,echo=FALSE,fig.cap=tab.10,ft.align='left'}
gofc <- cbind(Distribution=c("Log-normal","Gamma","Weibull","Log-logistic"),gofc)
tab10 <- flextable(gofc,theme_fun = theme_booktabs)
tab10 <- bg(tab10, bg = "#66B3FF", part = "header")
colkeys = c("Loglik","AIC","BIC")
tab10 <- colformat_num(x = tab10, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab10 <- autofit(tab10)
tab10
```

**Conclusion**



<!-- ##########################Model Fitting on Complete Data(after 2003Q1) by taking log transformation ################################################-->


## 2. Fit on log transformation of Loss data without any break-out by provider 


### Summary
```{r,warning=FALSE,echo=FALSE}
b1 <- Loss
k1 <- length(which(is.na(Loss$Loss)))
if(k1 > 0){
  b1 <- b1[-which(is.na(b1$Loss)),]
}
k2 <- length(which(Loss$Loss==0))
if(k2>0)
{
  b1=b1[-which(b1$Loss==0),]
}
b1$Loss <- log(b1$Loss)
over_all_summ <- eda(b1,k1,k2)
```


`r table_nums('tab_11')`
```{r,echo=FALSE,fig.cap=tab.11,ft.align='left'}
tab11 <- flextable(over_all_summ[,2:7])
tab11 <- bg(tab11, bg = "#66B3FF", part = "header")
colkeys = c("Freqency Observations","NA","0's","Severity Observations")
tab11 <- colformat_num(x = tab11, col_keys = colkeys,big.mark=",", digits = 0, na_str = "N/A")
tab11 <- flextable::align(tab11,align="center", part = "all" )
tab11 <- autofit(tab11)
tab11
```

NA's and zeros are omitted from the analysis

\newline

`r table_nums('tab_12')`
```{r,echo=FALSE,fig.cap=tab.12,ft.align='left'}
tab12 <- flextable(over_all_summ[,8:14])
tab12 <- bg(tab12, bg = "#66B3FF", part = "header")
colkeys = c("Min","Max","Mean","Median","Std. dev","Skewness","Kurtosis")
tab12 <- colformat_num(x = tab12, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab12 <- autofit(tab12)
tab12
```

\newline

`r table_nums('tab_13')`
```{r,echo=FALSE,fig.cap=tab.13,ft.align='left'}
tab13 <- flextable(over_all_summ[,15:21],theme_fun = theme_booktabs)
tab13 <- bg(tab13, bg = "#66B3FF", part = "header")
colkeys = c("25th pct","50th pct","75th pct","95th pct","97.5th pct","99th pct","99.9th pct")
tab13 <- colformat_num(x = tab13, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab13 <- fontsize(x=tab13,size = 10)
tab13 <- autofit(tab13)
tab13
```
\newline

```{r,echo=FALSE,message=FALSE}
hist_los <- ggplot(data = b1, aes(x=Log(Loss(USD)))) +
  geom_histogram(data = as.data.frame(b1$Loss),aes(x=b1$Loss),color="black",fill="orange")
fig6 <- ggarrange(hist_los,ncol = 1,nrow = 1)
annotate_figure(fig6,top = text_grob("Histogram of Log of Loss(USD) ", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

```{r, echo=FALSE,warning=FALSE,include=FALSE}

fit_gm <- fitdist(b1$Loss,"gamma",method = "mle")
fit_wb <- fitdist(b1$Loss,"weibull",method = "mle")
fit_ll <- fitdist(b1$Loss,"llogis",method="mle")
fit_burr <- fitdist(b1$Loss,"burr",start = list(shape1=0.1,shape2=1,rate=1))
fit_t <-    fitdist(b1$Loss, "t.scaled",start=list(df=2,mean=mean(b1$Loss),sd=sd(b1$Loss)))
fit_norm <- fitdist(b1$Loss,"norm",method = "mle")
fit_lnorm <- fitdist(b1$Loss,"lnorm",method = "mle")
```

### Estimated Parameter

```{r,echo=FALSE}
par_log <- data.frame(
Distribution=c("Gamma","Gamma","Weibull","Weibull","Log-logistic","Log-logistic","Burr","Burr","Burr","Student's-t","Student's-t","Student's-t","Normal","Normal","Log-normal","Log-normal"),
Parameter=c("shape","rate","shape","scale","shape","scale","shape1","shape2","rate","df","location","scale","mean","sd","meanlog","sdlog"),
Estimates=c(fit_gm$estimate[[1]],fit_gm$estimate[[2]],fit_wb$estimate[[1]],fit_wb$estimate[[2]],fit_ll$estimate[[1]],fit_ll$estimate[[2]],fit_burr$estimate[[1]],fit_burr$estimate[[2]],fit_burr$estimate[[3]],fit_t$estimate[[1]],fit_t$estimate[[2]],fit_t$estimate[[3]],fit_norm$estimate[[1]],fit_norm$estimate[[2]],fit_lnorm$estimate[[1]],fit_lnorm$estimate[[2]]),
Loglik=c(fit_gm$loglik,fit_gm$loglik,fit_wb$loglik,fit_wb$loglik,fit_ll$loglik,fit_ll$loglik,fit_burr$loglik,fit_burr$loglik,fit_burr$loglik,fit_t$loglik,fit_t$loglik,fit_t$loglik,fit_norm$loglik,fit_norm$loglik,fit_lnorm$loglik,fit_lnorm$loglik),
AIC=c(fit_gm$aic,fit_gm$aic,fit_wb$aic,fit_wb$aic,fit_ll$aic,fit_ll$aic,fit_burr$aic,fit_burr$aic,fit_burr$aic,fit_t$aic,fit_t$aic,fit_t$aic,fit_norm$aic,fit_norm$aic,fit_lnorm$aic,fit_lnorm$aic),
BIC=c(fit_gm$bic,fit_gm$bic,fit_wb$bic,fit_wb$bic,fit_ll$bic,fit_ll$bic,fit_burr$bic,fit_burr$bic,fit_burr$bic,fit_t$bic,fit_t$bic,fit_t$bic,fit_norm$bic,fit_norm$bic,fit_lnorm$bic,fit_lnorm$bic))
```

`r table_nums('tab_14')`
```{r,echo=FALSE,fig.cap=tab.14,ft.align='left'}
tab14 <- flextable(par_log)
tab14 <- merge_v(tab14,j=~Distribution)
tab14 <- theme_box(tab14)
tab14 <- bg(tab14, bg = "#66B3FF", part = "header")
tab14 <- merge_v(tab14,j=~Distribution+Loglik+AIC+BIC)
tab14 <- autofit(tab14)
tab14
```


```{r,echo=FALSE}
plot.legend <- c("Gamma","Weibull","Log-logistic","Burr","Student's-t","Normal","Log-normal")
den <-denscomp(list(fit_gm,fit_wb,fit_ll,fit_burr,fit_t,fit_norm,fit_lnorm), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+labs(x = "log(Loss(USD))", y = "Density") 

qq <-qqcomp(list(fit_gm,fit_wb,fit_ll,fit_burr,fit_t,fit_norm,fit_lnorm), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
cdf <-cdfcomp(list(fit_gm,fit_wb,fit_ll,fit_burr,fit_t,fit_norm,fit_lnorm), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+labs(caption = "*Black dots are Emperical CDF", x = "log(Loss(USD))", y = "CDF") 
pp <- ppcomp(list(fit_gm,fit_wb,fit_ll,fit_burr,fit_t,fit_norm,fit_lnorm), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))

fig7 <- ggarrange(den,ncol = 1,nrow = 1)
annotate_figure(fig7,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline
```{r,echo=FALSE}
fig8 <- ggarrange(qq,ncol = 1,nrow = 1)
annotate_figure(fig8,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline
```{r,echo=FALSE}
fig9 <- ggarrange(pp,ncol = 1,nrow = 1)
annotate_figure(fig9,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE}
fig10 <- ggarrange(cdf,ncol = 1,nrow = 1)
annotate_figure(fig10,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

```{r,echo=FALSE,warning=FALSE,include=FALSE}
h1=hist(b1$Loss,main="Loss(USD)")

breaks_cdf <- pgamma(h1$breaks,shape = fit_gm$estimate['shape'],rate = fit_gm$estimate['rate'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_gm <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_gm <- ks.test(b1$Loss,"pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])
ad_gm <- goftest::ad.test(b1$Loss,"pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])
cvm_gm <- goftest::cvm.test(x=b1$Loss,null="pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])

breaks_cdf <- pweibull(q = h1$breaks,shape = fit_wb$estimate[[1]], scale = fit_wb$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_wb <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)

ks_wb <- ks.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])
ad_wb <- goftest::ad.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])
cvm_wb <- goftest::cvm.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])

breaks_cdf <- pllogis(q = h1$breaks, shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_ll <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_ll <- ks.test(x = b1$Loss, "pllogis", shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
ad_ll <- goftest::ad.test(x = b1$Loss, "pllogis", shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
cvm_ll <- goftest::cvm.test(b1$Loss,"pllogis",shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])

breaks_cdf <- pburr(h1$breaks,shape1=fit_burr$estimate[[1]],shape2=fit_burr$estimate[[2]],rate=fit_burr$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_burr <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_burr <- ks.test(b1$Loss,"pburr",shape1=fit_burr$estimate[[1]],shape2=fit_burr$estimate[[2]],rate=fit_burr$estimate[[3]])
ad_burr <- goftest::ad.test(b1$Loss,"pburr",shape1=fit_burr$estimate[[1]],shape2=fit_burr$estimate[[2]],rate=fit_burr$estimate[[3]])
cvm_burr <- goftest::cvm.test(b1$Loss,"pburr",shape1=fit_burr$estimate[[1]],shape2=fit_burr$estimate[[2]],rate=fit_burr$estimate[[3]])

breaks_cdf <- pt.scaled(h1$breaks,df=fit_t$estimate[[1]],mean=fit_t$estimate[[2]],sd=fit_t$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_t <-chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_t <-  ks.test(x=b1$Loss,"pt.scaled",df=fit_t$estimate[[1]],mean=fit_t$estimate[[2]],sd=fit_t$estimate[[3]])
ad_t <-goftest::ad.test(x=b1$Loss,null="pt.scaled",df=fit_t$estimate[[1]],mean=fit_t$estimate[[2]],sd=fit_t$estimate[[3]])
cvm_t <- goftest::cvm.test(x=b1$Loss,null="pt.scaled",df=fit_t$estimate[[1]],mean=fit_t$estimate[[2]],sd=fit_t$estimate[[3]])

breaks_cdf <- pnorm(h1$breaks, mean= fit_norm$estimate['mean'],sd=fit_norm$estimate['sd'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_n <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_n <- ks.test(b1$Loss,"pnorm",mean= fit_norm$estimate['mean'],sd=fit_norm$estimate['sd'])
ad_n <- goftest::ad.test(b1$Loss,"pnorm",mean= fit_norm$estimate['mean'],sd=fit_norm$estimate['sd'])
cvm_n <- goftest::cvm.test(b1$Loss,null="pnorm",mean= fit_norm$estimate['mean'],sd=fit_norm$estimate['sd'])

breaks_cdf <- plnorm(h1$breaks, meanlog= fit_lnorm$estimate['meanlog'],sdlog=fit_lnorm$estimate['sdlog'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_ln <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_ln <- ks.test(b1$Loss,"plnorm",fit_lnorm$estimate['meanlog'],fit_lnorm$estimate['sdlog'])
ad_ln <- goftest::ad.test(b1$Loss,"plnorm",fit_lnorm$estimate['meanlog'],fit_lnorm$estimate['sdlog'])
cvm_ln <- goftest::cvm.test(b1$Loss,null="plnorm",fit_lnorm$estimate['meanlog'],fit_lnorm$estimate['sdlog'])

```

```{r,echo=FALSE}
goft <- round_df(data.frame(ChiSq=c(a_gm$p.value,a_wb$p.value,a_ll$p.value,a_burr$p.value,a_t$p.value,a_n$p.value,a_ln$p.value),KS=c(ks_gm$p.value,ks_wb$p.value,ks_ll$p.value,ks_burr$p.value,ks_t$p.value,ks_n$p.value,ks_ln$p.value),AD=c(ad_gm$p.value,ad_wb$p.value,ad_ll$p.value,ad_burr$p.value,ad_t$p.value,ad_n$p.value,ad_ln$p.value),CVM=c(cvm_gm$p.value,cvm_wb$p.value,cvm_ll$p.value,cvm_burr$p.value,cvm_t$p.value,cvm_n$p.value,cvm_ln$p.value)),2)
```

\newline

```{r,echo=FALSE}
gofc <- round_df(data.frame(Loglik =c(fit_gm$loglik,fit_wb$loglik,fit_ll$loglik,fit_burr$loglik,fit_t$loglik,fit_norm$loglik,fit_lnorm$loglik),AIC=c(fit_gm$aic,fit_wb$aic,fit_ll$aic,fit_burr$aic,fit_t$aic,fit_norm$aic,fit_lnorm$aic),BIC=c(fit_gm$bic,fit_wb$bic,fit_ll$bic,fit_burr$bic,fit_t$bic,fit_norm$bic,fit_lnorm$bic)),2)
```

`r table_nums('tab_21')`
```{r,echo=FALSE,fig.cap=tab.21,ft.align='left'}
goft <- cbind(Distribution=c("Gamma","Weibull","Log-logistic","Burr","Student's-t","Normal","Log-normal"),goft)
tab21 <- flextable(goft,theme_fun = theme_booktabs)
tab21 <- bg(tab21, bg = "#66B3FF", part = "header")
tab21 <- color(tab21, ~ ChiSq >= 0.05 , ~ChiSq,color = "green")
tab21 <- color(tab21, ~ KS >= 0.05 , ~KS,color = "green")
tab21 <- color(tab21, ~ AD >= 0.05 , ~AD,color = "green")
tab21 <- color(tab21, ~ CVM >= 0.05 , ~CVM,color = "green")
tab21 <- color(tab21, ~ (ChiSq >= 0.01 & ChiSq < 0.05) , ~ChiSq,color = "orange")
tab21 <- color(tab21, ~ (KS >= 0.01 & KS < 0.05) , ~KS,color = "orange")
tab21 <- color(tab21, ~ (AD >= 0.01 & AD < 0.05) , ~AD,color = "orange")
tab21 <- color(tab21, ~ (CVM >= 0.01 & CVM < 0.05) , ~CVM,color = "orange")
tab21 <- color(tab21, ~ (ChiSq < 0.01 ) , ~ChiSq,color = "red")
tab21 <- color(tab21, ~ (KS < 0.01) , ~KS,color = "red")
tab21 <- color(tab21, ~ (AD < 0.01) , ~AD,color = "red")
tab21 <- color(tab21, ~ (CVM < 0.01) , ~CVM,color = "red")
colkeys = c("ChiSq","KS","AD","CVM")
tab21 <- colformat_num(x = tab21, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab21 <- add_footer_lines(tab21,values = c("p-value greater than or equal to 0.05 is highlighted in green","p-value less than 0.05 and greater than or equal to 0.01 is highlighted in amber","p-value less than 0.01 is highlighted in red"),top=FALSE)
tab21 <- fontsize(x=tab21,size = 6,part = "footer")
tab21 <- autofit(tab21)
tab21
```

\newline

`r table_nums('tab_22')`
```{r,echo=FALSE,fig.cap=tab.22,ft.align='left'}
gofc <- cbind(Distribution=c("Gamma","Weibull","Log-logistic","Burr","Student's-t","Normal","Log-normal"),gofc)
tab22 <- flextable(gofc,theme_fun = theme_booktabs)
tab22 <- bg(tab22, bg = "#66B3FF", part = "header")
colkeys = c("Loglik","AIC","BIC")
tab22 <- colformat_num(x = tab22, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab22 <- autofit(tab22)
tab22
```

**Conclusion**

* For all the candidate distributions we reject the null hypothesis at 5% level of significance for most of the the tests. For the Log-logistic distribution we fail to reject the null hypothesis at 5% level of significance for CVM test and for the Burr distribution we fail to reject hte null hypothesis at 5% level of significance for KS test.
* The Gamma distribution has the highest log-likelihood and the lowest AIC and BIC values among all the candidate distribution.
* From the QQ (Fig.8) plot it appears that the Normal, Gamma, Student's-t and Log-normal distributions has good fit in the upper tail of the data. 
* In CDF (Fig.10) plot there are kinks observed at the points 13.75 and 14.1 in the empirical plot.

From the above analysis it appears that **none of the candidate** distribution has good fit (based on GoF test and GoF criteria). Left truncation might capture the data more accurately.


<!-- ######################################## Model Fitting by data provider ##############################################################################-->


## 3. Truncated distribution fit for log transformation of loss on combined data

<!-- Model fitting on Complete Data (after 2003Q1) with Log Transformation after Truncation  -->

### Summary

```{r,warning=FALSE,echo=FALSE}

dburr <- actuar::dburr
pburr <- actuar::pburr
qburr <- actuar::qburr

dt.scaled <- metRology::dt.scaled
pt.scaled <- metRology::pt.scaled
qt.scaled <- metRology::qt.scaled
b1 <- Loss
k1 <- length(which(is.na(b1$Loss)))
if(k1 > 0){b1 <- b1[-which(is.na(b1$Loss)),]}
k2 <- length(which(b1$Loss==0))
if(k2>0){b1=b1[-which(b1$Loss==0),]}
b1$Loss <- log(b1$Loss)
over_all_summ <- eda(b1,k1,k2)
```

`r table_nums('tab_23')`
```{r,echo=FALSE,fig.cap=tab.23,ft.align='left'}
tab23 <- flextable(over_all_summ[,2:7])
tab23 <- bg(tab23, bg = "#66B3FF", part = "header")
colkeys = c("Freqency Observations","NA","0's","Severity Observations")
tab23 <- colformat_num(x = tab23, col_keys = colkeys,big.mark=",", digits = 0, na_str = "N/A")
tab23 <- flextable::align(tab23,align="center", part = "all" )
tab23 <- autofit(tab23)
tab23
```

NA's and zeros are omitted from the analysis

\newline

`r table_nums('tab_24')`
```{r,echo=FALSE,fig.cap=tab.24,ft.align='left'}
tab24 <- flextable(over_all_summ[,8:14])
tab24 <- bg(tab24, bg = "#66B3FF", part = "header")
colkeys = c("Min","Max","Mean","Median","Std. dev","Skewness","Kurtosis")
tab24 <- colformat_num(x = tab24, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab24 <- autofit(tab24)
tab24
```

\newline

`r table_nums('tab_25')`
```{r,echo=FALSE,fig.cap=tab.25,ft.align='left'}
tab25 <- flextable(over_all_summ[,15:21],theme_fun = theme_booktabs)
tab25 <- bg(tab25, bg = "#66B3FF", part = "header")
colkeys = c("25th pct","50th pct","75th pct","95th pct","97.5th pct","99th pct","99.9th pct")
tab25 <- colformat_num(x = tab25, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab25 <- fontsize(x=tab25,size = 10)
tab25 <- autofit(tab25)
tab25
```

\newline

```{r,echo=FALSE, message=FALSE}

x1 <- ggplot(data = b1, aes(x=Log(Loss(USD)))) +
  geom_histogram(data = as.data.frame(b1$Loss),aes(x=b1$Loss),color="black",fill="orange")+labs(title="Histogram of Log Loss(USD) ", y = "Count", x="Log(Loss(USD))")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
x2 <- ggplot(data=b1, aes(Loss)) + stat_ecdf(geom = "point")+labs(title="Empirical Cumulative \n Distribution Function", y = "CDF", x="Log(Loss(USD))")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
 
fig11 <- ggarrange(x1,x2,ncol = 2,nrow = 1)
annotate_figure(fig11,text_grob("Before Truncation", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

```{r,echo=FALSE, message=FALSE}
H_trunc <- 13.90
b2 <- b1[b1$Loss > H_trunc,]

x1 <- ggplot(data = b2, aes(x=Log(Loss(USD)))) +
  geom_histogram(data = as.data.frame(b2$Loss),aes(x=b2$Loss),color="black",fill="orange")+labs(title="Histogram of Log Loss(USD)", y = "Count", x="Log(Loss(USD))")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
x2 <- ggplot(data=b2, aes(Loss)) + stat_ecdf(geom = "point")+labs(title="Empirical Cumulative \n Distribution Function", y = "CDF", x="Log(Loss(USD))")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
 
fig12 <- ggarrange(x1,x2,ncol = 2,nrow = 1)
annotate_figure(fig12,text_grob("After Truncation", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")

usd <- paste0("$",round(exp(H_trunc),0))
```

**Truncation Point**



```{r, echo=FALSE}
trunc_summ <- data.frame(matrix(0, nrow = 1, ncol = 6))
colnames(trunc_summ) <- c("Truncation Point","Data Points before Truncation","Data Points after Truncation","Truncated Data Points","Max Loss of Truncated Data","Average Loss of Truncated Data")
trunc_summ[1,1] <- paste0(H_trunc," ($",format(round(exp(H_trunc),2),big.mark=","),")")
trunc_summ[1,2] <- nrow(b1)
trunc_summ[1,3] <- nrow(b2)
trunc_summ[1,4] <- paste0(nrow(b1) - nrow(b2)," (",round((1-nrow(b2)/nrow(b1))*100,2),"%)")
trunc_summ[1,5] <- format(round(exp(max(b1$Loss[which(b1$Loss <= H_trunc)])),2),big.mark = ",")
trunc_summ[1,6] <- format(round(mean(exp(b1$Loss[which(b1$Loss <= H_trunc)])),2),big.mark=",")
```

\newline

`r table_nums('tab_26')`
```{r,echo=FALSE,fig.cap=tab.26,ft.align='left'}
tab26 <- flextable(trunc_summ)
tab26 <- bg(tab26, bg = "#66B3FF", part = "header")
colkeys =c("Max Loss of Truncated Data","Average Loss of Truncated Data")
tab26 <- colformat_num(x = tab26, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
colkeys =c("Data Points before Truncation","Data Points after Truncation")
tab26 <- colformat_num(x = tab26, col_keys = colkeys,big.mark=",", digits = 0, na_str = "N/A")
tab26 <- align_text_col(tab26,align="center")
tab26 <- fontsize(tab26, part = "header", size = 10) 
tab26 <- fontsize(x=tab26,size = 10)
tab26 <- autofit(tab26)
tab26
```

```{r, echo=FALSE,warning=FALSE,include=FALSE}
fit_ln <- fitdist(b1$Loss, "lnorm",method = "mle")
fit_gm <- fitdist(b1$Loss,"gamma",method = "mle")
fit_wb <- fitdist(b1$Loss,"weibull",method = "mle")
fit_ll <- fitdist(b1$Loss,"llogis",method="mle")
fit_burr <- fitdist(b1$Loss, "burr", start = list(shape1 = 0.1, shape2 = 1, rate = 1))
fit_t <- fitdist(b1$Loss, "t.scaled", start=list(df=2, mean = mean(b1$Loss),sd = sd(b1$Loss)))
fit_norm <- fitdist(b1$Loss, "norm")
```

```{r, warning=FALSE, echo=FALSE}
dtrunc_ln <- function(x, meanlog, sdlog)
  dtrunc(x, "lnorm", a = H_trunc, b = Inf, meanlog = meanlog, sdlog = sdlog)
ptrunc_ln <- function(x, meanlog, sdlog)
  ptrunc(x, "lnorm", a = H_trunc, b = Inf, meanlog = meanlog, sdlog = sdlog)
qtrunc_ln <- function(x, meanlog, sdlog)
  qtrunc(x, "lnorm", a = H_trunc, b = Inf, meanlog = meanlog, sdlog = sdlog)

dtrunc_gm <- function(x, shape, rate)
  dtrunc(x, "gamma", a = H_trunc, b = Inf, shape = shape, rate = rate)
ptrunc_gm <- function(x, shape, rate)
  ptrunc(x, "gamma", a = H_trunc, b = Inf, shape = shape, rate = rate)
qtrunc_gm <- function(x, shape, rate)
  qtrunc(x, "gamma", a = H_trunc, b = Inf, shape = shape, rate = rate)

dtrunc_wb <- function(x, shape, scale)
  dtrunc(x, "weibull", a = H_trunc, b = Inf, shape = shape, scale = scale)
ptrunc_wb <- function(x, shape, scale)
  ptrunc(x, "weibull", a = H_trunc, b = Inf, shape = shape, scale = scale)
qtrunc_wb <- function(x, shape, scale)
  qtrunc(x, "weibull", a = H_trunc, b = Inf, shape = shape, scale =scale)

dtrunc_ll <- function(x, shape, scale)
  dtrunc(x, "llogis", a = H_trunc, b = Inf, shape = shape, scale =scale)
ptrunc_ll <- function(x, shape, scale)
  ptrunc(x, "llogis", a = H_trunc, b = Inf, shape = shape, scale = scale)
qtrunc_ll <- function(x, shape, scale)
  qtrunc(x, "llogis", a = H_trunc, b = Inf, shape = shape, scale = scale)

dtrunc_burr <- function(x, shape1, shape2, rate)
  dtrunc(x, "burr", a = H_trunc, b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)
ptrunc_burr <- function(x, shape1, shape2, rate)
  ptrunc(x, "burr", a = H_trunc, b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)
qtrunc_burr <- function(x, shape1, shape2, rate)
  qtrunc(x, "burr", a = H_trunc, b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)

dtrunc_t <- function(x, df, mean, sd)
  dtrunc(x, "t.scaled", a = H_trunc, b = Inf, df = df, mean = mean, sd =sd)
ptrunc_t <- function(x, df, mean, sd)
  ptrunc(x, "t.scaled", a = H_trunc, b = Inf, df = df, mean = mean, sd =sd)
qtrunc_t <- function(x, df, mean, sd)
  qtrunc(x, "t.scaled", a = H_trunc, b = Inf, df = df, mean = mean, sd =sd)

dtrunc_norm <- function(x, mean, sd)
  dtrunc(x, "norm", a = H_trunc, b = Inf, mean = mean, sd = sd)
ptrunc_norm <- function(x, mean, sd)
  ptrunc(x, "norm", a = H_trunc, b = Inf, mean = mean, sd = sd)
qtrunc_norm <- function(x, mean, sd)
  qtrunc(x, "norm", a = H_trunc, b = Inf, mean = mean, sd = sd)

fit_tln <- fitdistrplus::fitdist(b2$Loss, "trunc_ln",start = list(meanlog =1, sdlog = 1))
fit_tgm <- fitdistrplus::fitdist(b2$Loss,"trunc_gm",start = list(shape = 6, rate = 0.001))
fit_twb <- fitdistrplus::fitdist(b2$Loss,"trunc_wb",start = list(shape = 1, scale = 1))
fit_tll <- fitdistrplus::fitdist(b2$Loss,"trunc_ll",start = list(shape = 6, scale = 2))
fit_tburr <- fitdistrplus::fitdist(b2$Loss, "trunc_burr", start = list(shape1 = 2, shape2 = 4, rate = 1.5))
fit_tt <- fitdistrplus::fitdist(b2$Loss, "trunc_t", start=list(df=2, mean = mean(b2$Loss),sd = sd(b2$Loss)))
fit_tnorm <- fitdistrplus::fitdist(b2$Loss, "trunc_norm", start = list(mean = mean(b2$Loss), sd = sd(b2$Loss)))
```


### Estimated Parameters

```{r,echo=FALSE}
par_t <- data.frame(dist=c("Log-normal","Log-normal","Gamma","Gamma","Weibull","Weibull","Log-logistic","Log-logistic","Normal","Normal","Burr","Burr","Burr","Student's-t","Student's-t","Student's-t"),
par=c("meanlog","sdlog","shape","rate","shape","scale","shape","scale","mean","sd","shape1","shape2","rate","df","location","scale"),
before=c(fit_ln$estimate[[1]],fit_ln$estimate[[2]],fit_gm$estimate[[1]],fit_gm$estimate[[2]],fit_wb$estimate[[1]],fit_wb$estimate[[2]],fit_ll$estimate[[1]],fit_ll$estimate[[2]],fit_norm$estimate[[1]],fit_norm$estimate[[2]],fit_burr$estimate[[1]],fit_burr$estimate[[2]],fit_burr$estimate[[3]],fit_t$estimate[[1]],fit_t$estimate[[2]],fit_t$estimate[[3]]),

after=c(fit_tln$estimate[[1]],fit_tln$estimate[[2]],fit_tgm$estimate[[1]],fit_tgm$estimate[[2]],fit_twb$estimate[[1]],fit_twb$estimate[[2]],fit_tll$estimate[[1]],fit_tll$estimate[[2]],fit_tnorm$estimate[[1]],fit_tnorm$estimate[[2]],fit_tburr$estimate[[1]],fit_tburr$estimate[[2]],fit_tburr$estimate[[3]],fit_tt$estimate[[1]],fit_tt$estimate[[2]],fit_tt$estimate[[3]]))

```

`r table_nums('tab_27')`
```{r,echo=FALSE,fig.cap=tab.27,ft.align='left'}
tab27 <- flextable(par_t)
tab27 <- set_header_labels(tab27, dist = "Distribution", 
    par = "Parameter", before = "Estimate",
    after = "Estimate")
tab27 <- bg(tab27, bg = "#66B3FF", part = "header")
tab27 <- merge_at(tab27, i = 1, j = 3:4, part = "header")
tab27 <- add_header_row(tab27, values = c("", "", "Before", "After"), top = FALSE )
tab27 <- merge_v(tab27,j=c(1))
tab27 <- theme_box(tab27)
tab27 <- bg(tab27, bg = "#66B3FF", part = "header")
tab27 <- fontsize(x=tab27,size = 9,part = "all")
tab27 <- autofit(tab27)
tab27
```

```{r,echo=FALSE,warning=FALSE}
plot.legend <- c("Log-normal","Gamma","Weibull","Log-Logistic","Burr","Student's-t","Normal")
den <- denscomp(list(fit_tln,fit_tgm,fit_twb,fit_tll,fit_tburr,fit_tt,fit_tnorm), legendtext = plot.legend, plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))+labs(x = "log(Loss(USD))", y = "Density") 
qq <- qqcomp(list(fit_tln,fit_tgm,fit_twb,fit_tll,fit_tburr,fit_tt,fit_tnorm), legendtext = plot.legend, plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))
cdf <- cdfcomp(list(fit_tln,fit_tgm,fit_twb,fit_tll,fit_tburr,fit_tt,fit_tnorm), legendtext = plot.legend, plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))+labs(caption = "*Black dots are Emperical CDF", x = "log(Loss(USD))", y = "CDF") 
pp <- ppcomp(list(fit_tln,fit_tgm,fit_twb,fit_tll,fit_tburr,fit_tt,fit_tnorm), legendtext = plot.legend, plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))

fig13 <- ggarrange(den, ncol = 1,nrow = 1)
annotate_figure(fig13,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE}
fig14 <- ggarrange(qq, ncol = 1,nrow = 1)
annotate_figure(fig14,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

```{r,echo=FALSE,warning=FALSE,message=FALSE}
trunc_t <- function(x, df, mean, sd)
  qtrunc(x, "t.scaled", a = H_trunc, b = Inf, df = df, mean = mean, sd =sd)
di1 <- c("tweibull")
dp1 <- list(list(shape=fit_twb$estimate[[1]],scale=fit_twb$estimate[[2]],a=H_trunc,b=Inf))
qq <- list()
for(i in 1:length(di1)){
  gg <- ggplot(data =b2 , mapping = aes(sample = Loss)) +  #Replace b1 by modeling data
  stat_qq_band(distribution = di1[i], dparams = dp1[[i]],conf = 0.95) + # bandtype by default is "pointwise"
  stat_qq_line(distribution = di1[i], dparams = dp1[[i]]) +
  stat_qq_point(distribution = di1[i], dparams = dp1[[i]])+ 
  labs(x = "Theoretical Quantiles", y = "Sample Quantiles")
  qq[[i]] <- gg
}
fig14a <- ggarrange(qq[[1]], ncol = 1,nrow = 1)
annotate_figure(fig14a,top = text_grob("Truncated Weibull QQ-plot 95% Confidence Interval ", color = "black", face = "bold", size = 10),fig.lab = "Fig.14a", fig.lab.face = "bold")
```


\newline

```{r,echo=FALSE}
fig15 <- ggarrange(cdf, ncol = 1,nrow = 1)
annotate_figure(fig15,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE}
fig16 <- ggarrange(pp, ncol = 1,nrow = 1)
annotate_figure(fig16,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

```{r,echo=FALSE,warning=FALSE, warning=FALSE, include=FALSE}
set.seed(100)
h1=hist(b2$Loss,main = "Truncated Loss")

breaks_cdf <- plnormTrunc(h1$breaks, meanlog = fit_tln$estimate[[1]], sdlog = fit_tln$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tln <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tln <- truncgof::ks.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
ad_tln <- truncgof::ad.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
ad2_tln <- truncgof::ad2.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
adup_tln <- truncgof::adup.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
ad2up_tln <- truncgof::ad2up.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
cvm_tln <- truncgof::w2.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
kp_tln <- truncgof::v.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)

breaks_cdf <- TruncatedDistributions::ptgamma(h1$breaks,shape = fit_tgm$estimate[[1]],scale = 1/fit_tgm$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tgm <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tgm <- truncgof::ks.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
ad_tgm <- truncgof::ad.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
ad2_tgm <- truncgof::ad2.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
adup_tgm <- truncgof::adup.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
ad2up_tgm <- truncgof::ad2up.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
cvm_tgm <- truncgof::w2.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
kp_tgm <- truncgof::v.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)

breaks_cdf <- TruncatedDistributions::ptweibull(q = h1$breaks,shape = fit_twb$estimate[[1]], scale = fit_twb$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_twb <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_twb <- truncgof::ks.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
ad_twb <- truncgof::ad.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
ad2_twb <- truncgof::ad2.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
adup_twb <- truncgof::adup.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
ad2up_twb <- truncgof::ad2up.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
cvm_twb <- truncgof::w2.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
kp_twb <- truncgof::v.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)

breaks_cdf <- pllogis(q = h1$breaks, shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tll <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tll <- truncgof::ks.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
ad_tll <- truncgof::ad.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
ad2_tll <- truncgof::ad2.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
adup_tll <- truncgof::adup.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
ad2up_tll <- truncgof::ad2up.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
cvm_tll <- truncgof::w2.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
kp_tll <- truncgof::v.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)

breaks_cdf <- TruncatedDistributions::ptnorm(q = h1$breaks,mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tnorm <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tnorm <- truncgof::ks.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
ad_tnorm <- truncgof::ad.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
ad2_tnorm <- truncgof::ad2.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
adup_tnorm <- truncgof::adup.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
ad2up_tnorm <- truncgof::ad2up.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
cvm_tnorm <- truncgof::w2.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
kp_tnorm <- truncgof::v.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)

breaks_cdf <- pburr(q = h1$breaks,shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tburr <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tburr <- truncgof::ks.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
ad_tburr <- truncgof::ad.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
ad2_tburr <- truncgof::ad2.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
adup_tburr <- truncgof::adup.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
ad2up_tburr <- truncgof::ad2up.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
cvm_tburr <- truncgof::w2.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
kp_tburr <- truncgof::v.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)

breaks_cdf <- pt.scaled(q = h1$breaks,df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tt <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tt <- truncgof::ks.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
ad_tt <- truncgof::ad.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
ad2_tt <- truncgof::ad2.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
adup_tt <- truncgof::adup.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
ad2up_tt <- truncgof::ad2up.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
cvm_tt <- truncgof::w2.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
kp_tt <- truncgof::v.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)

```

```{r,echo=FALSE}
goft <- round_df(data.frame(ChiSq=c(a_tln$p.value,a_tgm$p.value,a_twb$p.value,a_tll$p.value,a_tnorm$p.value,a_tburr$p.value,a_tt$p.value), KS=c(ks_tln$p.value,ks_tgm$p.value,ks_twb$p.value,ks_tll$p.value,ks_tnorm$p.value,ks_tburr$p.value,ks_tt$p.value), AD=c(ad_tln$p.value,ad_tgm$p.value,ad_twb$p.value,ad_tll$p.value,ad_tnorm$p.value,ad_tburr$p.value,ad_tt$p.value), AD2=c(ad2_tln$p.value,ad2_tgm$p.value,ad2_twb$p.value,ad2_tll$p.value,ad2_tnorm$p.value,ad2_tburr$p.value,ad2_tt$p.value), AD_Up=c(adup_tln$p.value,adup_tgm$p.value,adup_twb$p.value,adup_tll$p.value,adup_tnorm$p.value,adup_tburr$p.value,adup_tt$p.value), AD2Up=c(ad2up_tln$p.value,ad2up_tgm$p.value,ad2up_twb$p.value,ad2up_tll$p.value,ad2up_tnorm$p.value,ad2up_tburr$p.value,ad2up_tt$p.value), CVM=c(cvm_tln$p.value,cvm_tgm$p.value,cvm_twb$p.value,cvm_tll$p.value,cvm_tnorm$p.value,cvm_tburr$p.value,cvm_tt$p.value), KP=c(kp_tln$p.value,kp_tgm$p.value,kp_twb$p.value,kp_tll$p.value,kp_tnorm$p.value,kp_tburr$p.value,kp_tt$p.value)),2)
```
\newline
```{r,echo=FALSE}
gofc <- round_df(data.frame(Loglik =c(fit_tln$loglik,fit_tgm$loglik,fit_twb$loglik,fit_tll$loglik,fit_tnorm$loglik,fit_tburr$loglik,fit_tt$loglik), AIC=c(fit_tln$aic,fit_tgm$aic,fit_twb$aic,fit_tll$aic,fit_tnorm$aic,fit_tburr$aic,fit_tt$aic), BIC=c(fit_tln$bic,fit_tgm$bic,fit_twb$bic,fit_tll$bic,fit_tnorm$bic,fit_tburr$bic,fit_tt$bic)),2)

```

`r table_nums('tab_34')`
```{r,echo=FALSE,fig.cap=tab.34,ft.align='left'}
goft <- cbind(Distribution=c("Log-normal","Gamma","Weibull","Log-logistic","Normal","Burr","Student's-t"),goft)
tab34 <- flextable(goft,theme_fun = theme_booktabs)
tab34 <- bg(tab34, bg = "#66B3FF", part = "header")
tab34 <- color(tab34, ~ ChiSq >= 0.05 , ~ChiSq,color = "green")
tab34 <- color(tab34, ~ KS >= 0.05 , ~KS,color = "green")
tab34 <- color(tab34, ~ AD >= 0.05 , ~AD,color = "green")
tab34 <- color(tab34, ~ AD2 >= 0.05 , ~AD2,color = "green")
tab34 <- color(tab34, ~ AD_Up >= 0.05 , ~AD_Up,color = "green")
tab34 <- color(tab34, ~ AD2Up >= 0.05 , ~AD2Up,color = "green")
tab34 <- color(tab34, ~ CVM >= 0.05 , ~CVM,color = "green")
tab34 <- color(tab34, ~ KP >= 0.05 , ~KP,color = "green")
tab34 <- color(tab34, ~ (ChiSq >= 0.01 & ChiSq < 0.05) , ~ChiSq,color = "orange")
tab34 <- color(tab34, ~ (KS >= 0.01 & KS < 0.05) , ~KS,color = "orange")
tab34 <- color(tab34, ~ (AD >= 0.01 & AD < 0.05) , ~AD,color = "orange")
tab34 <- color(tab34, ~ (AD2 >= 0.01 & AD2 < 0.05) , ~AD2,color = "orange")
tab34 <- color(tab34, ~ (AD_Up >= 0.01 & AD_Up < 0.05) , ~AD_Up,color = "orange")
tab34 <- color(tab34, ~ (AD2Up >= 0.01 & AD2Up < 0.05) , ~AD2Up,color = "orange")
tab34 <- color(tab34, ~ (CVM >= 0.01 & CVM < 0.05) , ~CVM,color = "orange")
tab34 <- color(tab34, ~ (KP >= 0.01 & KP < 0.05) , ~KP,color = "orange")
tab34 <- color(tab34, ~ (ChiSq < 0.01 ) , ~ChiSq,color = "red")
tab34 <- color(tab34, ~ (KS < 0.01 ) , ~KS,color = "red")
tab34 <- color(tab34, ~ (AD < 0.01 ) , ~AD,color = "red")
tab34 <- color(tab34, ~ (AD2 < 0.01 ) , ~AD2,color = "red")
tab34 <- color(tab34, ~ (AD_Up < 0.01) , ~AD_Up,color = "red")
tab34 <- color(tab34, ~ (AD2Up < 0.01) , ~AD2Up,color = "red")
tab34 <- color(tab34, ~ (CVM < 0.01) , ~CVM,color = "red")
tab34 <- color(tab34, ~ (KP < 0.01) , ~KP,color = "red")
colkeys = c("ChiSq","KS","AD","AD2","AD_Up","AD2Up","CVM","KP")
tab34 <- colformat_num(x = tab34, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab34 <- add_footer_lines(tab34,values = c("p-value greater than or equal to 0.05 is highlighted in green","p-value less than 0.05 and greater than or equal to 0.01 is highlighted in amber","p-value less than 0.01 is highlighted in red"),top=FALSE)
tab34 <- fontsize(x=tab34,size = 6,part = "footer")
tab34 <- autofit(tab34)
tab34
```

\newline

`r table_nums('tab_35')`
```{r,echo=FALSE,fig.cap=tab.35,ft.align='left'}
gofc <- cbind(Distribution=c("Log-normal","Gamma","Weibull","Log-logistic","Normal","Burr","Student's-t"),gofc)
tab35 <- flextable(gofc,theme_fun = theme_booktabs)
tab35 <- bg(tab35, bg = "#66B3FF", part = "header")
colkeys = c("Loglik","AIC","BIC")
tab35 <- colformat_num(x = tab35, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab35 <- autofit(tab35)
tab35
```

**Conclusion**



```{r, warning=FALSE, echo=FALSE,message=FALSE,include=FALSE}
H_trunc <- c(13.76,13.83,13.90)
fit_tln <- list()
fit_tgm <- list()
fit_twb <- list()
fit_tll <-  list()
fit_tburr <- list()
fit_tt <- list()
fit_tnorm <- list()
for(i in 1:length(H_trunc)){
  set.seed(100)
  b2 <- b1[b1$Loss > H_trunc[i],]
dtrunc_ln <- function(x, meanlog, sdlog)
  dtrunc(x, "lnorm", a = H_trunc[i], b = Inf, meanlog = meanlog, sdlog = sdlog)
ptrunc_ln <- function(x, meanlog, sdlog)
  ptrunc(x, "lnorm", a = H_trunc[i], b = Inf, meanlog = meanlog, sdlog = sdlog)
qtrunc_ln <- function(x, meanlog, sdlog)
  qtrunc(x, "lnorm", a = H_trunc[i], b = Inf, meanlog = meanlog, sdlog = sdlog)

dtrunc_gm <- function(x, shape, rate)
  dtrunc(x, "gamma", a = H_trunc[i], b = Inf, shape = shape, rate = rate)
ptrunc_gm <- function(x, shape, rate)
  ptrunc(x, "gamma", a = H_trunc[i], b = Inf, shape = shape, rate = rate)
qtrunc_gm <- function(x, shape, rate)
  qtrunc(x, "gamma", a = H_trunc[i], b = Inf, shape = shape, rate = rate)

dtrunc_wb <- function(x, shape, scale)
  dtrunc(x, "weibull", a = H_trunc[i], b = Inf, shape = shape, scale = scale)
ptrunc_wb <- function(x, shape, scale)
  ptrunc(x, "weibull", a = H_trunc[i], b = Inf, shape = shape, scale = scale)
qtrunc_wb <- function(x, shape, scale)
  qtrunc(x, "weibull", a = H_trunc[i], b = Inf, shape = shape, scale =scale)

dtrunc_ll <- function(x, shape, scale)
  dtrunc(x, "llogis", a = H_trunc[i], b = Inf, shape = shape, scale =scale)
ptrunc_ll <- function(x, shape, scale)
  ptrunc(x, "llogis", a = H_trunc[i], b = Inf, shape = shape, scale = scale)
qtrunc_ll <- function(x, shape, scale)
  qtrunc(x, "llogis", a = H_trunc[i], b = Inf, shape = shape, scale = scale)

dtrunc_burr <- function(x, shape1, shape2, rate)
  dtrunc(x, "burr", a = H_trunc[i], b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)
ptrunc_burr <- function(x, shape1, shape2, rate)
  ptrunc(x, "burr", a = H_trunc[i], b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)
qtrunc_burr <- function(x, shape1, shape2, rate)
  qtrunc(x, "burr", a = H_trunc[i], b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)

dtrunc_t <- function(x, df, mean, sd)
  dtrunc(x, "t.scaled", a = H_trunc[i], b = Inf, df = df, mean = mean, sd =sd)
ptrunc_t <- function(x, df, mean, sd)
  ptrunc(x, "t.scaled", a = H_trunc[i], b = Inf, df = df, mean = mean, sd =sd)
qtrunc_t <- function(x, df, mean, sd)
  qtrunc(x, "t.scaled", a = H_trunc[i], b = Inf, df = df, mean = mean, sd =sd)

dtrunc_norm <- function(x, mean, sd)
  dtrunc(x, "norm", a = H_trunc[i], b = Inf, mean = mean, sd = sd)
ptrunc_norm <- function(x, mean, sd)
  ptrunc(x, "norm", a = H_trunc[i], b = Inf, mean = mean, sd = sd)
qtrunc_norm <- function(x, mean, sd)
  qtrunc(x, "norm", a = H_trunc[i], b = Inf, mean = mean, sd = sd)

fit_tln[[i]] <- fitdistrplus::fitdist(b2$Loss, "trunc_ln",start = list(meanlog =1, sdlog = 1))
fit_tgm[[i]] <- fitdistrplus::fitdist(b2$Loss,"trunc_gm",start = list(shape = 6, rate = 0.001))
fit_twb[[i]] <- fitdistrplus::fitdist(b2$Loss,"trunc_wb",start = list(shape = 1, scale = 1))
fit_tll[[i]] <- fitdistrplus::fitdist(b2$Loss,"trunc_ll",start = list(shape = 6, scale = 2))
fit_tburr[[i]] <- fitdistrplus::fitdist(b2$Loss, "trunc_burr", start = list(shape1 = 2, shape2 = 4, rate = 1.5))
fit_tt[[i]] <- fitdistrplus::fitdist(b2$Loss, "trunc_t", start=list(df=2, mean = mean(b2$Loss),sd = sd(b2$Loss)))
fit_tnorm[[i]] <- fitdistrplus::fitdist(b2$Loss, "trunc_norm", start = list(mean = mean(b2$Loss), sd = sd(b2$Loss)))
}
a_tln <- ks_tln <- ad_tln <- ad2_tln <-adup_tln <-ad2up_tln <-cvm_tln <- kp_tln<- a_tgm<-ks_tgm <-ad_tgm <-ad2_tgm <- adup_tgm<-ad2up_tgm <- cvm_tgm<- kp_tgm <- a_twb<-ks_twb <-ad_twb <-ad2_twb <- adup_twb <- ad2up_twb<- cvm_twb<- kp_twb <-a_tll <-ks_tll <- ad_tll<- ad2_tll <- adup_tll<- ad2up_tll<- cvm_tll <- kp_tll <- a_tnorm <- ks_tnorm <- ad_tnorm <- ad2_tnorm <- adup_tnorm <- ad2up_tnorm <-cvm_tnorm <- kp_tnorm <-a_tburr<- ks_tburr<- ad_tburr<- ad2_tburr <- adup_tburr <- ad2up_tburr <- cvm_tburr <- kp_tburr <- a_tt <- ks_tt <- ad_tt <-ad2_tt <-  adup_tt<- ad2up_tt <- cvm_tt <- kp_tt <- list()

for(i in 1:length(H_trunc)){
  set.seed(100)
  b2 <- b1[b1$Loss > H_trunc[i],]
  h1=hist(b2$Loss,main = "Truncated Loss")
breaks_cdf <- plnormTrunc(h1$breaks, meanlog = fit_tln[[i]]$estimate[[1]], sdlog = fit_tln[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tln[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tln[[i]] <- truncgof::ks.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
ad_tln[[i]] <- truncgof::ad.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_tln[[i]] <- truncgof::ad2.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
adup_tln[[i]] <- truncgof::adup.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_tln[[i]] <- truncgof::ad2up.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_tln[[i]] <- truncgof::w2.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
kp_tln[[i]] <- truncgof::v.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- TruncatedDistributions::ptgamma(h1$breaks,shape = fit_tgm[[i]]$estimate[[1]],scale = 1/fit_tgm[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tgm[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tgm[[i]] <- truncgof::ks.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
ad_tgm[[i]] <- truncgof::ad.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_tgm[[i]] <- truncgof::ad2.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
adup_tgm[[i]] <- truncgof::adup.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_tgm[[i]] <- truncgof::ad2up.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_tgm[[i]] <- truncgof::w2.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
kp_tgm[[i]] <- truncgof::v.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- TruncatedDistributions::ptweibull(q = h1$breaks,shape = fit_twb[[i]]$estimate[[1]], scale = fit_twb[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_twb[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_twb[[i]] <- truncgof::ks.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
ad_twb[[i]] <- truncgof::ad.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_twb[[i]] <- truncgof::ad2.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
adup_twb[[i]] <- truncgof::adup.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_twb[[i]] <- truncgof::ad2up.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_twb[[i]] <- truncgof::w2.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
kp_twb[[i]] <- truncgof::v.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- pllogis(q = h1$breaks, shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tll[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tll[[i]] <- truncgof::ks.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
ad_tll[[i]] <- truncgof::ad.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_tll[[i]] <- truncgof::ad2.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
adup_tll[[i]] <- truncgof::adup.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_tll[[i]] <- truncgof::ad2up.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_tll[[i]] <- truncgof::w2.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
kp_tll[[i]] <- truncgof::v.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- TruncatedDistributions::ptnorm(q = h1$breaks,mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tnorm[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tnorm[[i]] <- truncgof::ks.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
ad_tnorm[[i]] <- truncgof::ad.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_tnorm[[i]] <- truncgof::ad2.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
adup_tnorm[[i]] <- truncgof::adup.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_tnorm[[i]] <- truncgof::ad2up.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_tnorm[[i]] <- truncgof::w2.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
kp_tnorm[[i]] <- truncgof::v.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- pburr(q = h1$breaks,shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tburr[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tburr[[i]] <- truncgof::ks.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
ad_tburr[[i]] <- truncgof::ad.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
ad2_tburr[[i]] <- truncgof::ad2.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
adup_tburr[[i]] <- truncgof::adup.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
ad2up_tburr[[i]] <- truncgof::ad2up.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
cvm_tburr[[i]] <- truncgof::w2.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
kp_tburr[[i]] <- truncgof::v.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])

breaks_cdf <- pt.scaled(q = h1$breaks,df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tt[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tt[[i]] <- truncgof::ks.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
ad_tt[[i]] <- truncgof::ad.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
ad2_tt[[i]] <- truncgof::ad2.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
adup_tt[[i]] <- truncgof::adup.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
ad2up_tt[[i]] <- truncgof::ad2up.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
cvm_tt[[i]] <- truncgof::w2.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
kp_tt[[i]] <- truncgof::v.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
}

ChiSq1 <- KS1 <- AD1 <- AD21 <- AD_Up1 <- CVM1 <- KP1 <- Ad2_Up1 <- list()
for(i in 1:length(H_trunc)){
  ChiSq1[[i]]=c(a_tln[[i]]$p.value,a_tgm[[i]]$p.value,a_twb[[i]]$p.value,a_tll[[i]]$p.value,a_tnorm[[i]]$p.value,a_tburr[[i]]$p.value,a_tt[[i]]$p.value)
  KS1[[i]]=c(ks_tln[[i]]$p.value,ks_tgm[[i]]$p.value,ks_twb[[i]]$p.value,ks_tll[[i]]$p.value,ks_tnorm[[i]]$p.value,ks_tburr[[i]]$p.value,ks_tt[[i]]$p.value)
  AD1[[i]]=c(ad_tln[[i]]$p.value,ad_tgm[[i]]$p.value,ad_twb[[i]]$p.value,ad_tll[[i]]$p.value,ad_tnorm[[i]]$p.value,ad_tburr[[i]]$p.value,ad_tt[[i]]$p.value) 
  AD21[[i]]=c(ad2_tln[[i]]$p.value,ad2_tgm[[i]]$p.value,ad2_twb[[i]]$p.value,ad2_tll[[i]]$p.value,ad2_tnorm[[i]]$p.value,ad2_tburr[[i]]$p.value,ad2_tt[[i]]$p.value)
  AD_Up1[[i]]=c(adup_tln[[i]]$p.value,adup_tgm[[i]]$p.value,adup_twb[[i]]$p.value,adup_tll[[i]]$p.value,adup_tnorm[[i]]$p.value,adup_tburr[[i]]$p.value,adup_tt[[i]]$p.value)
  Ad2_Up1[[i]]=c(ad2up_tln[[i]]$p.value,ad2up_tgm[[i]]$p.value,ad2up_twb[[i]]$p.value,ad2up_tll[[i]]$p.value,ad2up_tnorm[[i]]$p.value,ad2up_tburr[[i]]$p.value,ad2up_tt[[i]]$p.value)
  CVM1[[i]]=c(cvm_tln[[i]]$p.value,cvm_tgm[[i]]$p.value,cvm_twb[[i]]$p.value,cvm_tll[[i]]$p.value,cvm_tnorm[[i]]$p.value,cvm_tburr[[i]]$p.value,cvm_tt[[i]]$p.value)
  KP1[[i]]=c(kp_tln[[i]]$p.value,kp_tgm[[i]]$p.value,kp_twb[[i]]$p.value,kp_tll[[i]]$p.value,kp_tnorm[[i]]$p.value,kp_tburr[[i]]$p.value,kp_tt[[i]]$p.value)
}
ChiSq <- KS <- AD <- AD2 <- AD_Up <- AD2Up <-  CVM <- KP <- Distribution <- `Truncation Point`<- Justification <-Assesment <-  c()
dis <- c("Log-normal","Gamma","Weibull","Log-logistic","Normal","Burr","Student's-t")
temp <- c("xxx","xxx1","xxx2","xxxx3","xxx4","xxxx5")
for(i in 1:length(H_trunc)){
   ChiSq <- c(ChiSq,ChiSq1[[i]]) 
   KS <- c(KS,KS1[[i]])
   AD <- c(AD,AD1[[i]])
   AD2 <- c(AD2,AD21[[i]])
   AD_Up <- c(AD_Up,AD_Up1[[i]])
   AD2Up <- c(AD2Up,Ad2_Up1[[i]])
   CVM <- c(CVM,CVM1[[i]])
   KP <- c(KP,KP1[[i]])
   Distribution <- c(Distribution,dis)
   `Truncation Point` <- c(`Truncation Point`,rep(paste0(H_trunc[i],"($",exp(H_trunc[i]),")"),7))
   #Justification <- c(Justification,rep(temp[i],7))
   Assesment <- c(Assesment,rep("Fail",7))
 }
goft_t <- round_df(data.frame(ChiSq,KS,AD,AD2,AD_Up,AD2Up,CVM,KP),2) # goodness of fit table at different truncation point.
goft_t <- cbind(`Truncation Point`,Distribution,goft_t,Assesment)
```



## 4. Model fit by data provider - Algo First, ORX IM and ORX News

**Data Summary**

```{r echo=FALSE,warning=FALSE,message=FALSE}
ops_event_data <-openxlsx::read.xlsx("M 388 Fraud 2019-10-31.xlsx",sheet=1)
ops_event_data <- ops_event_data[,c("Dataset","Final.Date","Inflation_adjusted_Loss(USD)")]
colnames(ops_event_data) <- c("Dataset","Date","Loss")
ops_event_data$Date <- as.Date(ops_event_data$Date,origin="1899-12-30")
algo_first <- ops_event_data[which(ops_event_data$Dataset=="Algo FIRST"),c(2,3)]
orx_im <- ops_event_data[which(ops_event_data$Dataset=="ORX Insurer Member"),c(2,3)]
orx_news <- ops_event_data[which(ops_event_data$Dataset=="ORX News"),c(2,3)]

ev_sour <- data.frame(Count=c(nrow(algo_first),nrow(orx_im),nrow(orx_news)),`NA`=c(nrow(algo_first[which(is.na(algo_first$Loss)),]),nrow(orx_im [which(is.na(orx_im$Loss)),]),nrow(orx_news[which(is.na(orx_news$Loss)),])), "0's" =c(nrow(algo_first[which(algo_first$Loss==0),]),nrow(orx_im[which(orx_im$Loss==0),]),nrow(orx_news[which(orx_news$Loss==0),])))
sev_obser <- c(ev_sour[,1]-(ev_sour[,2]+ev_sour[,3]))
ob_drop <- c(ev_sour[,2]+ev_sour[,3])
ev_sour <- cbind(ev_sour,ob_drop,sev_obser)
tot <- c(sum(ev_sour[,1]),sum(ev_sour[,2]),sum(ev_sour[,3]),sum(ev_sour[,4]),sum(ev_sour[,5]))
ev_sour <- rbind(ev_sour,tot)
colnames(ev_sour) <- c("Frequency Observations","NA","0's","Dropped Data Points","Severity Observations")

af <- ggplot(data = algo_first, aes(x=Loss(USD))) +
  geom_histogram(data = as.data.frame(algo_first$Loss),aes(x=algo_first$Loss),color="black",fill="blue")+scale_x_continuous(labels=f1)
oim <- ggplot(data = orx_im, aes(x=Loss(USD))) +
  geom_histogram(data = as.data.frame(orx_im$Loss),aes(x=orx_im$Loss),color="black",fill="blue")+scale_x_continuous(labels=f1)
on <- ggplot(data = orx_news, aes(x=Loss(USD))) +
  geom_histogram(data = as.data.frame(orx_news$Loss),aes(x=orx_news$Loss),color="black",fill="blue")+scale_x_continuous(labels=f1)
  
af_log <- ggplot(data = algo_first, aes(x=log(Loss(USD)))) +
  geom_histogram(data = as.data.frame(algo_first$Loss),aes(x=log(algo_first$Loss)),color="black",fill="orange")
oim_log <- ggplot(data = orx_im, aes(x=log(Loss(USD)))) +
  geom_histogram(data = as.data.frame(orx_im$Loss),aes(x=log(orx_im$Loss)),color="black",fill="orange")
on_log <- ggplot(data = orx_news, aes(x=log(Loss(USD)))) +
  geom_histogram(data = as.data.frame(orx_news$Loss),aes(x=log(orx_news$Loss)),color="black",fill="orange")
```

`r table_nums('tab_36')`
```{r,echo=FALSE,fig.cap=tab.36,ft.align='left'}
ev_sour <- cbind(`Data Provider`=c("Algo First","ORX Insurer Member","ORX News","Total"),ev_sour)
tab36 <- flextable(ev_sour,theme_fun = theme_booktabs)
tab36 <- bg(tab36, bg = "#66B3FF", part = "header")
tab36 <- hline(tab36,i = 3, part = "body",border = fp_border(color = "black", width = 2))
tab36 <- autofit(tab36)
tab36
```

\newline

```{r echo=FALSE,warning=FALSE,message=FALSE}
fig17 <- ggarrange(af,af_log,ncol = 2,nrow = 1)
annotate_figure(fig17,top = text_grob("Histogram of Algo First", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r echo=FALSE,warning=FALSE,message=FALSE}
fig18 <- ggarrange(oim,oim_log,ncol = 2,nrow = 1)
annotate_figure(fig18,top = text_grob("Histogram of ORX Insurer Member", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r echo=FALSE,warning=FALSE,message=FALSE}
fig19 <- ggarrange(on,on_log,ncol = 2,nrow = 1)
annotate_figure(fig19,top = text_grob("Histogram of ORX News", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```


<!-- ################ Model Fitting by data provider(after 2003Q1) without any transformation ################################################-->

### 4.1 Distribution fit without any transformation

```{r,echo=FALSE,message=FALSE,warning=FALSE}
datana <- ops_event_data
comb <- ggplot(datana,aes(x=datana$Loss,fill=Dataset)) + 
  geom_histogram(position = "identity") +
  facet_grid(Dataset~.,scales="free_y")+ scale_x_continuous(labels=f1) +
  xlab("Loss(USD)")
```


```{r,echo=FALSE,message=FALSE,warning=FALSE}
fig20 <- ggarrange(comb,ncol = 1,nrow = 1)
annotate_figure(fig20,top = text_grob("The histogram of Loss(USD) by data provider", color = "black", face = "bold", size = 10),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```


<!-- ################ Model Fitting on Algo First Data (after 2003Q1) without any transformation ################################################-->




#### 4.1.1 Algo First

##### Summary

```{r,echo=FALSE,warning=FALSE}
Loss <- algo_first
Loss$Date <- as.Date(Loss$Date,origin="1899-12-30")
colnames(Loss) <- c("Date","Loss")
b1 <- Loss  # if the below two condition was not true then b1 will not be created.
k1 <- length(which(is.na(Loss$Loss)))
if(k1 > 0){
  b1 <- Loss[-which(is.na(Loss$Loss)),]
}
k2 <- length(which(b1$Loss==0))
if(k2>0)
{
  b1=b1[-which(b1$Loss==0),]
}
over_all_summ <- eda(b1,k1,k2)
```

`r table_nums('tab_37')`
```{r,echo=FALSE,fig.cap=tab.37,ft.align='left'}
tab37 <- flextable(over_all_summ[,2:7])
tab37 <- bg(tab37, bg = "#66B3FF", part = "header")
colkeys = c("Freqency Observations","NA","0's","Severity Observations")
tab37 <- colformat_num(x = tab37, col_keys = colkeys,big.mark=",", digits = 0, na_str = "N/A")
tab37 <- flextable::align(tab37,align="center", part = "all" )
tab37 <- fontsize(x=tab37,size = 9)
tab37 <- autofit(tab37)
tab37
```

NA's and zeros are omitted from the analysis

\newline

`r table_nums('tab_38')`
```{r,echo=FALSE,fig.cap=tab.38,ft.align='left'}
tab38 <- flextable(over_all_summ[,8:14])
tab38 <- bg(tab38, bg = "#66B3FF", part = "header")
colkeys = c("Min","Max","Mean","Median","Std. dev","Skewness","Kurtosis")
tab38 <- colformat_num(x = tab38, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab38 <- fontsize(x=tab38,size = 9)
tab38 <- autofit(tab38)
tab38
```

\newline

`r table_nums('tab_39')`
```{r,echo=FALSE,fig.cap=tab.39,ft.align='left'}
tab39 <- flextable(over_all_summ[,15:21],theme_fun = theme_booktabs)
tab39 <- bg(tab39, bg = "#66B3FF", part = "header")
colkeys = c("25th pct","50th pct","75th pct","95th pct","97.5th pct","99th pct","99.9th pct")
tab39 <- colformat_num(x = tab39, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab39 <- fontsize(x=tab39,size = 9)
tab39 <- autofit(tab39)
tab39
```

\newline

```{r,echo=FALSE,message=FALSE,warning=FALSE}
alg <- ggplot(data = b1, aes(x=Loss(USD))) +
  geom_histogram(data = as.data.frame(b1$Loss),aes(x=b1$Loss),color="black",fill="blue")+scale_x_continuous(labels=f1)

fig21 <- ggarrange(alg ,ncol= 1,nrow = 1)
annotate_figure(fig21,top = text_grob("Histogram of Algo First", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")

```

```{r, echo=FALSE,warning=FALSE,include=FALSE}
fit_ln <- fitdist(b1$Loss, "lnorm",method = "mle")
fit_gm <- fitdist(b1$Loss,"gamma",method = "mme")
fit_wb <- fitdist(b1$Loss,"weibull",method = "mle")
fit_ll <- fitdist(b1$Loss,"llogis",method="mle")
```

##### Estimated Parameter

```{r,echo=FALSE}
par <- data.frame(
Distribution=c("Log-normal","Log-normal","Gamma","Gamma","Weibull","Weibull","Log-logistic","Log-logistic"),Parameter=c("meanlog","sdlog","shape","rate","shape","scale","shape","scale"),
Estimates=c(fit_ln$estimate[[1]],fit_ln$estimate[[2]],fit_gm$estimate[[1]],rate=fit_gm$estimate[[2]],fit_wb$estimate[[1]],fit_wb$estimate[[2]],fit_ll$estimate[[1]],fit_ll$estimate[[2]]),
Loglik=c(fit_ln$loglik,fit_ln$loglik,fit_gm$loglik,fit_gm$loglik,fit_wb$loglik,fit_wb$loglik,fit_ll$loglik,fit_ll$loglik),
AIC=c(fit_ln$aic,fit_ln$aic,fit_gm$aic,fit_gm$aic,fit_wb$aic,fit_wb$aic,fit_ll$aic,fit_ll$aic),
BIC=c(fit_ln$bic,fit_ln$bic,fit_gm$bic,fit_gm$bic,fit_wb$bic,fit_wb$bic,fit_ll$bic,fit_ll$bic))

```

\newline
`r table_nums('tab_40')`
```{r,echo=FALSE,fig.cap=tab.40,ft.align='left'}
tab40 <- flextable(par)
tab40 <- theme_box(tab40)
tab40 <- merge_v(tab40,j=~Distribution+Loglik+AIC+BIC)
#tab40 <- theme_box(tab40)
tab40 <- bg(tab40, bg = "#66B3FF", part = "header")
tab40 <- autofit(tab40)
tab40
```

```{r,echo=FALSE,warning=FALSE}
plot.legend <- c("Log-normal","Gamma","Weibull","Log-logistic")
den <-denscomp(list(fit_ln,fit_gm,fit_wb,fit_ll), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+scale_x_continuous(labels=f1)+labs(x = "Loss(USD)", y = "Density") 
qq <-qqcomp(list(fit_ln,fit_gm,fit_wb,fit_ll), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+scale_x_continuous(labels=f1)+scale_y_continuous(labels=f1)
cdf <-cdfcomp(list(fit_ln,fit_gm,fit_wb,fit_ll), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+labs(caption = "*Black dots are Emperical CDF", x = "Loss(USD)", y = "CDF")+scale_x_continuous(labels=f1)
pp <-ppcomp(list(fit_ln,fit_gm,fit_wb,fit_ll), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))

qq1 <-qqcomp(list(fit_ln,fit_gm,fit_wb), legendtext =c("Log-normal","Gamma","Weibull") ,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+scale_x_continuous(labels=f1)+scale_y_continuous(labels=f1)

fig22 <- ggarrange(den,ncol = 1,nrow = 1)
annotate_figure(fig22,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

```{r,echo=FALSE,warning=FALSE}
fig23 <- ggarrange(qq,ncol = 1,nrow = 1)
annotate_figure(fig23,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
fig23a <- ggarrange(qq1,ncol = 1,nrow = 1)
annotate_figure(fig23a,top = text_grob("QQ Plot without Log-Logistic", color = "black", face = "bold", size = 14),fig.lab = "Fig.23a", fig.lab.face = "bold")
```

```{r,echo=FALSE,warning=FALSE}
fig24 <- ggarrange(pp,ncol = 1,nrow = 1)
annotate_figure(fig24,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```


\newline

```{r,echo=FALSE}
fig25 <- ggarrange(cdf,ncol = 1,nrow = 1)
annotate_figure(fig25,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

```{r,echo=FALSE,warning=FALSE,include=FALSE}
h1=hist(b1$Loss,main = "Loss(USD)")

breaks_cdf <- plnorm(h1$breaks, meanlog= fit_ln$estimate['meanlog'],sdlog=fit_ln$estimate['sdlog'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_ln <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_ln <- ks.test(b1$Loss,"plnorm",fit_ln$estimate['meanlog'],fit_ln$estimate['sdlog'])
ad_ln <- goftest::ad.test(b1$Loss,"plnorm",fit_ln$estimate['meanlog'],fit_ln$estimate['sdlog'])
cvm_ln <- goftest::cvm.test(b1$Loss,null="plnorm",fit_ln$estimate[1],fit_ln$estimate[2])

breaks_cdf <- pgamma(h1$breaks,shape = fit_gm$estimate['shape'],rate = fit_gm$estimate['rate'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_gm <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_gm <- ks.test(b1$Loss,"pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])
ad_gm <- goftest::ad.test(b1$Loss,"pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])
cvm_gm <- goftest::cvm.test(x=b1$Loss,null="pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])

breaks_cdf <- pweibull(q = h1$breaks,shape = fit_wb$estimate[[1]], scale = fit_wb$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_wb <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)

ks_wb <- ks.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])
ad_wb <- goftest::ad.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])
cvm_wb <- goftest::cvm.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])


breaks_cdf <- pllogis(q = h1$breaks, shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_ll <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_ll <- ks.test(x = b1$Loss, "pllogis", shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
ad_ll <- goftest::ad.test(x = b1$Loss, "pllogis", shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
cvm_ll <- goftest::cvm.test(b1$Loss,"pllogis",shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
```

```{r,echo=FALSE}
goft <- round_df(data.frame(ChiSq=c(a_ln$p.value,a_gm$p.value,a_wb$p.value,a_ll$p.value),KS=c(ks_ln$p.value,ks_gm$p.value,ks_wb$p.value,ks_ll$p.value),AD=c(ad_ln$p.value,ad_gm$p.value,ad_wb$p.value,ad_ll$p.value),CVM=c(cvm_ln$p.value,cvm_gm$p.value,cvm_wb$p.value,cvm_ll$p.value)),2)
```

\newline

```{r,echo=FALSE}
gofc <- round_df(data.frame(Loglik =c(fit_ln$loglik,fit_gm$loglik,fit_wb$loglik,fit_ll$loglik),AIC=c(fit_ln$aic,fit_gm$aic,fit_wb$aic,fit_ll$aic),BIC=c(fit_ln$bic,fit_gm$bic,fit_wb$bic,fit_ll$bic)),2)
```

`r table_nums('tab_44')`
```{r,echo=FALSE,fig.cap=tab.44,ft.align='left'}
goft <- cbind(Distribution=c("Log-normal","Gamma","Weibull","Log-logistic"),goft)
tab44 <- flextable(goft,theme_fun = theme_booktabs)
tab44 <- bg(tab44, bg = "#66B3FF", part = "header")
tab44 <- color(tab44, ~ ChiSq >= 0.05 , ~ChiSq,color = "green")
tab44 <- color(tab44, ~ KS >= 0.05 , ~KS,color = "green")
tab44 <- color(tab44, ~ AD >= 0.05 , ~AD,color = "green")
tab44 <- color(tab44, ~ CVM >= 0.05 , ~CVM,color = "green")
tab44 <- color(tab44, ~ (ChiSq >= 0.01 & ChiSq < 0.05) , ~ChiSq,color = "orange")
tab44 <- color(tab44, ~ (KS >= 0.01 & KS < 0.05) , ~KS,color = "orange")
tab44 <- color(tab44, ~ (AD >= 0.01 & AD < 0.05) , ~AD,color = "orange")
tab44 <- color(tab44, ~ (CVM >= 0.01 & CVM < 0.05) , ~CVM,color = "orange")
tab44 <- color(tab44, ~ (ChiSq < 0.01 ) , ~ChiSq,color = "red")
tab44 <- color(tab44, ~ (KS < 0.01) , ~KS,color = "red")
tab44 <- color(tab44, ~ (AD < 0.01) , ~AD,color = "red")
tab44 <- color(tab44, ~ (CVM < 0.01) , ~CVM,color = "red")
colkeys = c("ChiSq","KS","AD","CVM")
tab44 <- colformat_num(x = tab44, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab44 <- add_footer_lines(tab44,values = c("p-value greater than or equal to 0.05 is highlighted in green","p-value less than 0.05 and greater than or equal to 0.01 is highlighted in amber","p-value less than 0.01 is highlighted in red"),top=FALSE)
tab44 <- fontsize(x=tab44,size = 6,part = "footer")
tab44 <- autofit(tab44)
tab44
```

\newline

`r table_nums('tab_45')`
```{r,echo=FALSE,fig.cap=tab.45,ft.align='left'}
gofc <- cbind(Distribution=c("Log-normal","Gamma","Weibull","Log-logistic"),gofc)
tab45 <- flextable(gofc,theme_fun = theme_booktabs)
tab45 <- bg(tab45, bg = "#66B3FF", part = "header")
colkeys = c("Loglik","AIC","BIC")
tab45 <- colformat_num(x = tab45, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab45 <- autofit(tab45)
tab45
```



**Conclusion**


<!-- ################ Model Fitting on ORX IM Data (after 2003Q1) without any transformation ################################################-->

#### 4.1.2 ORX IM

##### Summary

```{r,echo=FALSE,warning=FALSE}
Loss <- orx_im
Loss$Date <- as.Date(Loss$Date,origin="1899-12-30")
colnames(Loss) <- c("Date","Loss")
k1 <- length(which(is.na(Loss$Loss)))
b1 <- Loss
if(k1 > 0){
  b1 <- b1[-which(is.na(b1$Loss)),]
}
k2 <- length(which(Loss$Loss==0))
if(k2>0)
{
  b1=b1[-which(b1$Loss==0),]
}
over_all_summ <- eda(b1,k1,k2)
```

`r table_nums('tab_46')`
```{r,echo=FALSE,fig.cap=tab.46,ft.align='left'}
tab46 <- flextable(over_all_summ[,2:7])
tab46 <- bg(tab46, bg = "#66B3FF", part = "header")
colkeys = c("Freqency Observations","NA","0's","Severity Observations")
tab46 <- colformat_num(x = tab46, col_keys = colkeys,big.mark=",", digits = 0, na_str = "N/A")
tab46 <- flextable::align(tab46,align="center", part = "all" )
tab46 <- fontsize(x=tab46,size = 9)
tab46 <- autofit(tab46)
tab46
```

NA's and zeros are omitted from the analysis

\newline

`r table_nums('tab_47')`
```{r,echo=FALSE,fig.cap=tab.47,ft.align='left'}
tab47 <- flextable(over_all_summ[,8:14])
tab47 <- bg(tab47, bg = "#66B3FF", part = "header")
colkeys = c("Min","Max","Mean","Median","Std. dev","Skewness","Kurtosis")
tab47 <- colformat_num(x = tab47, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab47 <- fontsize(x=tab47,size = 9)
tab47 <- autofit(tab47)
tab47
```

\newline

`r table_nums('tab_48')`
```{r,echo=FALSE,fig.cap=tab.48,ft.align='left'}
tab48 <- flextable(over_all_summ[,15:21],theme_fun = theme_booktabs)
tab48 <- bg(tab48, bg = "#66B3FF", part = "header")
colkeys = c("25th pct","50th pct","75th pct","95th pct","97.5th pct","99th pct","99.9th pct")
tab48 <- colformat_num(x = tab48, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab48 <- fontsize(x=tab48,size = 9)
tab48 <- autofit(tab48)
tab48
```

\newline

```{r,echo=FALSE,message=FALSE}
oim <- ggplot(data = b1, aes(x=Loss(USD))) +
  geom_histogram(data = as.data.frame(b1$Loss),aes(x=b1$Loss),color="black",fill="blue")+scale_x_continuous(labels=f1)
fig26 <- ggarrange(oim ,ncol= 1,nrow = 1)
annotate_figure(fig26,top = text_grob("Histogram of ORX Insurer Member", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")

```

```{r, echo=FALSE,warning=FALSE,include=FALSE}
fit_ln <- fitdist(b1$Loss, "lnorm",method = "mle")
fit_gm <- fitdist(b1$Loss,"gamma",method = "mme")
fit_wb <- fitdist(b1$Loss,"weibull",method = "mle")
fit_ll <- fitdist(b1$Loss,"llogis",method="mle")
```


##### Estimated Parameter

```{r,echo=FALSE}
par <- data.frame(
Distribution=c("Log-normal","Log-normal","Gamma","Gamma","Weibull","Weibull","Log-logistic","Log-logistic"),Parameter=c("meanlog","sdlog","shape","rate","shape","scale","shape","scale"),
Estimates=c(fit_ln$estimate[[1]],fit_ln$estimate[[2]],fit_gm$estimate[[1]],rate=fit_gm$estimate[[2]],fit_wb$estimate[[1]],fit_wb$estimate[[2]],fit_ll$estimate[[1]],fit_ll$estimate[[2]]),
Loglik=c(fit_ln$loglik,fit_ln$loglik,fit_gm$loglik,fit_gm$loglik,fit_wb$loglik,fit_wb$loglik,fit_ll$loglik,fit_ll$loglik),
AIC=c(fit_ln$aic,fit_ln$aic,fit_gm$aic,fit_gm$aic,fit_wb$aic,fit_wb$aic,fit_ll$aic,fit_ll$aic),
BIC=c(fit_ln$bic,fit_ln$bic,fit_gm$bic,fit_gm$bic,fit_wb$bic,fit_wb$bic,fit_ll$bic,fit_ll$bic))

```


\newline
`r table_nums('tab_49')`
```{r,echo=FALSE,fig.cap=tab.49,ft.align='left'}
tab49 <- flextable(par)
tab49 <- theme_box(tab49)
tab49 <- merge_v(tab49,j=~Distribution+Loglik+AIC+BIC)
#tab49 <- theme_box(tab49)
tab49 <- bg(tab49, bg = "#66B3FF", part = "header")
tab49 <- autofit(tab49)
tab49
```

```{r,echo=FALSE,warning=FALSE}
plot.legend <- c("Log-normal","Gamma","Weibull","Log-logistic")

den <-denscomp(list(fit_ln,fit_gm,fit_wb,fit_ll), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+labs(x = "Loss(USD)", y = "Density")+scale_x_continuous(labels=f1)
 
qq <-qqcomp(list(fit_ln,fit_gm,fit_wb,fit_ll), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+scale_x_continuous(labels=f1)+scale_y_continuous(labels=f1)

cdf <-cdfcomp(list(fit_ln,fit_gm,fit_wb,fit_ll), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+scale_x_continuous(labels=f1)+labs(caption = "*Black dots are Emperical CDF", x = "Loss(USD)", y = "CDF")

pp <-ppcomp(list(fit_ln,fit_gm,fit_wb,fit_ll), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))

qq1 <-qqcomp(list(fit_ln,fit_gm,fit_wb), legendtext = c("Log-normal","Gamma","Weibull"),plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+scale_x_continuous(labels=f1)+scale_y_continuous(labels=f1)

fig27 <- ggarrange(den,ncol = 1,nrow = 1)
annotate_figure(fig27,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE,warning=FALSE}
fig28 <- ggarrange(qq,ncol = 1,nrow = 1)
annotate_figure(fig28,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

```{r,echo=FALSE,warning=FALSE}
fig28a <- ggarrange(qq1,ncol = 1,nrow = 1)
annotate_figure(fig28a,top = text_grob("QQ Plot Without Log-logistic", color = "black", face = "bold", size = 10),fig.lab = "Fig.28a", fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE,warning=FALSE}
fig29 <- ggarrange(pp,ncol = 1,nrow = 1)
annotate_figure(fig29,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE}
fig30 <- ggarrange(cdf,ncol = 1,nrow = 1)
annotate_figure(fig30,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```


```{r,echo=FALSE,warning=FALSE,include=FALSE}
h1=hist(b1$Loss,main = "Loss(USD)")

breaks_cdf <- plnorm(h1$breaks, meanlog= fit_ln$estimate['meanlog'],sdlog=fit_ln$estimate['sdlog'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_ln <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_ln <- ks.test(b1$Loss,"plnorm",fit_ln$estimate['meanlog'],fit_ln$estimate['sdlog'])
ad_ln <- goftest::ad.test(b1$Loss,"plnorm",fit_ln$estimate['meanlog'],fit_ln$estimate['sdlog'])
cvm_ln <- goftest::cvm.test(b1$Loss,null="plnorm",fit_ln$estimate[1],fit_ln$estimate[2])

breaks_cdf <- pgamma(h1$breaks,shape = fit_gm$estimate['shape'],rate = fit_gm$estimate['rate'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_gm <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_gm <- ks.test(b1$Loss,"pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])
ad_gm <- goftest::ad.test(b1$Loss,"pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])
cvm_gm <- goftest::cvm.test(x=b1$Loss,null="pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])

breaks_cdf <- pweibull(q = h1$breaks,shape = fit_wb$estimate[[1]], scale = fit_wb$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_wb <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)

ks_wb <- ks.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])
ad_wb <- goftest::ad.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])
cvm_wb <- goftest::cvm.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])

breaks_cdf <- pllogis(q = h1$breaks, shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_ll <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_ll <- ks.test(x = b1$Loss, "pllogis", shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
ad_ll <- goftest::ad.test(x = b1$Loss, "pllogis", shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
cvm_ll <- goftest::cvm.test(b1$Loss,"pllogis",shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
```

```{r,echo=FALSE}
goft <- round_df(data.frame(ChiSq=c(a_ln$p.value,a_gm$p.value,a_wb$p.value,a_ll$p.value),KS=c(ks_ln$p.value,ks_gm$p.value,ks_wb$p.value,ks_ll$p.value),AD=c(ad_ln$p.value,ad_gm$p.value,ad_wb$p.value,ad_ll$p.value),CVM=c(cvm_ln$p.value,cvm_gm$p.value,cvm_wb$p.value,cvm_ll$p.value)),2)
```
\newline

```{r,echo=FALSE}
gofc <- round_df(data.frame(Loglik =c(fit_ln$loglik,fit_gm$loglik,fit_wb$loglik,fit_ll$loglik),AIC=c(fit_ln$aic,fit_gm$aic,fit_wb$aic,fit_ll$aic),BIC=c(fit_ln$bic,fit_gm$bic,fit_wb$bic,fit_ll$bic)),2)

```

`r table_nums('tab_53')`
```{r,echo=FALSE,fig.cap=tab.53,ft.align='left'}
goft <- cbind(Distribution=c("Log-normal","Gamma","Weibull","Log-logistic"),goft)
tab53 <- flextable(goft,theme_fun = theme_booktabs)
tab53 <- bg(tab53, bg = "#66B3FF", part = "header")
tab53 <- color(tab53, ~ ChiSq >= 0.05 , ~ChiSq,color = "green")
tab53 <- color(tab53, ~ KS >= 0.05 , ~KS,color = "green")
tab53 <- color(tab53, ~ AD >= 0.05 , ~AD,color = "green")
tab53 <- color(tab53, ~ CVM >= 0.05 , ~CVM,color = "green")
tab53 <- color(tab53, ~ (ChiSq >= 0.01 & ChiSq < 0.05) , ~ChiSq,color = "orange")
tab53 <- color(tab53, ~ (KS >= 0.01 & KS < 0.05) , ~KS,color = "orange")
tab53 <- color(tab53, ~ (AD >= 0.01 & AD < 0.05) , ~AD,color = "orange")
tab53 <- color(tab53, ~ (CVM >= 0.01 & CVM < 0.05) , ~CVM,color = "orange")
tab53 <- color(tab53, ~ (ChiSq < 0.01 ) , ~ChiSq,color = "red")
tab53 <- color(tab53, ~ (KS < 0.01) , ~KS,color = "red")
tab53 <- color(tab53, ~ (AD < 0.01) , ~AD,color = "red")
tab53 <- color(tab53, ~ (CVM < 0.01) , ~CVM,color = "red")
colkeys = c("ChiSq","KS","AD","CVM")
tab53 <- colformat_num(x = tab53, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab53 <- add_footer_lines(tab53,values = c("p-value greater than or equal to 0.05 is highlighted in green","p-value less than 0.05 and greater than or equal to 0.01 is highlighted in amber","p-value less than 0.01 is highlighted in red"),top=FALSE)
tab53 <- fontsize(x=tab53,size = 6,part = "footer")
tab53 <- autofit(tab53)
tab53
```

\newline

`r table_nums('tab_54')`
```{r,echo=FALSE,fig.cap=tab.54,ft.align='left'}
gofc <- cbind(Distribution=c("Log-normal","Gamma","Weibull","Log-logistic"),gofc)
tab54 <- flextable(gofc,theme_fun = theme_booktabs)
tab54 <- bg(tab54, bg = "#66B3FF", part = "header")
colkeys = c("Loglik","AIC","BIC")
tab54 <- colformat_num(x = tab54, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab54 <- autofit(tab54)
tab54
```

**Conclusion**


<!-- ################ Model Fitting on ORX News Data (after 2003Q1) without any transformation ################################################-->

#### 4.1.3 ORX NEWS

##### Summary

```{r,echo=FALSE,warning=FALSE}
Loss <- orx_news
Loss$Date <- as.Date(Loss$Date,origin="1899-12-30")
colnames(Loss) <- c("Date","Loss")
#Loss$Loss <- log(Loss$Loss)
k1 <- length(which(is.na(Loss$Loss)))
b1 <- Loss
if(k1 > 0){
  b1 <- b1[-which(is.na(b1$Loss)),]
}
k2 <- length(which(Loss$Loss==0))
if(k2>0)
{
  b1=b1[-which(b1$Loss==0),]
}
over_all_summ <- eda(b1,k1,k2)
```

`r table_nums('tab_55')`
```{r,echo=FALSE,fig.cap=tab.55,ft.align='left'}
tab55 <- flextable(over_all_summ[,2:7])
tab55 <- bg(tab55, bg = "#66B3FF", part = "header")
colkeys = c("Freqency Observations","NA","0's","Severity Observations")
tab55 <- colformat_num(x = tab55, col_keys = colkeys,big.mark=",", digits = 0, na_str = "N/A")
tab55 <- flextable::align(tab55,align="center", part = "all" )
tab55 <- fontsize(x=tab55,size = 9)
tab55 <- autofit(tab55)
tab55
```

NA's and zeros are omitted from the analysis

\newline

`r table_nums('tab_56')`
```{r,echo=FALSE,fig.cap=tab.56,ft.align='left'}
tab56 <- flextable(over_all_summ[,8:14])
tab56 <- bg(tab56, bg = "#66B3FF", part = "header")
colkeys = c("Min","Max","Mean","Median","Std. dev","Skewness","Kurtosis")
tab56 <- colformat_num(x = tab56, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab56 <- fontsize(x=tab56,size = 9)
tab56 <- autofit(tab56)
tab56
```

\newline

`r table_nums('tab_57')`
```{r,echo=FALSE,fig.cap=tab.57,ft.align='left'}
tab57 <- flextable(over_all_summ[,15:21],theme_fun = theme_booktabs)
tab57 <- bg(tab57, bg = "#66B3FF", part = "header")
colkeys = c("25th pct","50th pct","75th pct","95th pct","97.5th pct","99th pct","99.9th pct")
tab57 <- colformat_num(x = tab57, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab57 <- fontsize(x=tab57,size = 9)
tab57 <- autofit(tab57)
tab57
```

```{r,echo=FALSE,message=FALSE}
orxn <- ggplot(data = b1, aes(x=Loss(USD))) +
  geom_histogram(data = as.data.frame(b1$Loss),aes(x=b1$Loss),color="black",fill="blue")+scale_x_continuous(labels=f1) 

fig31 <- ggarrange(orxn ,ncol= 1,nrow = 1)
annotate_figure(fig31,top = text_grob("Histogram of ORX News", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")

```

```{r, echo=FALSE,warning=FALSE,include=FALSE}
fit_ln <- fitdist(b1$Loss, "lnorm",method = "mle")
fit_gm <- fitdist(b1$Loss,"gamma",method = "mme")
fit_wb <- fitdist(b1$Loss,"weibull",method = "mle")
fit_ll <- fitdist(b1$Loss,"llogis",method="mle")
```

##### Estimated Parameter

```{r,echo=FALSE}
par <- data.frame(
Distribution=c("Log-normal","Log-normal","Gamma","Gamma","Weibull","Weibull","Log-logistic","Log-logistic"),Parameter=c("meanlog","sdlog","shape","rate","shape","scale","shape","scale"),
Estimates=c(fit_ln$estimate[[1]],fit_ln$estimate[[2]],fit_gm$estimate[[1]],rate=fit_gm$estimate[[2]],fit_wb$estimate[[1]],fit_wb$estimate[[2]],fit_ll$estimate[[1]],fit_ll$estimate[[2]]),
Loglik=c(fit_ln$loglik,fit_ln$loglik,fit_gm$loglik,fit_gm$loglik,fit_wb$loglik,fit_wb$loglik,fit_ll$loglik,fit_ll$loglik),
AIC=c(fit_ln$aic,fit_ln$aic,fit_gm$aic,fit_gm$aic,fit_wb$aic,fit_wb$aic,fit_ll$aic,fit_ll$aic),
BIC=c(fit_ln$bic,fit_ln$bic,fit_gm$bic,fit_gm$bic,fit_wb$bic,fit_wb$bic,fit_ll$bic,fit_ll$bic))

```

\newline
`r table_nums('tab_58')`
```{r,echo=FALSE,fig.cap=tab.58,ft.align='left'}
tab58 <- flextable(par)
tab58 <- theme_box(tab58)
tab58 <- merge_v(tab58,j=~Distribution+Loglik+AIC+BIC)
#tab58 <- theme_box(tab58)
tab58 <- bg(tab58, bg = "#66B3FF", part = "header")
tab58 <- autofit(tab58)
tab58
```

```{r,echo=FALSE,warning=FALSE}
plot.legend <- c("Log-normal","Gamma","Weibull","Log-logistic")

den <-denscomp(list(fit_ln,fit_gm,fit_wb,fit_ll), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+labs(x = "Loss(USD)", y = "Density")+scale_x_continuous(labels=f1)
 
qq <-qqcomp(list(fit_ln,fit_gm,fit_wb,fit_ll), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+scale_x_continuous(labels=f1)+scale_y_continuous(labels=f1) 

cdf <-cdfcomp(list(fit_ln,fit_gm,fit_wb,fit_ll), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+scale_x_continuous(labels=f1)+labs(caption = "*Black dots are Emperical CDF", x = "Loss(USD)", y = "CDF") 
pp <-ppcomp(list(fit_ln,fit_gm,fit_wb,fit_ll), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))

qq1 <-qqcomp(list(fit_ln,fit_gm,fit_wb), legendtext = c("Log-normal","Gamma","Weibull"),plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+scale_x_continuous(labels=f1)+scale_y_continuous(labels=f1)

fig32 <- ggarrange(den,ncol = 1,nrow = 1)
annotate_figure(fig32,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE,warning=FALSE}
fig33 <- ggarrange(qq,ncol = 1,nrow = 1)
annotate_figure(fig33,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

```{r,echo=FALSE,warning=FALSE}
fig33a <- ggarrange(qq1,ncol = 1,nrow = 1)
annotate_figure(fig33a,top = text_grob("QQ Plot Without Log-logistic", color = "black", face = "bold", size = 10),fig.lab = "Fig.33a", fig.lab.face = "bold")
```


\newline

```{r,echo=FALSE,warning=FALSE}
fig35 <- ggarrange(pp,ncol = 1,nrow = 1)
annotate_figure(fig35,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE}
fig36 <- ggarrange(cdf,ncol = 1,nrow = 1)
annotate_figure(fig36,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```


```{r,echo=FALSE,warning=FALSE,include=FALSE}
h1=hist(b1$Loss,main = "Loss(USD)")
breaks_cdf <- plnorm(h1$breaks, meanlog= fit_ln$estimate['meanlog'],sdlog=fit_ln$estimate['sdlog'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_ln <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_ln <- ks.test(b1$Loss,"plnorm",fit_ln$estimate['meanlog'],fit_ln$estimate['sdlog'])
ad_ln <- goftest::ad.test(b1$Loss,"plnorm",fit_ln$estimate['meanlog'],fit_ln$estimate['sdlog'])
cvm_ln <- goftest::cvm.test(b1$Loss,null="plnorm",fit_ln$estimate[1],fit_ln$estimate[2])

breaks_cdf <- pgamma(h1$breaks,shape = fit_gm$estimate['shape'],rate = fit_gm$estimate['rate'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_gm <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_gm <- ks.test(b1$Loss,"pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])
ad_gm <- goftest::ad.test(b1$Loss,"pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])
cvm_gm <- goftest::cvm.test(x=b1$Loss,null="pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])

breaks_cdf <- pweibull(q = h1$breaks,shape = fit_wb$estimate[[1]], scale = fit_wb$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_wb <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)

ks_wb <- ks.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])
ad_wb <- goftest::ad.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])
cvm_wb <- goftest::cvm.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])

breaks_cdf <- pllogis(q = h1$breaks, shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_ll <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_ll <- ks.test(x = b1$Loss, "pllogis", shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
ad_ll <- goftest::ad.test(x = b1$Loss, "pllogis", shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
cvm_ll <- goftest::cvm.test(b1$Loss,"pllogis",shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
```

```{r,echo=FALSE}
goft <- round_df(data.frame(ChiSq=c(a_ln$p.value,a_gm$p.value,a_wb$p.value,a_ll$p.value),KS=c(ks_ln$p.value,ks_gm$p.value,ks_wb$p.value,ks_ll$p.value),AD=c(ad_ln$p.value,ad_gm$p.value,ad_wb$p.value,ad_ll$p.value),CVM=c(cvm_ln$p.value,cvm_gm$p.value,cvm_wb$p.value,cvm_ll$p.value)),2)
```

\newline

```{r,echo=FALSE}
gofc <- round_df(data.frame(Loglik =c(fit_ln$loglik,fit_gm$loglik,fit_wb$loglik,fit_ll$loglik),AIC=c(fit_ln$aic,fit_gm$aic,fit_wb$aic,fit_ll$aic),BIC=c(fit_ln$bic,fit_gm$bic,fit_wb$bic,fit_ll$bic)),2)

```

`r table_nums('tab_62')`
```{r,echo=FALSE,fig.cap=tab.62,ft.align='left'}
goft <- cbind(Distribution=c("Log-normal","Gamma","Weibull","Log-logistic"),goft)
tab62 <- flextable(goft,theme_fun = theme_booktabs)
tab62 <- bg(tab62, bg = "#66B3FF", part = "header")
tab62 <- color(tab62, ~ ChiSq >= 0.05 , ~ChiSq,color = "green")
tab62 <- color(tab62, ~ KS >= 0.05 , ~KS,color = "green")
tab62 <- color(tab62, ~ AD >= 0.05 , ~AD,color = "green")
tab62 <- color(tab62, ~ CVM >= 0.05 , ~CVM,color = "green")
tab62 <- color(tab62, ~ (ChiSq >= 0.01 & ChiSq < 0.05) , ~ChiSq,color = "orange")
tab62 <- color(tab62, ~ (KS >= 0.01 & KS < 0.05) , ~KS,color = "orange")
tab62 <- color(tab62, ~ (AD >= 0.01 & AD < 0.05) , ~AD,color = "orange")
tab62 <- color(tab62, ~ (CVM >= 0.01 & CVM < 0.05) , ~CVM,color = "orange")
tab62 <- color(tab62, ~ (ChiSq < 0.01 ) , ~ChiSq,color = "red")
tab62 <- color(tab62, ~ (KS < 0.01) , ~KS,color = "red")
tab62 <- color(tab62, ~ (AD < 0.01) , ~AD,color = "red")
tab62 <- color(tab62, ~ (CVM < 0.01) , ~CVM,color = "red")
colkeys = c("ChiSq","KS","AD","CVM")
tab62 <- colformat_num(x = tab62, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab62 <- add_footer_lines(tab62,values = c("p-value greater than or equal to 0.05 is highlighted in green","p-value less than 0.05 and greater than or equal to 0.01 is highlighted in amber","p-value less than 0.01 is highlighted in red"),top=FALSE)
tab62 <- fontsize(x=tab62,size = 6,part = "footer")
tab62 <- autofit(tab62)
tab62
```

\newline

`r table_nums('tab_63')`
```{r,echo=FALSE,fig.cap=tab.63,ft.align='left'}
gofc <- cbind(Distribution=c("Log-normal","Gamma","Weibull","Log-logistic"),gofc)
tab63 <- flextable(gofc,theme_fun = theme_booktabs)
tab63 <- bg(tab63, bg = "#66B3FF", part = "header")
colkeys = c("Loglik","AIC","BIC")
tab63 <- colformat_num(x = tab63, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab63 <- autofit(tab63)
tab63
```



**Conclusion**



<!-- ################ Model Fitting by data provider(after 2003Q1) With Log transformation ################################################-->



### 4.2 Distribution fit for log transformation of loss

```{r,echo=FALSE,message=FALSE,warning=FALSE}
datana <- ops_event_data
comb1 <- ggplot(datana,aes(x=log(datana$Loss),fill=Dataset)) + 
  geom_histogram(position = "identity") +
  facet_grid(Dataset~.,scales="free_y")+
  xlab("log-loss")+
  ylab("Frequency")
```

```{r,echo=FALSE,message=FALSE,warning=FALSE}
fig37 <- ggarrange(comb1,ncol = 1,nrow = 1)
annotate_figure(fig37,top = text_grob("The histogram of Log-Loss(USD) by data provider", color = "black", face = "bold", size = 10),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

<!-- ################ Model Fitting on Algo First Data (after 2003Q1) with Log transformation ################################################-->

#### 4.2.1 Algo First

##### Summary

```{r,echo=FALSE,warning=FALSE}
Loss <- algo_first
Loss$Date <- as.Date(Loss$Date,origin="1899-12-30")
colnames(Loss) <- c("Date","Loss")
b1 <- Loss
k1 <- length(which(is.na(Loss$Loss)))
if(k1 > 0){
  b1 <- b1[-which(is.na(b1$Loss)),]
}
k2 <- length(which(Loss$Loss==0))
if(k2>0)
{
  b1=b1[-which(b1$Loss==0),]
}
b1$Loss <- log(b1$Loss)
over_all_summ <- eda(b1,k1,k2)
```

`r table_nums('tab_64')`
```{r,echo=FALSE,fig.cap=tab.64,ft.align='left'}
tab64 <- flextable(over_all_summ[,2:7])
tab64 <- bg(tab64, bg = "#66B3FF", part = "header")
colkeys = c("Freqency Observations","NA","0's","Severity Observations")
tab64 <- colformat_num(x = tab64, col_keys = colkeys,big.mark=",", digits = 0, na_str = "N/A")
tab64 <- flextable::align(tab64,align="center", part = "all" )
tab64 <- autofit(tab64)
tab64
```

NA's and zeros are omitted from the analysis.
\newline

`r table_nums('tab_65')`
```{r,echo=FALSE,fig.cap=tab.65,ft.align='left'}
tab65 <- flextable(over_all_summ[,8:14])
tab65 <- bg(tab65, bg = "#66B3FF", part = "header")
colkeys = c("Min","Max","Mean","Median","Std. dev","Skewness","Kurtosis")
tab65 <- colformat_num(
  x = tab65, col_keys = colkeys,
  big.mark=",", digits = 2, na_str = "N/A")
tab65 <- autofit(tab65)
tab65
```

\newline
`r table_nums('tab_66')`
```{r,echo=FALSE,fig.cap=tab.66,ft.align='left'}
tab66 <- flextable(over_all_summ[,15:21],theme_fun = theme_booktabs)
tab66 <- bg(tab66, bg = "#66B3FF", part = "header")
colkeys = c("25th pct","50th pct","75th pct","95th pct","97.5th pct","99th pct","99.9th pct")
tab66 <- colformat_num(x = tab66, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab66 <- fontsize(x=tab66,size = 10)
tab66 <- autofit(tab66)
tab66
```

\newline

```{r,echo=FALSE,message=FALSE}
alg_f <- ggplot(data = b1, aes(x=Log(Loss(USD)))) +
  geom_histogram(data = as.data.frame(b1$Loss),aes(x=b1$Loss),color="black",fill="orange")
fig38 <- ggarrange(alg_f ,ncol= 1,nrow = 1)
annotate_figure(fig38,top = text_grob("Histogram of Algo First", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```


```{r, echo=FALSE,warning=FALSE,include=FALSE}
fit_gm <- fitdist(b1$Loss,"gamma",method = "mle")
fit_wb <- fitdist(b1$Loss,"weibull",method = "mle")
fit_ll <- fitdist(b1$Loss,"llogis",method="mle")
fit_burr <- fitdist(b1$Loss,"burr",start = list(shape1=0.01,shape2=0.01,rate=1))
fit_t <-    fitdist(b1$Loss, "t.scaled", start=list(df=2,mean=mean(b1$Loss),sd=sd(b1$Loss)))
fit_norm <- fitdist(b1$Loss,"norm",method = "mle")
fit_lnorm <- fitdist(b1$Loss,"lnorm",method = "mle")
```

##### Estimated Parameter

```{r,echo=FALSE}
par_log <- data.frame(
Distribution=c("Gamma","Gamma","Weibull","Weibull","Log-logistic","Log-logistic","Burr","Burr","Burr","Student's-t","Student's-t","Student's-t","Normal","Normal","Log-Normal","Log-Normal"),
Parameter=c("shape","rate","shape","scale","shape","scale","shape1","shape2","rate","df","mean","sd","mean","sd","meanlog","sdlog"),
Estimates=c(fit_gm$estimate[[1]],fit_gm$estimate[[2]],fit_wb$estimate[[1]],fit_wb$estimate[[2]],fit_ll$estimate[[1]],fit_ll$estimate[[2]],fit_burr$estimate[[1]],fit_burr$estimate[[2]],fit_burr$estimate[[3]],fit_t$estimate[[1]],fit_t$estimate[[2]],fit_t$estimate[[3]],fit_norm$estimate[[1]],fit_norm$estimate[[2]],fit_lnorm$estimate[[1]],fit_lnorm$estimate[[2]]),
Loglik=c(fit_gm$loglik,fit_gm$loglik,fit_wb$loglik,fit_wb$loglik,fit_ll$loglik,fit_ll$loglik,fit_burr$loglik,fit_burr$loglik,fit_burr$loglik,fit_t$loglik,fit_t$loglik,fit_t$loglik,fit_norm$loglik,fit_norm$loglik,fit_lnorm$loglik,fit_lnorm$loglik),
AIC=c(fit_gm$aic,fit_gm$aic,fit_wb$aic,fit_wb$aic,fit_ll$aic,fit_ll$aic,fit_burr$aic,fit_burr$aic,fit_burr$aic,fit_t$aic,fit_t$aic,fit_t$aic,fit_norm$aic,fit_norm$aic,fit_lnorm$aic,fit_lnorm$aic),
BIC=c(fit_gm$bic,fit_gm$bic,fit_wb$bic,fit_wb$bic,fit_ll$bic,fit_ll$bic,fit_burr$bic,fit_burr$bic,fit_burr$bic,fit_t$bic,fit_t$bic,fit_t$bic,fit_norm$bic,fit_norm$bic,fit_lnorm$bic,fit_lnorm$bic))
```

`r table_nums('tab_67')`
```{r,echo=FALSE,fig.cap=tab.67,ft.align='left'}
tab67 <- flextable(par_log)
tab67 <- merge_v(tab67,j=~Distribution)
tab67 <- theme_box(tab67)
tab67 <- bg(tab67, bg = "#66B3FF", part = "header")
tab67 <- merge_v(tab67,j=~Distribution+Loglik+AIC+BIC)
tab67 <- autofit(tab67)
tab67
```

```{r,echo=FALSE}
plot.legend <- c("Gamma","Weibull","Log-logistic","Burr","Student's-t","Normal","Log-normal")
den <-denscomp(list(fit_gm,fit_wb,fit_ll,fit_burr,fit_t,fit_norm,fit_lnorm), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+labs(x = "log(Loss(USD))", y = "Density") 
qq <-qqcomp(list(fit_gm,fit_wb,fit_ll,fit_burr,fit_t,fit_norm,fit_lnorm), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
cdf <-cdfcomp(list(fit_gm,fit_wb,fit_ll,fit_burr,fit_t,fit_norm,fit_lnorm), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+labs(caption = "*Black dots are Emperical CDF", x = "log(Loss(USD))", y = "CDF") 
pp <- ppcomp(list(fit_gm,fit_wb,fit_ll,fit_burr,fit_t,fit_norm,fit_lnorm), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))

qq1 <-qqcomp(list(fit_gm,fit_ll,fit_burr,fit_lnorm), legendtext = c("Gamma","Log-logistic","Burr","Log-normal"),plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))

di1 <- c("gamma","llogis","burr","lnorm")
#title <- c("Log-Normal","Gamma","Weibull","Normal")
dp1 <- list(list(shape=fit_gm$estimate[[1]],rate=fit_gm$estimate[[2]]),list(shape=fit_ll$estimate[[1]],scale=fit_ll$estimate[[2]]),list(shape1=fit_burr$estimate[[1]],shape2=fit_burr$estimate[[2]],rate=fit_burr$estimate[[3]]),list(meanlog=fit_lnorm$estimate[[1]],sdlog=fit_lnorm$estimate[[2]]))
q <- list()
for(i in 1:length(di1)){
  gg <- ggplot(data =b1 , mapping = aes(sample = Loss)) +  #Replace b1 by modeling data
  stat_qq_band(distribution = di1[i], dparams = dp1[[i]],conf = 0.95) + # bandtype by default is "pointwise"
  stat_qq_line(distribution = di1[i], dparams = dp1[[i]]) +
  stat_qq_point(distribution = di1[i], dparams = dp1[[i]])+ 
  labs(x = "Theoretical Quantiles", y = "Sample Quantiles")
  q[[i]] <- gg
}

fig39 <- ggarrange(den,ncol = 1,nrow = 1)
annotate_figure(fig39,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```
\newline
```{r,echo=FALSE}
fig40 <- ggarrange(qq,ncol = 1,nrow = 1)
annotate_figure(fig40,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
fig40a <- ggarrange(qq1,ncol = 1,nrow = 1)
annotate_figure(fig40a,fig.lab = "Fig.39a", fig.lab.face = "bold")
fig40b <- ggarrange(q[[1]],ncol = 1,nrow = 1)
annotate_figure(fig40b,top = text_grob("Gamma QQ-plot 95% Confidence Interval ", color = "black", face = "bold", size = 10),fig.lab = "Fig.39b", fig.lab.face = "bold")
fig40c <- ggarrange(q[[2]],ncol = 1,nrow = 1)
annotate_figure(fig40c,top = text_grob("Log-logistic QQ-plot 95% Confidence Interval ", color = "black", face = "bold", size = 10),fig.lab = "Fig.39c", fig.lab.face = "bold")
fig40d <- ggarrange(q[[3]],ncol = 1,nrow = 1)
annotate_figure(fig40d,top = text_grob("Burr QQ-plot 95% Confidence Interval ", color = "black", face = "bold", size = 10),fig.lab = "Fig.39d", fig.lab.face = "bold")
```


\newline
```{r,echo=FALSE}
fig41 <- ggarrange(pp,ncol = 1,nrow = 1)
annotate_figure(fig41,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```
\newline
```{r,echo=FALSE}
fig42 <- ggarrange(cdf,ncol = 1,nrow = 1)
annotate_figure(fig42,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

```{r,echo=FALSE,warning=FALSE,include=FALSE}
h1 <- hist(b1$Loss,main = "Loss(USD)")
breaks_cdf <- pgamma(h1$breaks,shape = fit_gm$estimate['shape'],rate = fit_gm$estimate['rate'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_gm <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_gm <- ks.test(b1$Loss,"pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])
ad_gm <- goftest::ad.test(b1$Loss,"pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])
cvm_gm <- goftest::cvm.test(x=b1$Loss,null="pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])

breaks_cdf <- pweibull(q = h1$breaks,shape = fit_wb$estimate[[1]], scale = fit_wb$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_wb <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_wb <- ks.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])
ad_wb <- goftest::ad.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])
cvm_wb <- goftest::cvm.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])


breaks_cdf <- pllogis(q = h1$breaks, shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_ll <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_ll <- ks.test(x = b1$Loss, "pllogis", shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
ad_ll <- goftest::ad.test(x = b1$Loss, "pllogis", shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
cvm_ll <- goftest::cvm.test(b1$Loss,"pllogis",shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])

breaks_cdf <- pburr(h1$breaks,shape1=fit_burr$estimate[[1]],shape2=fit_burr$estimate[[2]],rate=fit_burr$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_burr <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_burr <- ks.test(b1$Loss,"pburr",shape1=fit_burr$estimate[[1]],shape2=fit_burr$estimate[[2]],rate=fit_burr$estimate[[3]])
ad_burr <- goftest::ad.test(b1$Loss,"pburr",shape1=fit_burr$estimate[[1]],shape2=fit_burr$estimate[[2]],rate=fit_burr$estimate[[3]])
cvm_burr <- goftest::cvm.test(b1$Loss,"pburr",shape1=fit_burr$estimate[[1]],shape2=fit_burr$estimate[[2]],rate=fit_burr$estimate[[3]])

breaks_cdf <- pt.scaled(h1$breaks,df=fit_t$estimate[[1]],mean=fit_t$estimate[[2]],sd=fit_t$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_t <-chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_t <-  ks.test(x=b1$Loss,"pt.scaled",df=fit_t$estimate[[1]],mean=fit_t$estimate[[2]],sd=fit_t$estimate[[3]])
ad_t <-goftest::ad.test(x=b1$Loss,null="pt.scaled",df=fit_t$estimate[[1]],mean=fit_t$estimate[[2]],sd=fit_t$estimate[[3]])
cvm_t <- goftest::cvm.test(x=b1$Loss,null="pt.scaled",df=fit_t$estimate[[1]],mean=fit_t$estimate[[2]],sd=fit_t$estimate[[3]])

breaks_cdf <- pnorm(h1$breaks, mean= fit_norm$estimate['mean'],sd=fit_norm$estimate['sd'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_n <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_n <- ks.test(b1$Loss,"pnorm",mean= fit_norm$estimate['mean'],sd=fit_norm$estimate['sd'])
ad_n <- goftest::ad.test(b1$Loss,"pnorm",mean= fit_norm$estimate['mean'],sd=fit_norm$estimate['sd'])
cvm_n <- goftest::cvm.test(b1$Loss,null="pnorm",mean= fit_norm$estimate['mean'],sd=fit_norm$estimate['sd'])

breaks_cdf <- plnorm(h1$breaks, meanlog= fit_lnorm$estimate['meanlog'],sdlog=fit_lnorm$estimate['sdlog'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_ln <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_ln <- ks.test(b1$Loss,"plnorm",fit_lnorm$estimate['meanlog'],fit_lnorm$estimate['sdlog'])
ad_ln <- goftest::ad.test(b1$Loss,"plnorm",fit_lnorm$estimate['meanlog'],fit_lnorm$estimate['sdlog'])
cvm_ln <- goftest::cvm.test(b1$Loss,null="plnorm",fit_lnorm$estimate['meanlog'],fit_lnorm$estimate['sdlog'])

```

```{r,echo=FALSE}
goft <- round_df(data.frame(ChiSq=c(a_gm$p.value,a_wb$p.value,a_ll$p.value,a_burr$p.value,a_t$p.value,a_n$p.value,a_ln$p.value),KS=c(ks_gm$p.value,ks_wb$p.value,ks_ll$p.value,ks_burr$p.value,ks_t$p.value,ks_n$p.value,ks_ln$p.value),AD=c(ad_gm$p.value,ad_wb$p.value,ad_ll$p.value,ad_burr$p.value,ad_t$p.value,ad_n$p.value,ad_ln$p.value),CVM=c(cvm_gm$p.value,cvm_wb$p.value,cvm_ll$p.value,cvm_burr$p.value,cvm_t$p.value,cvm_n$p.value,cvm_ln$p.value)),2)
```

\newline

```{r,echo=FALSE}
gofc <- round_df(data.frame(Loglik =c(fit_gm$loglik,fit_wb$loglik,fit_ll$loglik,fit_burr$loglik,fit_t$loglik,fit_norm$loglik,fit_lnorm$loglik),AIC=c(fit_gm$aic,fit_wb$aic,fit_ll$aic,fit_burr$aic,fit_t$aic,fit_norm$aic,fit_lnorm$aic),BIC=c(fit_gm$bic,fit_wb$bic,fit_ll$bic,fit_burr$bic,fit_t$bic,fit_norm$bic,fit_lnorm$bic)),2)
```

`r table_nums('tab_74')`
```{r,echo=FALSE,fig.cap=tab.74,ft.align='left'}
goft <- cbind(Distribution=c("Gamma","Weibull","Log-logistic","Burr","Student's-t","Normal","Log-normal"),goft)
tab74 <- flextable(goft,theme_fun = theme_booktabs)
tab74 <- bg(tab74, bg = "#66B3FF", part = "header")
tab74 <- color(tab74, ~ ChiSq >= 0.05 , ~ChiSq,color = "green")
tab74 <- color(tab74, ~ KS >= 0.05 , ~KS,color = "green")
tab74 <- color(tab74, ~ AD >= 0.05 , ~AD,color = "green")
tab74 <- color(tab74, ~ CVM >= 0.05 , ~CVM,color = "green")
tab74 <- color(tab74, ~ (ChiSq >= 0.01 & ChiSq < 0.05) , ~ChiSq,color = "orange")
tab74 <- color(tab74, ~ (KS >= 0.01 & KS < 0.05) , ~KS,color = "orange")
tab74 <- color(tab74, ~ (AD >= 0.01 & AD < 0.05) , ~AD,color = "orange")
tab74 <- color(tab74, ~ (CVM >= 0.01 & CVM < 0.05) , ~CVM,color = "orange")
tab74 <- color(tab74, ~ (ChiSq < 0.01 ) , ~ChiSq,color = "red")
tab74 <- color(tab74, ~ (KS < 0.01) , ~KS,color = "red")
tab74 <- color(tab74, ~ (AD < 0.01) , ~AD,color = "red")
tab74 <- color(tab74, ~ (CVM < 0.01) , ~CVM,color = "red")
colkeys = c("ChiSq","KS","AD","CVM")
tab74 <- colformat_num(x = tab74, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab74 <- add_footer_lines(tab74,values = c("p-value greater than or equal to 0.05 is highlighted in green","p-value less than 0.05 and greater than or equal to 0.01 is highlighted in amber","p-value less than 0.01 is highlighted in red"),top=FALSE)
tab74 <- fontsize(x=tab74,size = 6,part = "footer")
tab74 <- autofit(tab74)
tab74
```

`r table_nums('tab_75')`
```{r,echo=FALSE,fig.cap=tab.75,ft.align='left'}
gofc <- cbind(Distribution=c("Gamma","Weibull","Log-logistic","Burr","Student's-t","Normal","Log-normal"),gofc)
tab75 <- flextable(gofc,theme_fun = theme_booktabs)
tab75 <- bg(tab75, bg = "#66B3FF", part = "header")
colkeys = c("Loglik","AIC","BIC")
tab75 <- colformat_num(x = tab75, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab75 <- autofit(tab75)
tab75
```

**Conclusion**


<!-- ################ Model Fitting on ORX IM Data (after 2003Q1) with Log transformation ################################################-->

#### 4.2.2 ORX IM

##### Summary

```{r,echo=FALSE,warning=FALSE}
Loss <- orx_im
Loss$Date <- as.Date(Loss$Date,origin="1899-12-30")
colnames(Loss) <- c("Date","Loss")

b1 <- Loss
k1 <- length(which(is.na(Loss$Loss)))
if(k1 > 0){
  b1 <- b1[-which(is.na(Loss$Loss)),]
}

k2 <- length(which(Loss$Loss==0))
if(k2>0)
{
  b1=b1[-which(b1$Loss==0),]
}
b1$Loss <- log(b1$Loss)
over_all_summ <- eda(b1,k1,k2)
```

`r table_nums('tab_76')`
```{r,echo=FALSE,fig.cap=tab.76,ft.align='left'}
tab76 <- flextable(over_all_summ[,2:7])
tab76 <- bg(tab76, bg = "#66B3FF", part = "header")
colkeys = c("Freqency Observations","NA","0's","Severity Observations")
tab76 <- colformat_num(x = tab76, col_keys = colkeys,big.mark=",", digits = 0, na_str = "N/A")
tab76 <- flextable::align(tab76,align="center", part = "all" )
tab76 <- autofit(tab76)
tab76
```

NA's and zeros are omitted from the analysis

`r table_nums('tab_77')`
```{r,echo=FALSE,fig.cap=tab.77,ft.align='left'}
tab77 <- flextable(over_all_summ[,8:14])
tab77 <- bg(tab77, bg = "#66B3FF", part = "header")
colkeys = c("Min","Max","Mean","Median","Std. dev","Skewness","Kurtosis")
tab77 <- colformat_num(
  x = tab77, col_keys = colkeys,
  big.mark=",", digits = 2, na_str = "N/A")
tab77 <- autofit(tab77)
tab77
```

`r table_nums('tab_78')`
```{r,echo=FALSE,fig.cap=tab.78,ft.align='left'}
tab78 <- flextable(over_all_summ[,15:21],theme_fun = theme_booktabs)
tab78 <- bg(tab78, bg = "#66B3FF", part = "header")
colkeys = c("25th pct","50th pct","75th pct","95th pct","97.5th pct","99th pct","99.9th pct")
tab78 <- colformat_num(x = tab78, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab78 <- fontsize(x=tab78,size = 10)
tab78 <- autofit(tab78)
tab78
```

```{r,echo=FALSE,message=FALSE}
orxim <- ggplot(data = b1, aes(x=Log(Loss(USD)))) +
  geom_histogram(data = as.data.frame(b1$Loss),aes(x=b1$Loss),color="black",fill="orange")
fig43 <- ggarrange(orxim ,ncol= 1,nrow = 1)
annotate_figure(fig43,top = text_grob("Histogram of ORX Insurer Member", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

```{r, echo=FALSE,warning=FALSE,include=FALSE}
fit_gm <- fitdist(b1$Loss,"gamma",method = "mle")
fit_wb <- fitdist(b1$Loss,"weibull",method = "mle")
fit_ll <- fitdist(b1$Loss,"llogis",method="mle")
fit_burr <- fitdist(b1$Loss,"burr",start = list(shape1=0.2,shape2=1,rate=1))
fit_t <-    fitdist(b1$Loss, "t.scaled", start=list(df=2,mean=mean(b1$Loss),sd=sd(b1$Loss)))
fit_norm <- fitdist(b1$Loss,"norm",method="mle")
fit_lnorm <- fitdist(b1$Loss,"lnorm",method = "mle")
```

##### Estimated Parameter
```{r,echo=FALSE}
par_log <- data.frame(
Distribution=c("Gamma","Gamma","Weibull","Weibull","Log-logistic","Log-logistic","Burr","Burr","Burr","Student's-t","Student's-t","Student's-t","Normal","Normal","Log-Normal","Log-Normal"),
Parameter=c("shape","rate","shape","scale","shape","scale","shape1","shape2","rate","df","mean","sd","mean","sd","meanlog","sdlog"),
Estimates=c(fit_gm$estimate[[1]],fit_gm$estimate[[2]],fit_wb$estimate[[1]],fit_wb$estimate[[2]],fit_ll$estimate[[1]],fit_ll$estimate[[2]],fit_burr$estimate[[1]],fit_burr$estimate[[2]],fit_burr$estimate[[3]],fit_t$estimate[[1]],fit_t$estimate[[2]],fit_t$estimate[[3]],fit_norm$estimate[[1]],fit_norm$estimate[[2]],fit_lnorm$estimate[[1]],fit_lnorm$estimate[[2]]),
Loglik=c(fit_gm$loglik,fit_gm$loglik,fit_wb$loglik,fit_wb$loglik,fit_ll$loglik,fit_ll$loglik,fit_burr$loglik,fit_burr$loglik,fit_burr$loglik,fit_t$loglik,fit_t$loglik,fit_t$loglik,fit_norm$loglik,fit_norm$loglik,fit_lnorm$loglik,fit_lnorm$loglik),
AIC=c(fit_gm$aic,fit_gm$aic,fit_wb$aic,fit_wb$aic,fit_ll$aic,fit_ll$aic,fit_burr$aic,fit_burr$aic,fit_burr$aic,fit_t$aic,fit_t$aic,fit_t$aic,fit_norm$aic,fit_norm$aic,fit_lnorm$aic,fit_lnorm$aic),
BIC=c(fit_gm$bic,fit_gm$bic,fit_wb$bic,fit_wb$bic,fit_ll$bic,fit_ll$bic,fit_burr$bic,fit_burr$bic,fit_burr$bic,fit_t$bic,fit_t$bic,fit_t$bic,fit_norm$bic,fit_norm$bic,fit_lnorm$bic,fit_lnorm$bic))
```

`r table_nums('tab_79')`
```{r,echo=FALSE,fig.cap=tab.79,ft.align='left'}
tab79 <- flextable(par_log)
tab79 <- merge_v(tab79,j=~Distribution)
tab79 <- theme_box(tab79)
tab79 <- bg(tab79, bg = "#66B3FF", part = "header")
tab79 <- merge_v(tab79,j=~Distribution+Loglik+AIC+BIC)
tab79 <- autofit(tab79)
tab79
```

```{r,echo=FALSE}
plot.legend <- c("Gamma","Weibull","Log-logistic","Burr","Student's-t","Normal","Log-normal")
den <-denscomp(list(fit_gm,fit_wb,fit_ll,fit_burr,fit_t,fit_norm,fit_lnorm), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+labs(x = "log(Loss(USD))", y = "Density")
qq <-qqcomp(list(fit_gm,fit_wb,fit_ll,fit_burr,fit_t,fit_norm,fit_lnorm), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
cdf <-cdfcomp(list(fit_gm,fit_wb,fit_ll,fit_burr,fit_t,fit_norm,fit_lnorm), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+labs(caption = "*Black dots are Emperical CDF", x = "log(Loss(USD))", y = "CDF")
pp <- ppcomp(list(fit_gm,fit_wb,fit_ll,fit_burr,fit_t,fit_norm,fit_lnorm), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))

fig44 <- ggarrange(den,ncol = 1,nrow = 1)
annotate_figure(fig44,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline
```{r,echo=FALSE}
fig45 <- ggarrange(qq,ncol = 1,nrow = 1)
annotate_figure(fig45,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")

```

```{r,echo=FALSE}
fig46 <- ggarrange(pp,ncol = 1,nrow = 1)
annotate_figure(fig46,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")

```

```{r,echo=FALSE}
fig47 <- ggarrange(cdf,ncol = 1,nrow = 1)
annotate_figure(fig47,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")

```

```{r,echo=FALSE,warning=FALSE,include=FALSE}
h1=hist(b1$Loss,main = "Loss(USD)")

breaks_cdf <- pgamma(h1$breaks,shape = fit_gm$estimate['shape'],rate = fit_gm$estimate['rate'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_gm <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_gm <- ks.test(b1$Loss,"pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])
ad_gm <- goftest::ad.test(b1$Loss,"pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])
cvm_gm <- goftest::cvm.test(x=b1$Loss,null="pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])

breaks_cdf <- pweibull(q = h1$breaks,shape = fit_wb$estimate[[1]], scale = fit_wb$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_wb <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)

ks_wb <- ks.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])
ad_wb <- goftest::ad.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])
cvm_wb <- goftest::cvm.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])

breaks_cdf <- pllogis(q = h1$breaks, shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_ll <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_ll <- ks.test(x = b1$Loss, "pllogis", shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
ad_ll <- goftest::ad.test(x = b1$Loss, "pllogis", shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
cvm_ll <- goftest::cvm.test(b1$Loss,"pllogis",shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])

breaks_cdf <- pburr(h1$breaks,shape1=fit_burr$estimate[[1]],shape2=fit_burr$estimate[[2]],rate=fit_burr$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_burr <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_burr <- ks.test(b1$Loss,"pburr",shape1=fit_burr$estimate[[1]],shape2=fit_burr$estimate[[2]],rate=fit_burr$estimate[[3]])
ad_burr <- goftest::ad.test(b1$Loss,"pburr",shape1=fit_burr$estimate[[1]],shape2=fit_burr$estimate[[2]],rate=fit_burr$estimate[[3]])
cvm_burr <- goftest::cvm.test(b1$Loss,"pburr",shape1=fit_burr$estimate[[1]],shape2=fit_burr$estimate[[2]],rate=fit_burr$estimate[[3]])

breaks_cdf <- pt.scaled(h1$breaks,df=fit_t$estimate[[1]],mean=fit_t$estimate[[2]],sd=fit_t$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_t <-chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_t <-  ks.test(x=b1$Loss,"pt.scaled",df=fit_t$estimate[[1]],mean=fit_t$estimate[[2]],sd=fit_t$estimate[[3]])
ad_t <-goftest::ad.test(x=b1$Loss,null="pt.scaled",df=fit_t$estimate[[1]],mean=fit_t$estimate[[2]],sd=fit_t$estimate[[3]])
cvm_t <- goftest::cvm.test(x=b1$Loss,null="pt.scaled",df=fit_t$estimate[[1]],mean=fit_t$estimate[[2]],sd=fit_t$estimate[[3]])

breaks_cdf <- pnorm(h1$breaks, mean= fit_norm$estimate['mean'],sd=fit_norm$estimate['sd'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_n <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_n <- ks.test(b1$Loss,"pnorm",mean= fit_norm$estimate['mean'],sd=fit_norm$estimate['sd'])
ad_n <- goftest::ad.test(b1$Loss,"pnorm",mean= fit_norm$estimate['mean'],sd=fit_norm$estimate['sd'])
cvm_n <- goftest::cvm.test(b1$Loss,null="pnorm",mean= fit_norm$estimate['mean'],sd=fit_norm$estimate['sd'])

breaks_cdf <- plnorm(h1$breaks, meanlog= fit_lnorm$estimate['meanlog'],sdlog=fit_lnorm$estimate['sdlog'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_ln <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_ln <- ks.test(b1$Loss,"plnorm",fit_lnorm$estimate['meanlog'],fit_lnorm$estimate['sdlog'])
ad_ln <- goftest::ad.test(b1$Loss,"plnorm",fit_lnorm$estimate['meanlog'],fit_lnorm$estimate['sdlog'])
cvm_ln <- goftest::cvm.test(b1$Loss,null="plnorm",fit_lnorm$estimate['meanlog'],fit_lnorm$estimate['sdlog'])

```

```{r,echo=FALSE}
goft <- round_df(data.frame(ChiSq=c(a_gm$p.value,a_wb$p.value,a_ll$p.value,a_burr$p.value,a_t$p.value,a_n$p.value,a_ln$p.value),KS=c(ks_gm$p.value,ks_wb$p.value,ks_ll$p.value,ks_burr$p.value,ks_t$p.value,ks_n$p.value,ks_ln$p.value),AD=c(ad_gm$p.value,ad_wb$p.value,ad_ll$p.value,ad_burr$p.value,ad_t$p.value,ad_n$p.value,ad_ln$p.value),CVM=c(cvm_gm$p.value,cvm_wb$p.value,cvm_ll$p.value,cvm_burr$p.value,cvm_t$p.value,cvm_n$p.value,cvm_ln$p.value)),2)
```

\newline

```{r,echo=FALSE}
gofc <- round_df(data.frame(Loglik =c(fit_gm$loglik,fit_wb$loglik,fit_ll$loglik,fit_burr$loglik,fit_t$loglik,fit_norm$loglik,fit_lnorm$loglik),AIC=c(fit_gm$aic,fit_wb$aic,fit_ll$aic,fit_burr$aic,fit_t$aic,fit_norm$aic,fit_lnorm$aic),BIC=c(fit_gm$bic,fit_wb$bic,fit_ll$bic,fit_burr$bic,fit_t$bic,fit_norm$bic,fit_lnorm$bic)),2)
```

`r table_nums('tab_86')`
```{r,echo=FALSE,fig.cap=tab.86,ft.align='left'}
goft <- cbind(Distribution=c("Gamma","Weibull","Log-logistic","Burr","Student's-t","Normal","Log-normal"),goft)
tab86 <- flextable(goft,theme_fun = theme_booktabs)
tab86 <- bg(tab86, bg = "#66B3FF", part = "header")
tab86 <- color(tab86, ~ ChiSq >= 0.05 , ~ChiSq,color = "green")
tab86 <- color(tab86, ~ KS >= 0.05 , ~KS,color = "green")
tab86 <- color(tab86, ~ AD >= 0.05 , ~AD,color = "green")
tab86 <- color(tab86, ~ CVM >= 0.05 , ~CVM,color = "green")
tab86 <- color(tab86, ~ (ChiSq >= 0.01 & ChiSq < 0.05) , ~ChiSq,color = "orange")
tab86 <- color(tab86, ~ (KS >= 0.01 & KS < 0.05) , ~KS,color = "orange")
tab86 <- color(tab86, ~ (AD >= 0.01 & AD < 0.05) , ~AD,color = "orange")
tab86 <- color(tab86, ~ (CVM >= 0.01 & CVM < 0.05) , ~CVM,color = "orange")
tab86 <- color(tab86, ~ (ChiSq < 0.01 ) , ~ChiSq,color = "red")
tab86 <- color(tab86, ~ (KS < 0.01) , ~KS,color = "red")
tab86 <- color(tab86, ~ (AD < 0.01) , ~AD,color = "red")
tab86 <- color(tab86, ~ (CVM < 0.01) , ~CVM,color = "red")
colkeys = c("ChiSq","KS","AD","CVM")
tab86 <- colformat_num(x = tab86, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab86 <- add_footer_lines(tab86,values = c("p-value greater than or equal to 0.05 is highlighted in green","p-value less than 0.05 and greater than or equal to 0.01 is highlighted in amber","p-value less than 0.01 is highlighted in red"),top=FALSE)
tab86 <- fontsize(x=tab86,size = 6,part = "footer")
tab86 <- autofit(tab86)
tab86
```

\newline

`r table_nums('tab_87')`
```{r,echo=FALSE,fig.cap=tab.87,ft.align='left'}
gofc <- cbind(Distribution=c("Gamma","Weibull","Log-logistic","Burr","Student's-t","Normal","Log-normal"),gofc)
tab87 <- flextable(gofc,theme_fun = theme_booktabs)
tab87 <- bg(tab87, bg = "#66B3FF", part = "header")
colkeys = c("Loglik","AIC","BIC")
tab87 <- colformat_num(x = tab87, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab87 <- autofit(tab87)
tab87
```

**Conclusion**


<!-- ################ Model Fitting on ORX News Data (after 2003Q1) with Log transformation ################################################-->

#### 4.2.3 ORX NEWS

##### Summary

```{r,echo=FALSE,warning=FALSE}
Loss <- orx_news
Loss$Date <- as.Date(Loss$Date,origin="1899-12-30")
colnames(Loss) <- c("Date","Loss")
b1 <- Loss
k1 <- length(which(is.na(Loss$Loss)))
if(k1 > 0){b1 <- b1[-which(is.na(Loss$Loss)),]}
k2 <- length(which(b1$Loss==0))
if(k2>0){b1=b1[-which(b1$Loss==0),]}

b1$Loss <- log(b1$Loss)
over_all_summ <- eda(b1,k1,k2)
```

`r table_nums('tab_88')`
```{r,echo=FALSE,fig.cap=tab.88,ft.align='left'}
tab88 <- flextable(over_all_summ[,2:7])
tab88 <- bg(tab88, bg = "#66B3FF", part = "header")
colkeys = c("Freqency Observations","NA","0's","Severity Observations")
tab88 <- colformat_num(x = tab88, col_keys = colkeys,big.mark=",", digits = 0, na_str = "N/A")
tab88 <- flextable::align(tab88,align="center", part = "all" )
tab88 <- autofit(tab88)
tab88
```

NA's and zeros are omitted from the analysis

\newline

`r table_nums('tab_89')`
```{r,echo=FALSE,fig.cap=tab.89,ft.align='left'}
tab89 <- flextable(over_all_summ[,8:14])
tab89 <- bg(tab89, bg = "#66B3FF", part = "header")
colkeys = c("Min","Max","Mean","Median","Std. dev","Skewness","Kurtosis")
tab89 <- colformat_num(
  x = tab89, col_keys = colkeys,
  big.mark=",", digits = 2, na_str = "N/A")
tab89 <- autofit(tab89)
tab89
```

\newline

`r table_nums('tab_90')`
```{r,echo=FALSE,fig.cap=tab.90,ft.align='left'}
tab90 <- flextable(over_all_summ[,15:21],theme_fun = theme_booktabs)
tab90 <- bg(tab90, bg = "#66B3FF", part = "header")
colkeys = c("25th pct","50th pct","75th pct","95th pct","97.5th pct","99th pct","99.9th pct")
tab90 <- colformat_num(x = tab90, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab90 <- fontsize(x=tab90,size = 10)
tab90 <- autofit(tab90)
tab90
```
\newline

```{r,echo=FALSE,message=FALSE}
orx_n <- ggplot(data = b1, aes(x=Log(Loss(USD)))) +
  geom_histogram(data = as.data.frame(b1$Loss),aes(x=b1$Loss),color="black",fill="orange")
fig48 <- ggarrange(orx_n  ,ncol= 1,nrow = 1)
annotate_figure(fig48,top = text_grob("Histogram of ORX News", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")

```

```{r, echo=FALSE,warning=FALSE,include=FALSE}
fit_gm <- fitdist(b1$Loss,"gamma",method = "mle")
fit_wb <- fitdist(b1$Loss,"weibull",method = "mle")
fit_ll <- fitdist(b1$Loss,"llogis",method="mle")
fit_burr <- fitdist(b1$Loss,"burr",start = list(shape1=0.1,shape2=1,rate=1))
fit_t <-    fitdist(b1$Loss, "t.scaled", start=list(df=2,mean=mean(b1$Loss),sd=sd(b1$Loss)))
fit_norm <- fitdist(b1$Loss,"norm")
fit_lnorm <- fitdist(b1$Loss,"lnorm")
```

##### Estimated Parameter

```{r,echo=FALSE}
par_log <- data.frame(
Distribution=c("Gamma","Gamma","Weibull","Weibull","Log-logistic","Log-logistic","Burr","Burr","Burr","Student's-t","Student's-t","Student's-t","Normal","Normal","Log-normal","Log-normal"),
Parameter=c("shape","rate","shape","scale","shape","scale","shape1","shape2","rate","df","mean","sd","mean","sd","meanlog","sdlog"),
Estimates=c(fit_gm$estimate[[1]],fit_gm$estimate[[2]],fit_wb$estimate[[1]],fit_wb$estimate[[2]],fit_ll$estimate[[1]],fit_ll$estimate[[2]],fit_burr$estimate[[1]],fit_burr$estimate[[2]],fit_burr$estimate[[3]],fit_t$estimate[[1]],fit_t$estimate[[2]],fit_t$estimate[[3]],fit_norm$estimate[[1]],fit_norm$estimate[[2]],fit_lnorm$estimate[[1]],fit_lnorm$estimate[[2]]),
Loglik=c(fit_gm$loglik,fit_gm$loglik,fit_wb$loglik,fit_wb$loglik,fit_ll$loglik,fit_ll$loglik,fit_burr$loglik,fit_burr$loglik,fit_burr$loglik,fit_t$loglik,fit_t$loglik,fit_t$loglik,fit_norm$loglik,fit_norm$loglik,fit_lnorm$loglik,fit_lnorm$loglik),
AIC=c(fit_gm$aic,fit_gm$aic,fit_wb$aic,fit_wb$aic,fit_ll$aic,fit_ll$aic,fit_burr$aic,fit_burr$aic,fit_burr$aic,fit_t$aic,fit_t$aic,fit_t$aic,fit_norm$aic,fit_norm$aic,fit_lnorm$aic,fit_lnorm$aic),
BIC=c(fit_gm$bic,fit_gm$bic,fit_wb$bic,fit_wb$bic,fit_ll$bic,fit_ll$bic,fit_burr$bic,fit_burr$bic,fit_burr$bic,fit_t$bic,fit_t$bic,fit_t$bic,fit_norm$bic,fit_norm$bic,fit_lnorm$bic,fit_lnorm$bic))
```

`r table_nums('tab_14')`
```{r,echo=FALSE,fig.cap=tab.14,ft.align='left'}
tab91 <- flextable(par_log)
tab91 <- merge_v(tab91,j=~Distribution)
tab91 <- theme_box(tab91)
tab91 <- bg(tab91, bg = "#66B3FF", part = "header")
tab91 <- merge_v(tab91,j=~Distribution+Loglik+AIC+BIC)
tab91 <- autofit(tab91)
tab91
```


```{r,echo=FALSE}
plot.legend <- c("Gamma","Weibull","Log-logistic","Burr","Student's-t","Normal","Log-normal")
den <-denscomp(list(fit_gm,fit_wb,fit_ll,fit_burr,fit_t,fit_norm,fit_lnorm), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+labs(x = "log(Loss(USD))", y = "Density")
qq <-qqcomp(list(fit_gm,fit_wb,fit_ll,fit_burr,fit_t,fit_norm,fit_lnorm), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
cdf <-cdfcomp(list(fit_gm,fit_wb,fit_ll,fit_burr,fit_t,fit_norm,fit_lnorm), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))+labs(caption = "*Black dots are Emperical CDF", x = "log(Loss(USD))", y = "CDF")
pp <- ppcomp(list(fit_gm,fit_wb,fit_ll,fit_burr,fit_t,fit_norm,fit_lnorm), legendtext = plot.legend,plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))

fig49 <- ggarrange(den,ncol = 1,nrow = 1)
annotate_figure(fig49,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE}
fig50 <- ggarrange(qq,ncol = 1,nrow = 1)
annotate_figure(fig50,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")

```

\newline

```{r,echo=FALSE}
fig51 <- ggarrange(pp,ncol = 1,nrow = 1)
annotate_figure(fig51,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")

```

\newline

```{r,echo=FALSE}
fig52 <- ggarrange(cdf,ncol = 1,nrow = 1)
annotate_figure(fig52,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

```{r,echo=FALSE,warning=FALSE,include=FALSE}
h1=hist(b1$Loss,main = "Loss(USD)")

breaks_cdf <- pgamma(h1$breaks,shape = fit_gm$estimate['shape'],rate = fit_gm$estimate['rate'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_gm <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_gm <- ks.test(b1$Loss,"pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])
ad_gm <- goftest::ad.test(b1$Loss,"pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])
cvm_gm <- goftest::cvm.test(x=b1$Loss,null="pgamma",fit_gm$estimate['shape'],fit_gm$estimate['rate'])

breaks_cdf <- pweibull(q = h1$breaks,shape = fit_wb$estimate[[1]], scale = fit_wb$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_wb <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_wb <- ks.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])
ad_wb <- goftest::ad.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])
cvm_wb <- goftest::cvm.test(b1$Loss,"pweibull",shape =  fit_wb$estimate[[1]],scale = fit_wb$estimate[[2]])


breaks_cdf <- pllogis(q = h1$breaks, shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_ll <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_ll <- ks.test(x = b1$Loss, "pllogis", shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
ad_ll <- goftest::ad.test(x = b1$Loss, "pllogis", shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])
cvm_ll <- goftest::cvm.test(b1$Loss,"pllogis",shape = fit_ll$estimate[[1]], scale = fit_ll$estimate[[2]])

breaks_cdf <- pburr(h1$breaks,shape1=fit_burr$estimate[[1]],shape2=fit_burr$estimate[[2]],rate=fit_burr$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_burr <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_burr <- ks.test(b1$Loss,"pburr",shape1=fit_burr$estimate[[1]],shape2=fit_burr$estimate[[2]],rate=fit_burr$estimate[[3]])
ad_burr <- goftest::ad.test(b1$Loss,"pburr",shape1=fit_burr$estimate[[1]],shape2=fit_burr$estimate[[2]],rate=fit_burr$estimate[[3]])
cvm_burr <- goftest::cvm.test(b1$Loss,"pburr",shape1=fit_burr$estimate[[1]],shape2=fit_burr$estimate[[2]],rate=fit_burr$estimate[[3]])

breaks_cdf <- pt.scaled(h1$breaks,df=fit_t$estimate[[1]],mean=fit_t$estimate[[2]],sd=fit_t$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_t <-chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_t <-  ks.test(x=b1$Loss,"pt.scaled",df=fit_t$estimate[[1]],mean=fit_t$estimate[[2]],sd=fit_t$estimate[[3]])
ad_t <-goftest::ad.test(x=b1$Loss,null="pt.scaled",df=fit_t$estimate[[1]],mean=fit_t$estimate[[2]],sd=fit_t$estimate[[3]])
cvm_t <- goftest::cvm.test(x=b1$Loss,null="pt.scaled",df=fit_t$estimate[[1]],mean=fit_t$estimate[[2]],sd=fit_t$estimate[[3]])

breaks_cdf <- pnorm(h1$breaks, mean= fit_norm$estimate['mean'],sd=fit_norm$estimate['sd'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_n <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_n <- ks.test(b1$Loss,"pnorm",mean= fit_norm$estimate['mean'],sd=fit_norm$estimate['sd'])
ad_n <- goftest::ad.test(b1$Loss,"pnorm",mean= fit_norm$estimate['mean'],sd=fit_norm$estimate['sd'])
cvm_n <- goftest::cvm.test(b1$Loss,null="pnorm",mean= fit_norm$estimate['mean'],sd=fit_norm$estimate['sd'])

breaks_cdf <- plnorm(h1$breaks, meanlog= fit_lnorm$estimate['meanlog'],sdlog=fit_lnorm$estimate['sdlog'])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_ln <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_ln <- ks.test(b1$Loss,"plnorm",fit_lnorm$estimate['meanlog'],fit_lnorm$estimate['sdlog'])
ad_ln <- goftest::ad.test(b1$Loss,"plnorm",fit_lnorm$estimate['meanlog'],fit_lnorm$estimate['sdlog'])
cvm_ln <- goftest::cvm.test(b1$Loss,null="plnorm",fit_lnorm$estimate['meanlog'],fit_lnorm$estimate['sdlog'])

```

```{r,echo=FALSE}
goft <- round_df(data.frame(ChiSq=c(a_gm$p.value,a_wb$p.value,a_ll$p.value,a_burr$p.value,a_t$p.value,a_n$p.value,a_ln$p.value),KS=c(ks_gm$p.value,ks_wb$p.value,ks_ll$p.value,ks_burr$p.value,ks_t$p.value,ks_n$p.value,ks_ln$p.value),AD=c(ad_gm$p.value,ad_wb$p.value,ad_ll$p.value,ad_burr$p.value,ad_t$p.value,ad_n$p.value,ad_ln$p.value),CVM=c(cvm_gm$p.value,cvm_wb$p.value,cvm_ll$p.value,cvm_burr$p.value,cvm_t$p.value,cvm_n$p.value,cvm_ln$p.value)),2)
```

\newline

```{r,echo=FALSE}
gofc <- round_df(data.frame(Loglik =c(fit_gm$loglik,fit_wb$loglik,fit_ll$loglik,fit_burr$loglik,fit_t$loglik,fit_norm$loglik,fit_lnorm$loglik),AIC=c(fit_gm$aic,fit_wb$aic,fit_ll$aic,fit_burr$aic,fit_t$aic,fit_norm$aic,fit_lnorm$aic),BIC=c(fit_gm$bic,fit_wb$bic,fit_ll$bic,fit_burr$bic,fit_t$bic,fit_norm$bic,fit_lnorm$bic)),2)
```

`r table_nums('tab_98')`
```{r,echo=FALSE,fig.cap=tab.98,ft.align='left'}
goft <- cbind(Distribution=c("Gamma","Weibull","Log-logistic","Burr","Student's-t","Normal","Log-normal"),goft)
tab98 <- flextable(goft,theme_fun = theme_booktabs)
tab98 <- bg(tab98, bg = "#66B3FF", part = "header")
tab98 <- color(tab98, ~ ChiSq >= 0.05 , ~ChiSq,color = "green")
tab98 <- color(tab98, ~ KS >= 0.05 , ~KS,color = "green")
tab98 <- color(tab98, ~ AD >= 0.05 , ~AD,color = "green")
tab98 <- color(tab98, ~ CVM >= 0.05 , ~CVM,color = "green")
tab98 <- color(tab98, ~ (ChiSq >= 0.01 & ChiSq < 0.05) , ~ChiSq,color = "orange")
tab98 <- color(tab98, ~ (KS >= 0.01 & KS < 0.05) , ~KS,color = "orange")
tab98 <- color(tab98, ~ (AD >= 0.01 & AD < 0.05) , ~AD,color = "orange")
tab98 <- color(tab98, ~ (CVM >= 0.01 & CVM < 0.05) , ~CVM,color = "orange")
tab98 <- color(tab98, ~ (ChiSq < 0.01 ) , ~ChiSq,color = "red")
tab98 <- color(tab98, ~ (KS < 0.01) , ~KS,color = "red")
tab98 <- color(tab98, ~ (AD < 0.01) , ~AD,color = "red")
tab98 <- color(tab98, ~ (CVM < 0.01) , ~CVM,color = "red")
colkeys = c("ChiSq","KS","AD","CVM")
tab98 <- colformat_num(x = tab98, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab98 <- add_footer_lines(tab98,values = c("p-value greater than or equal to 0.05 is highlighted in green","p-value less than 0.05 and greater than or equal to 0.01 is highlighted in amber","p-value less than 0.01 is highlighted in red"),top=FALSE)
tab98 <- fontsize(x=tab98,size = 6,part = "footer")
tab98 <- autofit(tab98)
tab98
```

\newline

`r table_nums('tab_99')`
```{r,echo=FALSE,fig.cap=tab.99,ft.align='left'}
gofc <- cbind(Distribution=c("Gamma","Weibull","Log-logistic","Burr","Student's-t","Normal","Log-normal"),gofc)
tab99 <- flextable(gofc,theme_fun = theme_booktabs)
tab99 <- bg(tab99, bg = "#66B3FF", part = "header")
colkeys = c("Loglik","AIC","BIC")
tab99 <- colformat_num(x = tab99, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab99 <- autofit(tab99)
tab99
```


**Conclusion**


<!-- ------------------------------------------------------------------------------------------------------------------------------------------------------ -->
<!-- ###########################################  Model Fit after truncating the data  ###################################################  -->
<!-- ####################################################################################################################################################  -->

### 4.3 Truncated distribution fit for log transformation of loss

#### 4.3.1 Algo-First

```{r ,warning=FALSE,echo=FALSE}
Loss <-openxlsx::read.xlsx("M 388 Fraud 2019-10-31.xlsx",sheet=1)
Loss <- Loss[,c("Dataset","Final.Date","Inflation_adjusted_Loss(USD)")]
colnames(Loss) <- c("Dataset","Date","Loss")
Loss$Date <- as.Date(Loss$Date,origin="1899-12-30")
```

<!-- Model fitting on Algo First Data (after 2003Q1) with Log Transformation after Truncation  -->

##### Summary

```{r,warning=FALSE,echo=FALSE}

AF_data <- Loss[which(Loss$Dataset == "Algo FIRST"),]
k1 <- length(which(is.na(AF_data$Loss)))
if(k1>0){AF_data <- AF_data[-which(is.na(AF_data$Loss)),]}
k2 <- length(which(AF_data$Loss == 0))
if(k2>0){AF_data <- AF_data[-which(AF_data$Loss == 0),]}
AF_data$Loss <- log(AF_data$Loss)
over_all_summ <- eda(AF_data,k1,k2)

```

`r table_nums('tab_100')`
```{r,echo=FALSE,fig.cap=tab.100,ft.align='left'}
tab100 <- flextable(over_all_summ[,2:7])
tab100 <- bg(tab100, bg = "#66B3FF", part = "header")
colkeys = c("Freqency Observations","NA","0's","Severity Observations")
tab100 <- colformat_num(x = tab100, col_keys = colkeys,big.mark=",", digits = 0, na_str = "N/A")
tab100 <- flextable::align(tab100,align="center", part = "all" )
tab100 <- autofit(tab100)
tab100
```

NA's and zeros are omitted from the analysis

\newline

`r table_nums('tab_101')`
```{r,echo=FALSE,fig.cap=tab.101,ft.align='left'}
tab101 <- flextable(over_all_summ[,8:14])
tab101 <- bg(tab101, bg = "#66B3FF", part = "header")
colkeys = c("Min","Max","Mean","Median","Std. dev","Skewness","Kurtosis")
tab101 <- colformat_num(
  x = tab101, col_keys = colkeys,
  big.mark=",", digits = 2, na_str = "N/A")
tab101 <- autofit(tab101)
tab101
```

\newline

`r table_nums('tab_102')`
```{r,echo=FALSE,fig.cap=tab.102,ft.align='left'}
tab102 <- flextable(over_all_summ[,15:21],theme_fun = theme_booktabs)
tab102 <- bg(tab102, bg = "#66B3FF", part = "header")
colkeys = c("25th pct","50th pct","75th pct","95th pct","97.5th pct","99th pct","99.9th pct")
tab102 <- colformat_num(x = tab102, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab102 <- fontsize(x=tab102,size = 10)
tab102 <- autofit(tab102)
tab102
```

\newline


```{r,echo=FALSE, warnings = FALSE, message=FALSE}

x1 <- ggplot(data = AF_data, aes(x=Log(Loss(USD)))) +
  geom_histogram(data = as.data.frame(AF_data$Loss),aes(x=AF_data$Loss),color="black",fill="orange")+labs(title="Histogram of Log Loss(USD)", y = "Count", x="Log(Loss(USD))")+theme(plot.title = element_text(colour="black", size=10,face = "bold.italic"))
x2 <- ggplot(data=AF_data, aes(Loss)) + stat_ecdf(geom = "point")+labs(title="Empirical Cumulative Distribution Function", y = "CDF", x="Log(Loss(USD))")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
 
fig53 <- ggarrange(x1,x2,ncol = 2,nrow = 1)
annotate_figure(fig53,text_grob("Before Truncation", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")

```

```{r,echo=FALSE, message=FALSE}
H_trunc <- 12.5
b2 <- AF_data[AF_data$Loss > H_trunc,]

x1 <- ggplot(data = b2, aes(x=Log(Loss(USD)))) +
  geom_histogram(data = as.data.frame(b2$Loss),aes(x=b2$Loss),color="black",fill="orange")+labs(title="Histogram of Log Loss(USD)", y = "Count", x="Log(Loss(USD))")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
x2 <- ggplot(data=b2, aes(Loss)) + stat_ecdf(geom = "point")+labs(title="Empirical Cumulative \n Distribution Function", y = "CDF", x="Log(Loss(USD))")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
 
fig54 <- ggarrange(x1,x2,ncol = 2,nrow = 1)
annotate_figure(fig54,text_grob("After Truncation", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")

usd <-  paste0("$",round(exp(H_trunc),0))
```

**Truncation Point**


```{r, echo=FALSE}
trunc_summ <- data.frame(matrix(0, nrow = 1, ncol = 6))
colnames(trunc_summ) <- c("Truncation Point","Data Points before Truncation","Data Points after Truncation","Truncated Data Points","Max Loss of Truncated Data","Average Loss of Truncated Data")
trunc_summ[1,1] <- paste0(H_trunc," ($",format(round(exp(H_trunc),2),big.mark=","),")")
trunc_summ[1,2] <- nrow(AF_data)
trunc_summ[1,3] <- nrow(b2)
trunc_summ[1,4] <- paste0(nrow(AF_data) - nrow(b2)," (",round((1-nrow(b2)/nrow(AF_data))*100,2),"%)")
trunc_summ[1,5] <- format(round(exp(max(AF_data$Loss[which(AF_data$Loss <= H_trunc)])),2),big.mark = ",")
trunc_summ[1,6] <- format(round(mean(exp(AF_data$Loss[which(AF_data$Loss <= H_trunc)])),2),big.mark=",")
```

\newline

`r table_nums('tab_103')`
```{r,echo=FALSE,fig.cap=tab.103,ft.align='left'}
tab103 <- flextable(trunc_summ)
tab103 <- bg(tab103, bg = "#66B3FF", part = "header")
colkeys =c("Max Loss of Truncated Data","Average Loss of Truncated Data")
tab103 <- colformat_num(x = tab103, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
colkeys =c("Data Points before Truncation","Data Points after Truncation")
tab103 <- colformat_num(x = tab103, col_keys = colkeys,big.mark=",", digits = 0, na_str = "N/A")
tab103 <- align_text_col(tab103,align="center")
tab103 <- fontsize(tab103, part = "header", size = 10) 
tab103 <- fontsize(x=tab103,size = 10)
tab103 <- autofit(tab103)
tab103
```



```{r, echo=FALSE,warning=FALSE,include=FALSE}
fit_ln <- fitdist(AF_data$Loss, "lnorm",method = "mle")
fit_gm <- fitdist(AF_data$Loss,"gamma",method = "mle")
fit_wb <- fitdist(AF_data$Loss,"weibull",method = "mle")
fit_ll <- fitdist(AF_data$Loss,"llogis",method="mle")
fit_burr <- fitdist(AF_data$Loss, "burr", start = list(shape1 = 0.01, shape2 = 0.01, rate = 1))
fit_t <- fitdist(AF_data$Loss, "t.scaled", start=list(df=2, mean = mean(AF_data$Loss),sd = sd(AF_data$Loss)))
fit_norm <- fitdist(AF_data$Loss, "norm")
```

```{r, warning=FALSE, echo=FALSE}
dtrunc_ln <- function(x, meanlog, sdlog)
  dtrunc(x, "lnorm", a = H_trunc, b = Inf, meanlog = meanlog, sdlog = sdlog)
ptrunc_ln <- function(x, meanlog, sdlog)
  ptrunc(x, "lnorm", a = H_trunc, b = Inf, meanlog = meanlog, sdlog = sdlog)
qtrunc_ln <- function(x, meanlog, sdlog)
  qtrunc(x, "lnorm", a = H_trunc, b = Inf, meanlog = meanlog, sdlog = sdlog)

dtrunc_gm <- function(x, shape, rate)
  dtrunc(x, "gamma", a = H_trunc, b = Inf, shape = shape, rate = rate)
ptrunc_gm <- function(x, shape, rate)
  ptrunc(x, "gamma", a = H_trunc, b = Inf, shape = shape, rate = rate)
qtrunc_gm <- function(x, shape, rate)
  qtrunc(x, "gamma", a = H_trunc, b = Inf, shape = shape, rate = rate)

dtrunc_wb <- function(x, shape, scale)
  dtrunc(x, "weibull", a = H_trunc, b = Inf, shape = shape, scale = scale)
ptrunc_wb <- function(x, shape, scale)
  ptrunc(x, "weibull", a = H_trunc, b = Inf, shape = shape, scale = scale)
qtrunc_wb <- function(x, shape, scale)
  qtrunc(x, "weibull", a = H_trunc, b = Inf, shape = shape, scale =scale)

dtrunc_ll <- function(x, shape, scale)
  dtrunc(x, "llogis", a = H_trunc, b = Inf, shape = shape, scale =scale)
ptrunc_ll <- function(x, shape, scale)
  ptrunc(x, "llogis", a = H_trunc, b = Inf, shape = shape, scale = scale)
qtrunc_ll <- function(x, shape, scale)
  qtrunc(x, "llogis", a = H_trunc, b = Inf, shape = shape, scale = scale)

dtrunc_burr <- function(x, shape1, shape2, rate)
  dtrunc(x, "burr", a = H_trunc, b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)
ptrunc_burr <- function(x, shape1, shape2, rate)
  ptrunc(x, "burr", a = H_trunc, b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)
qtrunc_burr <- function(x, shape1, shape2, rate)
  qtrunc(x, "burr", a = H_trunc, b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)

dtrunc_t <- function(x, df, mean, sd)
  dtrunc(x, "t.scaled", a = H_trunc, b = Inf, df = df, mean = mean, sd =sd)
ptrunc_t <- function(x, df, mean, sd)
  ptrunc(x, "t.scaled", a = H_trunc, b = Inf, df = df, mean = mean, sd =sd)
qtrunc_t <- function(x, df, mean, sd)
  qtrunc(x, "t.scaled", a = H_trunc, b = Inf, df = df, mean = mean, sd =sd)

dtrunc_norm <- function(x, mean, sd)
  dtrunc(x, "norm", a = H_trunc, b = Inf, mean = mean, sd = sd)
ptrunc_norm <- function(x, mean, sd)
  ptrunc(x, "norm", a = H_trunc, b = Inf, mean = mean, sd = sd)
qtrunc_norm <- function(x, mean, sd)
  qtrunc(x, "norm", a = H_trunc, b = Inf, mean = mean, sd = sd)

fit_tln <- fitdistrplus::fitdist(b2$Loss, "trunc_ln",start = list(meanlog = 2, sdlog = 0.1))
fit_tgm <- fitdistrplus::fitdist(b2$Loss,"trunc_gm",start = list(shape = 6, rate = 0.001))
fit_twb <- fitdistrplus::fitdist(b2$Loss,"trunc_wb",start = list(shape = 1, scale = 1))
fit_tll <- fitdistrplus::fitdist(b2$Loss,"trunc_ll",start = list(shape = 6, scale = 2))
fit_tburr <- fitdistrplus::fitdist(b2$Loss, "trunc_burr", start = list(shape1 = 2, shape2 = 4, rate = 1.5))
fit_tt <- fitdistrplus::fitdist(b2$Loss, "trunc_t", start=list(df=8, mean = mean(b2$Loss),sd = sd(b2$Loss)))
fit_tnorm <- fitdistrplus::fitdist(b2$Loss, "trunc_norm", start = list(mean = mean(b2$Loss), sd = sd(b2$Loss)))
```

##### Estimated Parameters  

```{r,echo=FALSE}
par_t <- data.frame(dist=c("Log-normal","Log-normal","Gamma","Gamma","Weibull","Weibull","Log-logistic","Log-logistic","Normal","Normal","Burr","Burr","Burr","Student's-t","Student's-t","Student's-t"),
par=c("meanlog","sdlog","shape","rate","shape","scale","shape","scale","mean","sd","shape1","shape2","rate","df","location","scale"),
before=c(fit_ln$estimate[[1]],fit_ln$estimate[[2]],fit_gm$estimate[[1]],fit_gm$estimate[[2]],fit_wb$estimate[[1]],fit_wb$estimate[[2]],fit_ll$estimate[[1]],fit_ll$estimate[[2]],fit_norm$estimate[[1]],fit_norm$estimate[[2]],fit_burr$estimate[[1]],fit_burr$estimate[[2]],fit_burr$estimate[[3]],fit_t$estimate[[1]],fit_t$estimate[[2]],fit_t$estimate[[3]]),

after=c(fit_tln$estimate[[1]],fit_tln$estimate[[2]],fit_tgm$estimate[[1]],fit_tgm$estimate[[2]],fit_twb$estimate[[1]],fit_twb$estimate[[2]],fit_tll$estimate[[1]],fit_tll$estimate[[2]],fit_tnorm$estimate[[1]],fit_tnorm$estimate[[2]],fit_tburr$estimate[[1]],fit_tburr$estimate[[2]],fit_tburr$estimate[[3]],fit_tt$estimate[[1]],fit_tt$estimate[[2]],fit_tt$estimate[[3]])
)
```

`r table_nums('tab_104')`
```{r,echo=FALSE,fig.cap=tab.104,ft.align='left'}
tab104 <- flextable(par_t)
tab104 <- set_header_labels(tab104, dist = "Distribution", par = "Parameter", before = "Estimate",after = "Estimate")
tab104 <- bg(tab104, bg = "#66B3FF", part = "header")
tab104 <- merge_at(tab104, i = 1, j = 3:4, part = "header")
tab104 <- add_header_row(tab104, values = c("", "", "Before", "After"), top = FALSE )
tab104 <- merge_v(tab104,j=c(1))
tab104 <- theme_box(tab104)
tab104 <- bg(tab104, bg = "#66B3FF", part = "header")
tab104 <- fontsize(x=tab104,size = 9,part = "all")
tab104 <- autofit(tab104)
tab104
```

```{r,echo=FALSE,warning=FALSE}
plot.legend <- c("Log-normal","Gamma","Weibull","Log-Logistic","Burr","Student's-t","Normal")
den <- denscomp(list(fit_tln,fit_tgm,fit_twb,fit_tll,fit_tburr,fit_tt,fit_tnorm), legendtext = plot.legend, plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))+labs(x = "log(Loss(USD))", y = "Density")
qq <- qqcomp(list(fit_tln,fit_tgm,fit_twb,fit_tll,fit_tburr,fit_tt,fit_tnorm), legendtext = plot.legend, plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))
cdf <- cdfcomp(list(fit_tln,fit_tgm,fit_twb,fit_tll,fit_tburr,fit_tt,fit_tnorm), legendtext = plot.legend, plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))+labs(caption = "*Black dots are Emperical CDF", x = "log(Loss(USD))", y = "CDF")
pp <- ppcomp(list(fit_tln,fit_tgm,fit_twb,fit_tll,fit_tburr,fit_tt,fit_tnorm), legendtext = plot.legend, plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))

qq1 <- qqcomp(list(fit_tln,fit_tgm,fit_tnorm), legendtext = c("Log-normal","Gamma","Normal"), plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))

fig55 <- ggarrange(den, ncol = 1,nrow = 1)
annotate_figure(fig55,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE}
fig56 <- ggarrange(qq, ncol = 1,nrow = 1)
annotate_figure(fig56,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
fig56a <- ggarrange(qq1, ncol = 1,nrow = 1)
annotate_figure(fig56a,fig.lab = "Fig.55a", fig.lab.face = "bold")
```


```{r,echo=FALSE,warning=FALSE}
di1 <- c("tlnorm","tgamma","tnorm")
dp1 <- list(list(meanlog=fit_tln$estimate[[1]],sdlog=fit_tln$estimate[[2]],a=H_trunc,b=Inf),
            list(shape=fit_tgm$estimate[[1]],scale=1/fit_tgm$estimate[[2]],a=H_trunc,b=Inf),
            list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]],a=H_trunc,b=Inf))
qq <- list()
for(i in 1:length(di1)){
  gg <- ggplot(data =b2 , mapping = aes(sample = Loss)) +  #Replace b1 by modeling data
  stat_qq_band(distribution = di1[i], dparams = dp1[[i]],conf = 0.95) + # bandtype by default is "pointwise"
  stat_qq_line(distribution = di1[i], dparams = dp1[[i]]) +
  stat_qq_point(distribution = di1[i], dparams = dp1[[i]])+ 
  labs(x = "Theoretical Quantiles", y = "Sample Quantiles")
  qq[[i]] <- gg
}

fig56b <- ggarrange(qq[[1]], ncol = 1,nrow = 1)
annotate_figure(fig56b,top = text_grob("Truncated Log-Normal QQ-plot 95% Confidence Interval ", color = "black", face = "bold", size = 10),fig.lab = "Fig.55b", fig.lab.face = "bold")
fig56c <- ggarrange(qq[[2]], ncol = 1,nrow = 1)
annotate_figure(fig56c,top = text_grob("Truncated Gamma QQ-plot 95% Confidence Interval ", color = "black", face = "bold", size = 10),fig.lab = "Fig.55c", fig.lab.face = "bold")
fig56d <- ggarrange(qq[[3]], ncol = 1,nrow = 1)
annotate_figure(fig56d,top = text_grob("Truncated Normal QQ-plot 95% Confidence Interval ", color = "black", face = "bold", size = 10),fig.lab = "Fig.55d", fig.lab.face = "bold")
```


\newline

```{r,echo=FALSE}
fig57 <- ggarrange(cdf, ncol = 1,nrow = 1)
annotate_figure(fig57,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE}
fig58 <- ggarrange(pp, ncol = 1,nrow = 1)
annotate_figure(fig58,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

```{r,echo=FALSE,warning=FALSE, warning=FALSE, include=FALSE}
set.seed(100)
h1 <- hist(b2$Loss,main = "Truncated Loss")

breaks_cdf <- plnormTrunc(h1$breaks, meanlog = fit_tln$estimate[[1]], sdlog = fit_tln$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tln <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tln <- truncgof::ks.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
ad_tln <- truncgof::ad.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
ad2_tln <- truncgof::ad2.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
adup_tln <- truncgof::adup.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
ad2up_tln <- truncgof::ad2up.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
cvm_tln <- truncgof::w2.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
kp_tln <- truncgof::v.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)

breaks_cdf <- TruncatedDistributions::ptgamma(h1$breaks,shape = fit_tgm$estimate[[1]],scale = 1/fit_tgm$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tgm <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tgm <- truncgof::ks.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
ad_tgm <- truncgof::ad.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
ad2_tgm <- truncgof::ad2.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
adup_tgm <- truncgof::adup.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
ad2up_tgm <- truncgof::ad2up.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
cvm_tgm <- truncgof::w2.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
kp_tgm <- truncgof::v.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)

breaks_cdf <- TruncatedDistributions::ptweibull(q = h1$breaks,shape = fit_twb$estimate[[1]], scale = fit_twb$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_twb <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_twb <- truncgof::ks.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
ad_twb <- truncgof::ad.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
ad2_twb <- truncgof::ad2.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
adup_twb <- truncgof::adup.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
ad2up_twb <- truncgof::ad2up.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
cvm_twb <- truncgof::w2.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
kp_twb <- truncgof::v.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)

breaks_cdf <- pllogis(q = h1$breaks, shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tll <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tll <- truncgof::ks.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
ad_tll <- truncgof::ad.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
ad2_tll <- truncgof::ad2.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
adup_tll <- truncgof::adup.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
ad2up_tll <- truncgof::ad2up.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
cvm_tll <- truncgof::w2.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
kp_tll <- truncgof::v.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)

breaks_cdf <- TruncatedDistributions::ptnorm(q = h1$breaks,mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tnorm <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tnorm <- truncgof::ks.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
ad_tnorm <- truncgof::ad.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
ad2_tnorm <- truncgof::ad2.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
adup_tnorm <- truncgof::adup.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
ad2up_tnorm <- truncgof::ad2up.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
cvm_tnorm <- truncgof::w2.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
kp_tnorm <- truncgof::v.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)

breaks_cdf <- pburr(q = h1$breaks,shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tburr <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tburr <- truncgof::ks.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
ad_tburr <- truncgof::ad.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
ad2_tburr <- truncgof::ad2.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
adup_tburr <- truncgof::adup.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
ad2up_tburr <- truncgof::ad2up.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
cvm_tburr <- truncgof::w2.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
kp_tburr <- truncgof::v.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)

breaks_cdf <- pt.scaled(q = h1$breaks,df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tt <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tt <- truncgof::ks.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
ad_tt <- truncgof::ad.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
ad2_tt <- truncgof::ad2.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
adup_tt <- truncgof::adup.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
ad2up_tt <- truncgof::ad2up.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
cvm_tt <- truncgof::w2.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
kp_tt <- truncgof::v.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)

```

```{r,echo=FALSE}
goft <- round_df(data.frame(ChiSq=c(a_tln$p.value,a_tgm$p.value,a_twb$p.value,a_tll$p.value,a_tnorm$p.value,a_tburr$p.value,a_tt$p.value), KS=c(ks_tln$p.value,ks_tgm$p.value,ks_twb$p.value,ks_tll$p.value,ks_tnorm$p.value,ks_tburr$p.value,ks_tt$p.value), AD=c(ad_tln$p.value,ad_tgm$p.value,ad_twb$p.value,ad_tll$p.value,ad_tnorm$p.value,ad_tburr$p.value,ad_tt$p.value), AD2=c(ad2_tln$p.value,ad2_tgm$p.value,ad2_twb$p.value,ad2_tll$p.value,ad2_tnorm$p.value,ad2_tburr$p.value,ad2_tt$p.value), AD_Up=c(adup_tln$p.value,adup_tgm$p.value,adup_twb$p.value,adup_tll$p.value,adup_tnorm$p.value,adup_tburr$p.value,adup_tt$p.value), AD2Up=c(ad2up_tln$p.value,ad2up_tgm$p.value,ad2up_twb$p.value,ad2up_tll$p.value,ad2up_tnorm$p.value,ad2up_tburr$p.value,ad2up_tt$p.value), CVM=c(cvm_tln$p.value,cvm_tgm$p.value,cvm_twb$p.value,cvm_tll$p.value,cvm_tnorm$p.value,cvm_tburr$p.value,cvm_tt$p.value), KP=c(kp_tln$p.value,kp_tgm$p.value,kp_twb$p.value,kp_tll$p.value,kp_tnorm$p.value,kp_tburr$p.value,kp_tt$p.value)),2)
```

\newline
```{r,echo=FALSE}
gofc <- round_df(data.frame(Loglik =c(fit_tln$loglik,fit_tgm$loglik,fit_twb$loglik,fit_tll$loglik,fit_tnorm$loglik,fit_tburr$loglik,fit_tt$loglik), AIC=c(fit_tln$aic,fit_tgm$aic,fit_twb$aic,fit_tll$aic,fit_tnorm$aic,fit_tburr$aic,fit_tt$aic), BIC=c(fit_tln$bic,fit_tgm$bic,fit_twb$bic,fit_tll$bic,fit_tnorm$bic,fit_tburr$bic,fit_tt$bic)),2)
```

`r table_nums('tab_111')`
```{r,echo=FALSE,fig.cap=tab.111,ft.align='left'}
goft <- cbind(Distribution=c("Log-normal","Gamma","Weibull","Log-logistic","Normal","Burr","Student's-t"),goft)
tab111 <- flextable(goft,theme_fun = theme_booktabs)
tab111 <- bg(tab111, bg = "#66B3FF", part = "header")
tab111 <- color(tab111, ~ ChiSq >= 0.05 , ~ChiSq,color = "green")
tab111 <- color(tab111, ~ KS >= 0.05 , ~KS,color = "green")
tab111 <- color(tab111, ~ AD >= 0.05 , ~AD,color = "green")
tab111 <- color(tab111, ~ AD2 >= 0.05 , ~AD2,color = "green")
tab111 <- color(tab111, ~ AD_Up >= 0.05 , ~AD_Up,color = "green")
tab111 <- color(tab111, ~ AD2Up >= 0.05 , ~AD2Up,color = "green")
tab111 <- color(tab111, ~ CVM >= 0.05 , ~CVM,color = "green")
tab111 <- color(tab111, ~ KP >= 0.05 , ~KP,color = "green")
tab111 <- color(tab111, ~ (ChiSq >= 0.01 & ChiSq < 0.05) , ~ChiSq,color = "orange")
tab111 <- color(tab111, ~ (KS >= 0.01 & KS < 0.05) , ~KS,color = "orange")
tab111 <- color(tab111, ~ (AD >= 0.01 & AD < 0.05) , ~AD,color = "orange")
tab111 <- color(tab111, ~ (AD2 >= 0.01 & AD2 < 0.05) , ~AD2,color = "orange")
tab111 <- color(tab111, ~ (AD_Up >= 0.01 & AD_Up < 0.05) , ~AD_Up,color = "orange")
tab111 <- color(tab111, ~ (AD2Up >= 0.01 & AD2Up < 0.05) , ~AD2Up,color = "orange")
tab111 <- color(tab111, ~ (CVM >= 0.01 & CVM < 0.05) , ~CVM,color = "orange")
tab111 <- color(tab111, ~ (KP >= 0.01 & KP < 0.05) , ~KP,color = "orange")
tab111 <- color(tab111, ~ (ChiSq < 0.01 ) , ~ChiSq,color = "red")
tab111 <- color(tab111, ~ (KS < 0.01 ) , ~KS,color = "red")
tab111 <- color(tab111, ~ (AD < 0.01 ) , ~AD,color = "red")
tab111 <- color(tab111, ~ (AD2 < 0.01 ) , ~AD2,color = "red")
tab111 <- color(tab111, ~ (AD_Up < 0.01) , ~AD_Up,color = "red")
tab111 <- color(tab111, ~ (AD2Up < 0.01) , ~AD2Up,color = "red")
tab111 <- color(tab111, ~ (CVM < 0.01) , ~CVM,color = "red")
tab111 <- color(tab111, ~ (KP < 0.01) , ~KP,color = "red")
colkeys = c("ChiSq","KS","AD","AD2","AD_Up","AD2Up","CVM","KP")
tab111 <- colformat_num(x = tab111, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab111 <- add_footer_lines(tab111,values = c("p-value greater than or equal to 0.05 is highlighted in green","p-value less than 0.05 and greater than or equal to 0.01 is highlighted in amber","p-value less than 0.01 is highlighted in red"),top=FALSE)
tab111 <- fontsize(x=tab111,size = 6,part = "footer")
tab111 <- autofit(tab111)
tab111
```
\newline
`r table_nums('tab_112')`
```{r,echo=FALSE,fig.cap=tab.112,ft.align='left'}
gofc <- cbind(Distribution=c("Log-normal","Gamma","Weibull","Log-logistic","Normal","Burr","Student's-t"),gofc)
tab112 <- flextable(gofc,theme_fun = theme_booktabs)
tab112 <- bg(tab112, bg = "#66B3FF", part = "header")
colkeys = c("Loglik","AIC","BIC")
tab112 <- colformat_num(x = tab112, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab112 <- autofit(tab112)
tab112

```


**Conclusion**


#### 4.3.2 ORX Insurer Member

<!-- Model fitting on ORX Insurer Member Data (after 2003Q1) with Log Transformation after Truncation  -->

##### Summary

```{r,warning=FALSE,echo=FALSE}
ORX_IM_data <- Loss[which(Loss$Dataset == "ORX Insurer Member"),]
k1 <- length(which(is.na(ORX_IM_data$Loss)))
if(k1>0){ORX_IM_data <- ORX_IM_data[-which(is.na(ORX_IM_data$Loss)),]}
k2 <- length(which(ORX_IM_data$Loss == 0))
if(k2>0){ORX_IM_data <- ORX_IM_data[-which(ORX_IM_data$Loss == 0),]}
ORX_IM_data$Loss <- log(ORX_IM_data$Loss)
over_all_summ <- eda(ORX_IM_data,k1,k2)
```

`r table_nums('tab_113')`
```{r,echo=FALSE,fig.cap=tab.113,ft.align='left'}
tab113 <- flextable(over_all_summ[,2:7])
tab113 <- bg(tab113, bg = "#66B3FF", part = "header")
colkeys = c("Freqency Observations","NA","0's","Severity Observations")
tab113 <- colformat_num(x = tab113, col_keys = colkeys,big.mark=",", digits = 0, na_str = "N/A")
tab113 <- flextable::align(tab113,align="center", part = "all" )
tab113 <- autofit(tab113)
tab113
```

NA's and zeros are omitted from the analysis

\newline

`r table_nums('tab_114')`
```{r,echo=FALSE,fig.cap=tab.114,ft.align='left'}
tab114 <- flextable(over_all_summ[,8:14])
tab114 <- bg(tab114, bg = "#66B3FF", part = "header")
colkeys = c("Min","Max","Mean","Median","Std. dev","Skewness","Kurtosis")
tab114 <- colformat_num(
  x = tab114, col_keys = colkeys,
  big.mark=",", digits = 2, na_str = "N/A")
tab114 <- autofit(tab114)
tab114
```

\newline

`r table_nums('tab_115')`
```{r,echo=FALSE,fig.cap=tab.115,ft.align='left'}
tab115 <- flextable(over_all_summ[,15:21],theme_fun = theme_booktabs)
tab115 <- bg(tab115, bg = "#66B3FF", part = "header")
colkeys = c("25th pct","50th pct","75th pct","95th pct","97.5th pct","99th pct","99.9th pct")
tab115 <- colformat_num(x = tab115, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab115 <- fontsize(x=tab115,size = 10)
tab115 <- autofit(tab115)
tab115
```

\newline
```{r,echo=FALSE, message=FALSE}
x1 <- ggplot(data = ORX_IM_data, aes(x=Log(Loss(USD)))) +
  geom_histogram(data = as.data.frame(ORX_IM_data$Loss),aes(x=ORX_IM_data$Loss),color="black",fill="orange")+labs(title="Histogram of Log Loss(USD)", y = "Count", x="Log(Loss(USD))")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
x2 <- ggplot(data=ORX_IM_data, aes(Loss)) + stat_ecdf(geom = "point")+labs(title="Empirical Cumulative \n Distribution Function", y = "CDF", x="Log(Loss(USD))")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
fig59 <- ggarrange(x1,x2,ncol = 2,nrow = 1)
annotate_figure(fig59,text_grob("Before Truncation", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

```{r,echo=FALSE, message=FALSE}
H_trunc <- 11.2
b2 <- ORX_IM_data[ORX_IM_data$Loss > H_trunc,]
x1 <- ggplot(data = b2, aes(x=Log(Loss(USD)))) +
  geom_histogram(data = as.data.frame(b2$Loss),aes(x=b2$Loss),color="black",fill="orange")+labs(title="Histogram of Log Loss(USD)", y = "Count", x="Log(Loss(USD))")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
x2 <- ggplot(data=b2, aes(Loss)) + stat_ecdf(geom = "point")+labs(title="Empirical Cumulative \n Distribution Function", y = "CDF", x="Log(Loss(USD))")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
 
fig60 <- ggarrange(x1,x2,ncol = 2,nrow = 1)
annotate_figure(fig60,text_grob("After Truncation", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")

usd <- paste0("$",round(exp(H_trunc),0))
```

**Truncation Point**



```{r, echo=FALSE,warning=FALSE}
trunc_summ <- data.frame(matrix(0, nrow = 1, ncol = 6))
colnames(trunc_summ) <- c("Truncation Point","Data Points before Truncation","Data Points after Truncation","Truncated Data Points","Max Loss of Truncated Data","Average Loss of Truncated Data")
trunc_summ[1,1] <- paste0(round(H_trunc,2)," ($",format(round(exp(H_trunc),2),big.mark=","),")")
trunc_summ[1,2] <- nrow(ORX_IM_data)
trunc_summ[1,3] <- nrow(b2)
trunc_summ[1,4] <- paste0(nrow(ORX_IM_data) - nrow(b2)," (",round((1-nrow(b2)/nrow(ORX_IM_data))*100,2),"%)")
trunc_summ[1,5] <- format(round(exp(max(ORX_IM_data$Loss[which(ORX_IM_data$Loss <= H_trunc)])),2),big.mark = ",")
trunc_summ[1,6] <- format(round(mean(exp(ORX_IM_data$Loss[which(ORX_IM_data$Loss <= H_trunc)])),2),big.mark=",")
```

\newline

`r table_nums('tab_116')`
```{r,echo=FALSE,fig.cap=tab.116,ft.align='left'}
tab116 <- flextable(trunc_summ)
tab116 <- bg(tab116, bg = "#66B3FF", part = "header")
colkeys =c("Max Loss of Truncated Data","Average Loss of Truncated Data")
tab116 <- colformat_num(x = tab116, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
colkeys =c("Data Points before Truncation","Data Points after Truncation")
tab116 <- colformat_num(x = tab116, col_keys = colkeys,big.mark=",", digits = 0, na_str = "N/A")
tab116 <- align_text_col(tab116,align="center")
tab116 <- fontsize(tab116, part = "header", size = 10) 
tab116 <- fontsize(x=tab116,size = 10)
tab116 <- autofit(tab116)
tab116
```

```{r, echo=FALSE,warning=FALSE,include=FALSE}
fit_ln <- fitdist(ORX_IM_data$Loss, "lnorm",method = "mle")
fit_gm <- fitdist(ORX_IM_data$Loss,"gamma",method = "mle")
fit_wb <- fitdist(ORX_IM_data$Loss,"weibull",method = "mle")
fit_ll <- fitdist(ORX_IM_data$Loss,"llogis",method="mle")
fit_burr <- fitdist(ORX_IM_data$Loss, "burr", start = list(shape1 = 0.2, shape2 = 1, rate = 1))
fit_t <- fitdist(ORX_IM_data$Loss, "t.scaled", start=list(df=2, mean = mean(ORX_IM_data$Loss),sd = sd(ORX_IM_data$Loss)))
fit_norm <- fitdist(ORX_IM_data$Loss, "norm")
```

```{r, warning=FALSE, echo=FALSE}
dtrunc_ln <- function(x, meanlog, sdlog)
  dtrunc(x, "lnorm", a = H_trunc, b = Inf, meanlog = meanlog, sdlog = sdlog)
ptrunc_ln <- function(x, meanlog, sdlog)
  ptrunc(x, "lnorm", a = H_trunc, b = Inf, meanlog = meanlog, sdlog = sdlog)
qtrunc_ln <- function(x, meanlog, sdlog)
  qtrunc(x, "lnorm", a = H_trunc, b = Inf, meanlog = meanlog, sdlog = sdlog)

dtrunc_gm <- function(x, shape, rate)
  dtrunc(x, "gamma", a = H_trunc, b = Inf, shape = shape, rate = rate)
ptrunc_gm <- function(x, shape, rate)
  ptrunc(x, "gamma", a = H_trunc, b = Inf, shape = shape, rate = rate)
qtrunc_gm <- function(x, shape, rate)
  qtrunc(x, "gamma", a = H_trunc, b = Inf, shape = shape, rate = rate)

dtrunc_wb <- function(x, shape, scale)
  dtrunc(x, "weibull", a = H_trunc, b = Inf, shape = shape, scale = scale)
ptrunc_wb <- function(x, shape, scale)
  ptrunc(x, "weibull", a = H_trunc, b = Inf, shape = shape, scale = scale)
qtrunc_wb <- function(x, shape, scale)
  qtrunc(x, "weibull", a = H_trunc, b = Inf, shape = shape, scale =scale)

dtrunc_ll <- function(x, shape, scale)
  dtrunc(x, "llogis", a = H_trunc, b = Inf, shape = shape, scale =scale)
ptrunc_ll <- function(x, shape, scale)
  ptrunc(x, "llogis", a = H_trunc, b = Inf, shape = shape, scale = scale)
qtrunc_ll <- function(x, shape, scale)
  qtrunc(x, "llogis", a = H_trunc, b = Inf, shape = shape, scale = scale)

dtrunc_burr <- function(x, shape1, shape2, rate)
  dtrunc(x, "burr", a = H_trunc, b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)
ptrunc_burr <- function(x, shape1, shape2, rate)
  ptrunc(x, "burr", a = H_trunc, b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)
qtrunc_burr <- function(x, shape1, shape2, rate)
  qtrunc(x, "burr", a = H_trunc, b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)

dtrunc_t <- function(x, df, mean, sd)
  dtrunc(x, "t.scaled", a = H_trunc, b = Inf, df = df, mean = mean, sd =sd)
ptrunc_t <- function(x, df, mean, sd)
  ptrunc(x, "t.scaled", a = H_trunc, b = Inf, df = df, mean = mean, sd =sd)
qtrunc_t <- function(x, df, mean, sd)
  qtrunc(x, "t.scaled", a = H_trunc, b = Inf, df = df, mean = mean, sd =sd)

dtrunc_norm <- function(x, mean, sd)
  dtrunc(x, "norm", a = H_trunc, b = Inf, mean = mean, sd = sd)
ptrunc_norm <- function(x, mean, sd)
  ptrunc(x, "norm", a = H_trunc, b = Inf, mean = mean, sd = sd)
qtrunc_norm <- function(x, mean, sd)
  qtrunc(x, "norm", a = H_trunc, b = Inf, mean = mean, sd = sd)

fit_tln <- fitdistrplus::fitdist(b2$Loss, "trunc_ln",start = list(meanlog = 2, sdlog = 0.1))
fit_tgm <- fitdistrplus::fitdist(b2$Loss,"trunc_gm",start = list(shape = 6, rate = 0.001))
fit_twb <- fitdistrplus::fitdist(b2$Loss,"trunc_wb",start = list(shape = 1, scale = 1))
fit_tll <- fitdistrplus::fitdist(b2$Loss,"trunc_ll",start = list(shape = 8, scale = 1))
fit_tburr <- fitdistrplus::fitdist(b2$Loss, "trunc_burr", start = list(shape1 = 2, shape2 = 4, rate =1.5))
fit_tt <- fitdistrplus::fitdist(b2$Loss, "trunc_t", start=list(df=2, mean = mean(b2$Loss),sd = sd(b2$Loss)))
fit_tnorm <- fitdistrplus::fitdist(b2$Loss, "trunc_norm", start = list(mean = 10, sd = 1))
```

##### Estimated Parameters
```{r,echo=FALSE}
par_t <- data.frame(dist=c("Log-normal","Log-normal","Gamma","Gamma","Weibull","Weibull","Log-logistic","Log-logistic","Normal","Normal","Burr","Burr","Burr","Student's-t","Student's-t","Student's-t"),
par=c("meanlog","sdlog","shape","rate","shape","scale","shape","scale","mean","sd","shape1","shape2","rate","df","location","scale"),
before=c(fit_ln$estimate[[1]],fit_ln$estimate[[2]],fit_gm$estimate[[1]],fit_gm$estimate[[2]],fit_wb$estimate[[1]],fit_wb$estimate[[2]],fit_ll$estimate[[1]],fit_ll$estimate[[2]],fit_norm$estimate[[1]],fit_norm$estimate[[2]],fit_burr$estimate[[1]],fit_burr$estimate[[2]],fit_burr$estimate[[3]],fit_t$estimate[[1]],fit_t$estimate[[2]],fit_t$estimate[[3]]),

after=c(fit_tln$estimate[[1]],fit_tln$estimate[[2]],fit_tgm$estimate[[1]],fit_tgm$estimate[[2]],fit_twb$estimate[[1]],fit_twb$estimate[[2]],fit_tll$estimate[[1]],fit_tll$estimate[[2]],fit_tnorm$estimate[[1]],fit_tnorm$estimate[[2]],fit_tburr$estimate[[1]],fit_tburr$estimate[[2]],fit_tburr$estimate[[3]],fit_tt$estimate[[1]],fit_tt$estimate[[2]],fit_tt$estimate[[3]]))
```

`r table_nums('tab_117')`
```{r,echo=FALSE,fig.cap=tab.117,ft.align='left'}
tab117 <- flextable(par_t)
tab117 <- set_header_labels(tab117, dist = "Distribution", par = "Parameter", before = "Estimate",after = "Estimate")
tab117 <- bg(tab117, bg = "#66B3FF", part = "header")
tab117 <- merge_at(tab117, i = 1, j = 3:4, part = "header")
tab117 <- add_header_row(tab117, values = c("", "", "Before", "After"), top = FALSE )
tab117 <- merge_v(tab117,j=c(1))
tab117 <- theme_box(tab117)
tab117 <- bg(tab117, bg = "#66B3FF", part = "header")
tab117 <- fontsize(x=tab117,size = 9,part = "all")
tab117 <- autofit(tab117)
tab117
```


```{r,echo=FALSE,warning=FALSE}
plot.legend <- c("Log-normal","Gamma","Weibull","Log-Logistic","Burr","Student's-t","Normal")

den <- denscomp(list(fit_tln,fit_tgm,fit_twb,fit_tll,fit_tburr,fit_tt,fit_tnorm), legendtext = plot.legend, plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))+labs(x = "log(Loss(USD))", y = "Density")
qq <- qqcomp(list(fit_tln,fit_tgm,fit_twb,fit_tll,fit_tburr,fit_tt,fit_tnorm), legendtext = plot.legend, plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))
cdf <- cdfcomp(list(fit_tln,fit_tgm,fit_twb,fit_tll,fit_tburr,fit_tt,fit_tnorm), legendtext = plot.legend, plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))+labs(caption = "*Black dots are Emperical CDF", x = "log(Loss(USD))", y = "CDF")
pp <- ppcomp(list(fit_tln,fit_tgm,fit_twb,fit_tll,fit_tburr,fit_tt,fit_tnorm), legendtext = plot.legend, plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))

qq1 <- qqcomp(list(fit_tln,fit_tgm,fit_twb,fit_tnorm), legendtext = c("Log-normal","Gamma","Weibull","Normal"), plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))

fig61 <- ggarrange(den, ncol = 1,nrow = 1)
annotate_figure(fig61,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE}
fig62 <- ggarrange(qq, ncol = 1,nrow = 1)
annotate_figure(fig62,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
fig62a <- ggarrange(qq1, ncol = 1,nrow = 1)
annotate_figure(fig62a,fig.lab = "Fig. 61a", fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE,warning=FALSE}
di1 <- c("lnormTrunc","tgamma","tweibull","truncnorm")
dp1 <- list(list(meanlog=fit_tln$estimate[[1]],sdlog=fit_tln$estimate[[2]],min=H_trunc,max=Inf),
            list(shape=fit_tgm$estimate[[1]],scale=1/fit_tgm$estimate[[2]],a=H_trunc,b=Inf),
            list(shape=fit_twb$estimate[[1]],scale=fit_twb$estimate[[2]],a=H_trunc,b=Inf),
            list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]],a=H_trunc,b=Inf))
qq <- list()
for(i in 1:length(di1)){
  gg <- ggplot(data =b2 , mapping = aes(sample = Loss)) +  #Replace b1 by modeling data
  stat_qq_band(distribution = di1[i], dparams = dp1[[i]],conf = 0.95) + # bandtype by default is "pointwise"
  stat_qq_line(distribution = di1[i], dparams = dp1[[i]]) +
  stat_qq_point(distribution = di1[i], dparams = dp1[[i]])+
  labs(x = "Theoretical Quantiles", y = "Sample Quantiles")
  qq[[i]] <- gg
}
fig61b <- ggarrange(qq[[1]], ncol = 1,nrow = 1)
annotate_figure(fig61b,top = text_grob("Truncated Log-normal QQ-plot 95% Confidence Interval ", color = "black", face = "bold", size = 10),fig.lab = "Fig.61b", fig.lab.face = "bold")
fig61c <- ggarrange(qq[[2]], ncol = 1,nrow = 1)
annotate_figure(fig61c,top = text_grob("Truncated Gamma QQ-plot 95% Confidence Interval ", color = "black", face = "bold", size = 10),fig.lab = "Fig.61c", fig.lab.face = "bold")
fig61d <- ggarrange(qq[[3]], ncol = 1,nrow = 1)
annotate_figure(fig61d,top = text_grob("Truncated Weibull QQ-plot 95% Confidence Interval ", color = "black", face = "bold", size = 10),fig.lab = "Fig.61d", fig.lab.face = "bold")
fig61e <- ggarrange(qq[[4]], ncol = 1,nrow = 1)
annotate_figure(fig61e,top = text_grob("Truncated Normal QQ-plot 95% Confidence Interval ", color = "black", face = "bold", size = 10),fig.lab = "Fig.61e", fig.lab.face = "bold")
```


```{r,echo=FALSE}
fig63 <- ggarrange(cdf, ncol = 1,nrow = 1)
annotate_figure(fig63,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE}
fig64 <- ggarrange(pp, ncol = 1,nrow = 1)
annotate_figure(fig64,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

```{r,echo=FALSE,warning=FALSE, warning=FALSE, include=FALSE}
set.seed(100)
h1=hist(b2$Loss,main = "Truncated Loss")

breaks_cdf <- plnormTrunc(h1$breaks, meanlog = fit_tln$estimate[[1]], sdlog = fit_tln$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tln <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tln <- truncgof::ks.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
ad_tln <- truncgof::ad.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
ad2_tln <- truncgof::ad2.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
adup_tln <- truncgof::adup.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
ad2up_tln <- truncgof::ad2up.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
cvm_tln <- truncgof::w2.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
kp_tln <- truncgof::v.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)

breaks_cdf <- TruncatedDistributions::ptgamma(h1$breaks,shape = fit_tgm$estimate[[1]],scale = 1/fit_tgm$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tgm <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tgm <- truncgof::ks.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
ad_tgm <- truncgof::ad.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
ad2_tgm <- truncgof::ad2.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
adup_tgm <- truncgof::adup.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
ad2up_tgm <- truncgof::ad2up.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
cvm_tgm <- truncgof::w2.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
kp_tgm <- truncgof::v.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)

breaks_cdf <- TruncatedDistributions::ptweibull(q = h1$breaks,shape = fit_twb$estimate[[1]], scale = fit_twb$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_twb <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_twb <- truncgof::ks.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
ad_twb <- truncgof::ad.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
ad2_twb <- truncgof::ad2.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
adup_twb <- truncgof::adup.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
ad2up_twb <- truncgof::ad2up.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
cvm_twb <- truncgof::w2.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
kp_twb <- truncgof::v.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)

breaks_cdf <- pllogis(q = h1$breaks, shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tll <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tll <- truncgof::ks.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
ad_tll <- truncgof::ad.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
ad2_tll <- truncgof::ad2.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
adup_tll <- truncgof::adup.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
ad2up_tll <- truncgof::ad2up.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
cvm_tll <- truncgof::w2.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
kp_tll <- truncgof::v.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)

breaks_cdf <- TruncatedDistributions::ptnorm(q = h1$breaks,mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tnorm <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tnorm <- truncgof::ks.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
ad_tnorm <- truncgof::ad.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
ad2_tnorm <- truncgof::ad2.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
adup_tnorm <- truncgof::adup.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
ad2up_tnorm <- truncgof::ad2up.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
cvm_tnorm <- truncgof::w2.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
kp_tnorm <- truncgof::v.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)

breaks_cdf <- pburr(q = h1$breaks,shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tburr <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tburr <- truncgof::ks.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
ad_tburr <- truncgof::ad.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
ad2_tburr <- truncgof::ad2.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
adup_tburr <- truncgof::adup.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
ad2up_tburr <- truncgof::ad2up.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
cvm_tburr <- truncgof::w2.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
kp_tburr <- truncgof::v.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)

breaks_cdf <- pt.scaled(q = h1$breaks,df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tt <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tt <- truncgof::ks.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
ad_tt <- truncgof::ad.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
ad2_tt <- truncgof::ad2.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
adup_tt <- truncgof::adup.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
ad2up_tt <- truncgof::ad2up.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
cvm_tt <- truncgof::w2.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
kp_tt <- truncgof::v.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)

```

```{r,echo=FALSE}
goft <- round_df(data.frame(ChiSq=c(a_tln$p.value,a_tgm$p.value,a_twb$p.value,a_tll$p.value,a_tnorm$p.value,a_tburr$p.value,a_tt$p.value), KS=c(ks_tln$p.value,ks_tgm$p.value,ks_twb$p.value,ks_tll$p.value,ks_tnorm$p.value,ks_tburr$p.value,ks_tt$p.value), AD=c(ad_tln$p.value,ad_tgm$p.value,ad_twb$p.value,ad_tll$p.value,ad_tnorm$p.value,ad_tburr$p.value,ad_tt$p.value), AD2=c(ad2_tln$p.value,ad2_tgm$p.value,ad2_twb$p.value,ad2_tll$p.value,ad2_tnorm$p.value,ad2_tburr$p.value,ad2_tt$p.value), AD_Up=c(adup_tln$p.value,adup_tgm$p.value,adup_twb$p.value,adup_tll$p.value,adup_tnorm$p.value,adup_tburr$p.value,adup_tt$p.value), AD2Up=c(ad2up_tln$p.value,ad2up_tgm$p.value,ad2up_twb$p.value,ad2up_tll$p.value,ad2up_tnorm$p.value,ad2up_tburr$p.value,ad2up_tt$p.value), CVM=c(cvm_tln$p.value,cvm_tgm$p.value,cvm_twb$p.value,cvm_tll$p.value,cvm_tnorm$p.value,cvm_tburr$p.value,cvm_tt$p.value), KP=c(kp_tln$p.value,kp_tgm$p.value,kp_twb$p.value,kp_tll$p.value,kp_tnorm$p.value,kp_tburr$p.value,kp_tt$p.value)),2)
```

\newline
```{r,echo=FALSE}
gofc <- round_df(data.frame(Loglik =c(fit_tln$loglik,fit_tgm$loglik,fit_twb$loglik,fit_tll$loglik,fit_tnorm$loglik,fit_tburr$loglik,fit_tt$loglik), AIC=c(fit_tln$aic,fit_tgm$aic,fit_twb$aic,fit_tll$aic,fit_tnorm$aic,fit_tburr$aic,fit_tt$aic), BIC=c(fit_tln$bic,fit_tgm$bic,fit_twb$bic,fit_tll$bic,fit_tnorm$bic,fit_tburr$bic,fit_tt$bic)),2)
```

`r table_nums('tab_124')`
```{r,echo=FALSE,fig.cap=tab.124,ft.align='left'}
goft <- cbind(Distribution=c("Log-normal","Gamma","Weibull","Log-logistic","Normal","Burr","Student's-t"),goft)
tab124 <- flextable(goft,theme_fun = theme_booktabs)
tab124 <- bg(tab124, bg = "#66B3FF", part = "header")
tab124 <- color(tab124, ~ ChiSq >= 0.05 , ~ChiSq,color = "green")
tab124 <- color(tab124, ~ KS >= 0.05 , ~KS,color = "green")
tab124 <- color(tab124, ~ AD >= 0.05 , ~AD,color = "green")
tab124 <- color(tab124, ~ AD2 >= 0.05 , ~AD2,color = "green")
tab124 <- color(tab124, ~ AD_Up >= 0.05 , ~AD_Up,color = "green")
tab124 <- color(tab124, ~ AD2Up >= 0.05 , ~AD2Up,color = "green")
tab124 <- color(tab124, ~ CVM >= 0.05 , ~CVM,color = "green")
tab124 <- color(tab124, ~ KP >= 0.05 , ~KP,color = "green")
tab124 <- color(tab124, ~ (ChiSq >= 0.01 & ChiSq < 0.05) , ~ChiSq,color = "orange")
tab124 <- color(tab124, ~ (KS >= 0.01 & KS < 0.05) , ~KS,color = "orange")
tab124 <- color(tab124, ~ (AD >= 0.01 & AD < 0.05) , ~AD,color = "orange")
tab124 <- color(tab124, ~ (AD2 >= 0.01 & AD2 < 0.05) , ~AD2,color = "orange")
tab124 <- color(tab124, ~ (AD_Up >= 0.01 & AD_Up < 0.05) , ~AD_Up,color = "orange")
tab124 <- color(tab124, ~ (AD2Up >= 0.01 & AD2Up < 0.05) , ~AD2Up,color = "orange")
tab124 <- color(tab124, ~ (CVM >= 0.01 & CVM < 0.05) , ~CVM,color = "orange")
tab124 <- color(tab124, ~ (KP >= 0.01 & KP < 0.05) , ~KP,color = "orange")
tab124 <- color(tab124, ~ (ChiSq < 0.01 ) , ~ChiSq,color = "red")
tab124 <- color(tab124, ~ (KS < 0.01 ) , ~KS,color = "red")
tab124 <- color(tab124, ~ (AD < 0.01 ) , ~AD,color = "red")
tab124 <- color(tab124, ~ (AD2 < 0.01 ) , ~AD2,color = "red")
tab124 <- color(tab124, ~ (AD_Up < 0.01) , ~AD_Up,color = "red")
tab124 <- color(tab124, ~ (AD2Up < 0.01) , ~AD2Up,color = "red")
tab124 <- color(tab124, ~ (CVM < 0.01) , ~CVM,color = "red")
tab124 <- color(tab124, ~ (KP < 0.01) , ~KP,color = "red")
colkeys = c("ChiSq","KS","AD","AD2","AD_Up","AD2Up","CVM","KP")
tab124 <- colformat_num(x = tab124, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab124 <- add_footer_lines(tab124,values = c("p-value greater than or equal to 0.05 is highlighted in green","p-value less than 0.05 and greater than or equal to 0.01 is highlighted in amber","p-value less than 0.01 is highlighted in red"),top=FALSE)
tab124 <- fontsize(x=tab124,size = 6,part = "footer")
tab124 <- autofit(tab124)
tab124
```

\newline

`r table_nums('tab_125')`
```{r,echo=FALSE,fig.cap=tab.125,ft.align='left'}
gofc <- cbind(Distribution=c("Log-normal","Gamma","Weibull","Log-logistic","Normal","Burr","Student's-t"),gofc)
tab125 <- flextable(gofc,theme_fun = theme_booktabs)
tab125 <- bg(tab125, bg = "#66B3FF", part = "header")
colkeys = c("Loglik","AIC","BIC")
tab125 <- colformat_num(x = tab125, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab125 <- autofit(tab125)
tab125
```



**Conclusion**



#### 4.3.3 ORX News

<!-- Model fitting on ORX News Data (after 2003Q1) with Log Transformation after Truncation  -->

##### Summary

```{r,warning=FALSE,echo=FALSE}

ORX_News_data <- Loss[which(Loss$Dataset == "ORX News"),]
k1 <- length(which(is.na(ORX_News_data$Loss)))
if(k1>0){ORX_News_data <- ORX_News_data[-which(is.na(ORX_News_data$Loss)),]}
k2 <- length(which(ORX_News_data$Loss == 0))
if(k2>0){ORX_News_data <- ORX_News_data[-which(ORX_News_data$Loss == 0),]}
ORX_News_data$Loss <- log(ORX_News_data$Loss)
over_all_summ <- eda(ORX_News_data,k1,k2)

```

`r table_nums('tab_126')`
```{r,echo=FALSE,fig.cap=tab.126,ft.align='left'}
tab126 <- flextable(over_all_summ[,2:7])
tab126 <- bg(tab126, bg = "#66B3FF", part = "header")
colkeys = c("Freqency Observations","NA","0's","Severity Observations")
tab126 <- colformat_num(x = tab126, col_keys = colkeys,big.mark=",", digits = 0, na_str = "N/A")
tab126 <- flextable::align(tab126,align="center", part = "all" )
tab126 <- autofit(tab126)
tab126
```

NA's and zeros are omitted from the analysis.

\newline

`r table_nums('tab_127')`
```{r,echo=FALSE,fig.cap=tab.127,ft.align='left'}
tab127<- flextable(over_all_summ[,8:14])
tab127<- bg(tab127, bg = "#66B3FF", part = "header")
colkeys = c("Min","Max","Mean","Median","Std. dev","Skewness","Kurtosis")
tab127<- colformat_num(
  x = tab127, col_keys = colkeys,
  big.mark=",", digits = 2, na_str = "N/A")
tab127 <- autofit(tab127)
tab127
```

\newline

`r table_nums('tab_128')`
```{r,echo=FALSE,fig.cap=tab.128,ft.align='left'}
tab128 <- flextable(over_all_summ[,15:21],theme_fun = theme_booktabs)
tab128 <- bg(tab128, bg = "#66B3FF", part = "header")
colkeys = c("25th pct","50th pct","75th pct","95th pct","97.5th pct","99th pct","99.9th pct")
tab128 <- colformat_num(x = tab128, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab128 <- fontsize(x=tab128,size = 10)
tab128 <- autofit(tab128)
tab128
```

\newline

```{r,echo=FALSE, message=FALSE}
x1 <- ggplot(data = ORX_News_data, aes(x=Log(Loss(USD)))) +
  geom_histogram(data = as.data.frame(ORX_News_data$Loss),aes(x=ORX_News_data$Loss),color="black",fill="orange")+labs(title="Histogram of Log Loss(USD)", y = "Count", x="Log(Loss(USD))")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
x2 <- ggplot(data=ORX_News_data, aes(Loss)) + stat_ecdf(geom = "point")+labs(title="Empirical Cumulative \n Distribution Function", y = "CDF", x="Log(Loss(USD))")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
 
fig65 <- ggarrange(x1,x2,ncol = 2,nrow = 1)
annotate_figure(fig65,text_grob("Before Truncation", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")

```

```{r,echo=FALSE, message=FALSE}
H_trunc <-13.90
b2 <- ORX_News_data[ORX_News_data$Loss > H_trunc,]

x1 <- ggplot(data = b2, aes(x=Log(Loss(USD)))) +
  geom_histogram(data = as.data.frame(b2$Loss),aes(x=b2$Loss),color="black",fill="orange")+labs(title="Histogram of Log Loss(USD)", y = "Count", x="Log(Loss(USD))")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
x2 <- ggplot(data=b2, aes(Loss)) + stat_ecdf(geom = "point")+labs(title="Empirical Cumulative \n Distribution Function", y = "CDF", x="Log(Loss(USD))")+theme(plot.title = element_text( colour="black", size=10,face = "bold.italic"))
 
fig66 <- ggarrange(x1,x2,ncol = 2,nrow = 1)
annotate_figure(fig66,text_grob("After Truncation", color = "black", face = "bold", size = 14),fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")

usd <- paste0("$",round(exp(H_trunc),0))
```

**Truncation Point**


```{r, echo=FALSE}
trunc_summ <- data.frame(matrix(0, nrow = 1, ncol = 6))
colnames(trunc_summ) <- c("Truncation Point","Data Points before Truncation","Data Points after Truncation","Truncated Data Points","Max Loss of Truncated Data","Average Loss of Truncated Data")
trunc_summ[1,1] <- paste0(round(H_trunc,2)," ($",format(round(exp(H_trunc),2),big.mark=","),")")
trunc_summ[1,2] <- nrow(ORX_News_data)
trunc_summ[1,3] <- nrow(b2)
trunc_summ[1,4] <- paste0(nrow(ORX_News_data) - nrow(b2)," (",round((1-nrow(b2)/nrow(ORX_News_data))*100,2),"%)")
trunc_summ[1,5] <- format(round(exp(max(ORX_News_data$Loss[which(ORX_News_data$Loss <= H_trunc)])),2),big.mark = ",")
trunc_summ[1,6] <- format(round(mean(exp(ORX_News_data$Loss[which(ORX_News_data$Loss <= H_trunc)])),2),big.mark=",")
```

\newline

`r table_nums('tab_129')`
```{r,echo=FALSE,fig.cap=tab.129,ft.align='left'}
tab129 <- flextable(trunc_summ)
tab129 <- bg(tab129, bg = "#66B3FF", part = "header")
colkeys =c("Max Loss of Truncated Data","Average Loss of Truncated Data")
tab129 <- colformat_num(x = tab129, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
colkeys =c("Data Points before Truncation","Data Points after Truncation")
tab129 <- colformat_num(x = tab129, col_keys = colkeys,big.mark=",", digits = 0, na_str = "N/A")
tab129 <- align_text_col(tab129,align="center")
tab129 <- fontsize(tab129, part = "header", size = 10) 
tab129<- fontsize(x=tab129,size = 10)
tab129 <- autofit(tab129)
tab129
```


```{r, echo=FALSE,warning=FALSE,include=FALSE}
fit_ln <- fitdist(ORX_News_data$Loss, "lnorm",method = "mle")
fit_gm <- fitdist(ORX_News_data$Loss,"gamma",method = "mle")
fit_wb <- fitdist(ORX_News_data$Loss,"weibull",method = "mle")
fit_ll <- fitdist(ORX_News_data$Loss,"llogis",method="mle")
fit_burr <- fitdist(ORX_News_data$Loss, "burr", start = list(shape1 = 0.5, shape2 = 1.5, rate = 1))
fit_t <- fitdist(ORX_News_data$Loss, "t.scaled", start=list(df=2, mean = mean(ORX_News_data$Loss),sd = sd(ORX_News_data$Loss)))
fit_norm <- fitdist(ORX_News_data$Loss, "norm")
```

```{r, warning=FALSE, echo=FALSE}
dtrunc_ln <- function(x, meanlog, sdlog)
  dtrunc(x, "lnorm", a = H_trunc, b = Inf, meanlog = meanlog, sdlog = sdlog)
ptrunc_ln <- function(x, meanlog, sdlog)
  ptrunc(x, "lnorm", a = H_trunc, b = Inf, meanlog = meanlog, sdlog = sdlog)
qtrunc_ln <- function(x, meanlog, sdlog)
  qtrunc(x, "lnorm", a = H_trunc, b = Inf, meanlog = meanlog, sdlog = sdlog)

dtrunc_gm <- function(x, shape, rate)
  dtrunc(x, "gamma", a = H_trunc, b = Inf, shape = shape, rate = rate)
ptrunc_gm <- function(x, shape, rate)
  ptrunc(x, "gamma", a = H_trunc, b = Inf, shape = shape, rate = rate)
qtrunc_gm <- function(x, shape, rate)
  qtrunc(x, "gamma", a = H_trunc, b = Inf, shape = shape, rate = rate)

dtrunc_wb <- function(x, shape, scale)
  dtrunc(x, "weibull", a = H_trunc, b = Inf, shape = shape, scale = scale)
ptrunc_wb <- function(x, shape, scale)
  ptrunc(x, "weibull", a = H_trunc, b = Inf, shape = shape, scale = scale)
qtrunc_wb <- function(x, shape, scale)
  qtrunc(x, "weibull", a = H_trunc, b = Inf, shape = shape, scale =scale)

dtrunc_ll <- function(x, shape, scale)
  dtrunc(x, "llogis", a = H_trunc, b = Inf, shape = shape, scale =scale)
ptrunc_ll <- function(x, shape, scale)
  ptrunc(x, "llogis", a = H_trunc, b = Inf, shape = shape, scale = scale)
qtrunc_ll <- function(x, shape, scale)
  qtrunc(x, "llogis", a = H_trunc, b = Inf, shape = shape, scale = scale)

dtrunc_burr <- function(x, shape1, shape2, rate)
  dtrunc(x, "burr", a = H_trunc, b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)
ptrunc_burr <- function(x, shape1, shape2, rate)
  ptrunc(x, "burr", a = H_trunc, b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)
qtrunc_burr <- function(x, shape1, shape2, rate)
  qtrunc(x, "burr", a = H_trunc, b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)

dtrunc_t <- function(x, df, mean, sd)
  dtrunc(x, "t.scaled", a = H_trunc, b = Inf, df = df, mean = mean, sd =sd)
ptrunc_t <- function(x, df, mean, sd)
  ptrunc(x, "t.scaled", a = H_trunc, b = Inf, df = df, mean = mean, sd =sd)
qtrunc_t <- function(x, df, mean, sd)
  qtrunc(x, "t.scaled", a = H_trunc, b = Inf, df = df, mean = mean, sd =sd)

dtrunc_norm <- function(x, mean, sd)
  dtrunc(x, "norm", a = H_trunc, b = Inf, mean = mean, sd = sd)
ptrunc_norm <- function(x, mean, sd)
  ptrunc(x, "norm", a = H_trunc, b = Inf, mean = mean, sd = sd)
qtrunc_norm <- function(x, mean, sd)
  qtrunc(x, "norm", a = H_trunc, b = Inf, mean = mean, sd = sd)

fit_tln <- fitdistrplus::fitdist(b2$Loss, "trunc_ln",start = list(meanlog = 1, sdlog = 1))
fit_tgm <- fitdistrplus::fitdist(b2$Loss,"trunc_gm",start = list(shape = 6, rate = 0.001))
fit_twb <- fitdistrplus::fitdist(b2$Loss,"trunc_wb",start = list(shape = 1, scale = 1))
fit_tll <- fitdistrplus::fitdist(b2$Loss,"trunc_ll",start = list(shape = 8, scale = 1))
fit_tburr <- fitdistrplus::fitdist(b2$Loss, "trunc_burr", start = list(shape1 = 2, shape2 = 4, rate = 1.5))
fit_tt <- fitdistrplus::fitdist(b2$Loss, "trunc_t", start=list(df=2, mean = mean(b2$Loss),sd = sd(b2$Loss)))
fit_tnorm <- fitdistrplus::fitdist(b2$Loss, "trunc_norm", start = list(mean = mean(b2$Loss), sd = sd(b2$Loss)))
```

##### Estimated Parameters
```{r,echo=FALSE}
par_t <- data.frame(dist=c("Log-normal","Log-normal","Gamma","Gamma","Weibull","Weibull","Log-logistic","Log-logistic","Normal","Normal","Burr","Burr","Burr","Student's-t","Student's-t","Student's-t"),
par=c("meanlog","sdlog","shape","rate","shape","scale","shape","scale","mean","sd","shape1","shape2","rate","df","location","scale"),
before=c(fit_ln$estimate[[1]],fit_ln$estimate[[2]],fit_gm$estimate[[1]],fit_gm$estimate[[2]],fit_wb$estimate[[1]],fit_wb$estimate[[2]],fit_ll$estimate[[1]],fit_ll$estimate[[2]],fit_norm$estimate[[1]],fit_norm$estimate[[2]],fit_burr$estimate[[1]],fit_burr$estimate[[2]],fit_burr$estimate[[3]],fit_t$estimate[[1]],fit_t$estimate[[2]],fit_t$estimate[[3]]),

after=c(fit_tln$estimate[[1]],fit_tln$estimate[[2]],fit_tgm$estimate[[1]],fit_tgm$estimate[[2]],fit_twb$estimate[[1]],fit_twb$estimate[[2]],fit_tll$estimate[[1]],fit_tll$estimate[[2]],fit_tnorm$estimate[[1]],fit_tnorm$estimate[[2]],fit_tburr$estimate[[1]],fit_tburr$estimate[[2]],fit_tburr$estimate[[3]],fit_tt$estimate[[1]],fit_tt$estimate[[2]],fit_tt$estimate[[3]]))
```

`r table_nums('tab_130')`
```{r,echo=FALSE,fig.cap=tab.130,ft.align='left'}
tab130 <- flextable(par_t)
tab130 <- set_header_labels(tab130, dist = "Distribution", par = "Parameter", before = "Estimate",after = "Estimate")
tab130 <- bg(tab130, bg = "#66B3FF", part = "header")
tab130 <- merge_at(tab130, i = 1, j = 3:4, part = "header")
tab130 <- add_header_row(tab130, values = c("", "", "Before", "After"), top = FALSE )
tab130 <- merge_v(tab130,j=c(1))
tab130 <- theme_box(tab130)
tab130 <- bg(tab130, bg = "#66B3FF", part = "header")
tab130 <- fontsize(x=tab130,size = 9,part = "all")
tab130 <- autofit(tab130)
tab130
```

```{r,echo=FALSE,warning=FALSE}
plot.legend <- c("Log-normal","Gamma","Weibull","Log-Logistic","Burr","Student's-t","Normal")

den <- denscomp(list(fit_tln,fit_tgm,fit_twb,fit_tll,fit_tburr,fit_tt,fit_tnorm), legendtext = plot.legend, plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))+labs(x = "log(Loss(USD))", y = "Density")
qq <- qqcomp(list(fit_tln,fit_tgm,fit_twb,fit_tll,fit_tburr,fit_tt,fit_tnorm), legendtext = plot.legend, plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))
cdf <- cdfcomp(list(fit_tln,fit_tgm,fit_twb,fit_tll,fit_tburr,fit_tt,fit_tnorm), legendtext = plot.legend, plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))+labs(caption = "*Black dots are Emperical CDF", x = "log(Loss(USD))", y = "CDF")
pp <- ppcomp(list(fit_tln,fit_tgm,fit_twb,fit_tll,fit_tburr,fit_tt,fit_tnorm), legendtext = plot.legend, plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))

qq1 <- qqcomp(list(fit_tln,fit_tgm,fit_twb,fit_tt,fit_tnorm), legendtext = c("Log-normal","Gamma","Weibull","Studeent's-t","Normal"), plotstyle = "ggplot")+theme(plot.title = element_text( colour="black", size=12,face = "bold.italic"))

fig67 <- ggarrange(den, ncol = 1,nrow = 1)
annotate_figure(fig67,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE}
fig68 <- ggarrange(qq, ncol = 1,nrow = 1)
annotate_figure(fig68,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
fig68a <- ggarrange(qq1, ncol = 1,nrow = 1)
annotate_figure(fig68a,fig.lab ="Fig. 67a", fig.lab.face = "bold")
```


```{r,echo=FALSE,warning=FALSE}
di1 <- c("tweibull")
dp1 <- list(list(shape=fit_twb$estimate[[1]],scale=fit_twb$estimate[[2]],a=H_trunc,b=Inf))

qq <- list()
for(i in 1:length(di1)){
  gg <- ggplot(data =b2 , mapping = aes(sample = Loss)) +  #Replace b1 by modeling data
  stat_qq_band(distribution = di1[i], dparams = dp1[[i]],conf = 0.95) + # bandtype by default is "pointwise"
  stat_qq_line(distribution = di1[i], dparams = dp1[[i]]) +
  stat_qq_point(distribution = di1[i], dparams = dp1[[i]])+ 
  labs(x = "Theoretical Quantiles", y = "Sample Quantiles")
  qq[[i]] <- gg
}
fig67b <- ggarrange(qq[[1]], ncol = 1,nrow = 1)
annotate_figure(fig67b,top = text_grob("Truncated Weibull QQ-plot 95% Confidence Interval ", color = "black", face = "bold", size = 10),fig.lab = "Fig.67b", fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE}
fig69 <- ggarrange(cdf, ncol = 1,nrow = 1)
annotate_figure(fig69,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

\newline

```{r,echo=FALSE}
fig70 <- ggarrange(pp, ncol = 1,nrow = 1)
annotate_figure(fig70,fig.lab = paste0("Fig. ",fign(x)), fig.lab.face = "bold")
```

```{r,echo=FALSE,warning=FALSE, warning=FALSE, include=FALSE}
set.seed(100)

h1=hist(b2$Loss,main = "Truncated Loss")

breaks_cdf <- plnormTrunc(h1$breaks, meanlog = fit_tln$estimate[[1]], sdlog = fit_tln$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tln <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tln <- truncgof::ks.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
ad_tln <- truncgof::ad.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
ad2_tln <- truncgof::ad2.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
adup_tln <- truncgof::adup.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
ad2up_tln <- truncgof::ad2up.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
cvm_tln <- truncgof::w2.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)
kp_tln <- truncgof::v.test(b2$Loss,"plnorm",list(meanlog = fit_tln$estimate[[1]],sdlog = fit_tln$estimate[[2]]), H = H_trunc)

breaks_cdf <- TruncatedDistributions::ptgamma(h1$breaks,shape = fit_tgm$estimate[[1]],scale = 1/fit_tgm$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tgm <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tgm <- truncgof::ks.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
ad_tgm <- truncgof::ad.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
ad2_tgm <- truncgof::ad2.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
adup_tgm <- truncgof::adup.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
ad2up_tgm <- truncgof::ad2up.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
cvm_tgm <- truncgof::w2.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)
kp_tgm <- truncgof::v.test(b2$Loss,"pgamma",list(shape = fit_tgm$estimate[[1]],rate = fit_tgm$estimate[[2]]), H = H_trunc)

breaks_cdf <- TruncatedDistributions::ptweibull(q = h1$breaks,shape = fit_twb$estimate[[1]], scale = fit_twb$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_twb <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_twb <- truncgof::ks.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
ad_twb <- truncgof::ad.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
ad2_twb <- truncgof::ad2.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
adup_twb <- truncgof::adup.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
ad2up_twb <- truncgof::ad2up.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
cvm_twb <- truncgof::w2.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)
kp_twb <- truncgof::v.test(b2$Loss,"pweibull",list(shape =  fit_twb$estimate[[1]],scale = fit_twb$estimate[[2]]), H = H_trunc)

breaks_cdf <- pllogis(q = h1$breaks, shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tll <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tll <- truncgof::ks.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
ad_tll <- truncgof::ad.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
ad2_tll <- truncgof::ad2.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
adup_tll <- truncgof::adup.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
ad2up_tll <- truncgof::ad2up.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
cvm_tll <- truncgof::w2.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)
kp_tll <- truncgof::v.test(b2$Loss, "pllogis", list(shape = fit_tll$estimate[[1]], scale = fit_tll$estimate[[2]]), H = H_trunc)

breaks_cdf <- TruncatedDistributions::ptnorm(q = h1$breaks,mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tnorm <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tnorm <- truncgof::ks.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
ad_tnorm <- truncgof::ad.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
ad2_tnorm <- truncgof::ad2.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
adup_tnorm <- truncgof::adup.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
ad2up_tnorm <- truncgof::ad2up.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
cvm_tnorm <- truncgof::w2.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)
kp_tnorm <- truncgof::v.test(b2$Loss,"pnorm",list(mean=fit_tnorm$estimate[[1]],sd=fit_tnorm$estimate[[2]]), H = H_trunc)

breaks_cdf <- pburr(q = h1$breaks,shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tburr <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tburr <- truncgof::ks.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
ad_tburr <- truncgof::ad.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
ad2_tburr <- truncgof::ad2.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
adup_tburr <- truncgof::adup.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
ad2up_tburr <- truncgof::ad2up.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
cvm_tburr <- truncgof::w2.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)
kp_tburr <- truncgof::v.test(b2$Loss, "pburr", list(shape1=fit_tburr$estimate[[1]],shape2=fit_tburr$estimate[[2]],rate=fit_tburr$estimate[[3]]), H = H_trunc)

breaks_cdf <- pt.scaled(q = h1$breaks,df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tt <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tt <- truncgof::ks.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
ad_tt <- truncgof::ad.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
ad2_tt <- truncgof::ad2.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
adup_tt <- truncgof::adup.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
ad2up_tt <- truncgof::ad2up.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
cvm_tt <- truncgof::w2.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)
kp_tt <- truncgof::v.test(b2$Loss, "pt.scaled", list(df=fit_tt$estimate[[1]],mean=fit_tt$estimate[[2]],sd=fit_tt$estimate[[3]]), H = H_trunc)

```

```{r,echo=FALSE}
goft <- round_df(data.frame(ChiSq=c(a_tln$p.value,a_tgm$p.value,a_twb$p.value,a_tll$p.value,a_tnorm$p.value,a_tburr$p.value,a_tt$p.value), KS=c(ks_tln$p.value,ks_tgm$p.value,ks_twb$p.value,ks_tll$p.value,ks_tnorm$p.value,ks_tburr$p.value,ks_tt$p.value), AD=c(ad_tln$p.value,ad_tgm$p.value,ad_twb$p.value,ad_tll$p.value,ad_tnorm$p.value,ad_tburr$p.value,ad_tt$p.value), AD2=c(ad2_tln$p.value,ad2_tgm$p.value,ad2_twb$p.value,ad2_tll$p.value,ad2_tnorm$p.value,ad2_tburr$p.value,ad2_tt$p.value), AD_Up=c(adup_tln$p.value,adup_tgm$p.value,adup_twb$p.value,adup_tll$p.value,adup_tnorm$p.value,adup_tburr$p.value,adup_tt$p.value), AD2Up=c(ad2up_tln$p.value,ad2up_tgm$p.value,ad2up_twb$p.value,ad2up_tll$p.value,ad2up_tnorm$p.value,ad2up_tburr$p.value,ad2up_tt$p.value), CVM=c(cvm_tln$p.value,cvm_tgm$p.value,cvm_twb$p.value,cvm_tll$p.value,cvm_tnorm$p.value,cvm_tburr$p.value,cvm_tt$p.value), KP=c(kp_tln$p.value,kp_tgm$p.value,kp_twb$p.value,kp_tll$p.value,kp_tnorm$p.value,kp_tburr$p.value,kp_tt$p.value)),2)
```

\newline
```{r,echo=FALSE}
gofc <- round_df(data.frame(Loglik =c(fit_tln$loglik,fit_tgm$loglik,fit_twb$loglik,fit_tll$loglik,fit_tnorm$loglik,fit_tburr$loglik,fit_tt$loglik), AIC=c(fit_tln$aic,fit_tgm$aic,fit_twb$aic,fit_tll$aic,fit_tnorm$aic,fit_tburr$aic,fit_tt$aic), BIC=c(fit_tln$bic,fit_tgm$bic,fit_twb$bic,fit_tll$bic,fit_tnorm$bic,fit_tburr$bic,fit_tt$bic)),2)

```

`r table_nums('tab_137')`
```{r,echo=FALSE,fig.cap=tab.137,ft.align='left'}
goft <- cbind(Distribution=c("Log-normal","Gamma","Weibull","Log-logistic","Normal","Burr","Student's-t"),goft)
tab137 <- flextable(goft,theme_fun = theme_booktabs)
tab137 <- bg(tab137, bg = "#66B3FF", part = "header")
tab137 <- color(tab137, ~ ChiSq >= 0.05 , ~ChiSq,color = "green")
tab137 <- color(tab137, ~ KS >= 0.05 , ~KS,color = "green")
tab137 <- color(tab137, ~ AD >= 0.05 , ~AD,color = "green")
tab137 <- color(tab137, ~ AD2 >= 0.05 , ~AD2,color = "green")
tab137 <- color(tab137, ~ AD_Up >= 0.05 , ~AD_Up,color = "green")
tab137 <- color(tab137, ~ AD2Up >= 0.05 , ~AD2Up,color = "green")
tab137 <- color(tab137, ~ CVM >= 0.05 , ~CVM,color = "green")
tab137 <- color(tab137, ~ KP >= 0.05 , ~KP,color = "green")
tab137 <- color(tab137, ~ (ChiSq >= 0.01 & ChiSq < 0.05) , ~ChiSq,color = "orange")
tab137 <- color(tab137, ~ (KS >= 0.01 & KS < 0.05) , ~KS,color = "orange")
tab137 <- color(tab137, ~ (AD >= 0.01 & AD < 0.05) , ~AD,color = "orange")
tab137 <- color(tab137, ~ (AD2 >= 0.01 & AD2 < 0.05) , ~AD2,color = "orange")
tab137 <- color(tab137, ~ (AD_Up >= 0.01 & AD_Up < 0.05) , ~AD_Up,color = "orange")
tab137 <- color(tab137, ~ (AD2Up >= 0.01 & AD2Up < 0.05) , ~AD2Up,color = "orange")
tab137 <- color(tab137, ~ (CVM >= 0.01 & CVM < 0.05) , ~CVM,color = "orange")
tab137 <- color(tab137, ~ (KP >= 0.01 & KP < 0.05) , ~KP,color = "orange")
tab137 <- color(tab137, ~ (ChiSq < 0.01 ) , ~ChiSq,color = "red")
tab137 <- color(tab137, ~ (KS < 0.01 ) , ~KS,color = "red")
tab137 <- color(tab137, ~ (AD < 0.01 ) , ~AD,color = "red")
tab137 <- color(tab137, ~ (AD2 < 0.01 ) , ~AD2,color = "red")
tab137 <- color(tab137, ~ (AD_Up < 0.01) , ~AD_Up,color = "red")
tab137 <- color(tab137, ~ (AD2Up < 0.01) , ~AD2Up,color = "red")
tab137 <- color(tab137, ~ (CVM < 0.01) , ~CVM,color = "red")
tab137 <- color(tab137, ~ (KP < 0.01) , ~KP,color = "red")
colkeys = c("ChiSq","KS","AD","AD2","AD_Up","AD2Up","CVM","KP")
tab137 <- colformat_num(x = tab137, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab137 <- add_footer_lines(tab137,values = c("p-value greater than or equal to 0.05 is highlighted in green","p-value less than 0.05 and greater than or equal to 0.01 is highlighted in amber","p-value less than 0.01 is highlighted in red"),top=FALSE)
tab137 <- fontsize(x=tab137,size = 6,part = "footer")
tab137 <- autofit(tab137)
tab137
```

\newline

`r table_nums('tab_138')`
```{r,echo=FALSE,fig.cap=tab.138,ft.align='left'}
gofc <- cbind(Distribution=c("Log-normal","Gamma","Weibull","Log-logistic","Normal","Burr","Student's-t"),gofc)
tab138 <- flextable(gofc,theme_fun = theme_booktabs)
tab138 <- bg(tab138, bg = "#66B3FF", part = "header")
colkeys = c("Loglik","AIC","BIC")
tab138 <- colformat_num(x = tab138, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab138 <- autofit(tab138)
tab138
```

**Conclusion**


## Appendix 

```{r echo=FALSE, message=FALSE, warning=FALSE, include=FALSE}
H_trunc <- c(12,12.25,12.5)
fit_tln <- list()
fit_tgm <- list()
fit_twb <- list()
fit_tll <-  list()
fit_tburr <- list()
fit_tt <- list()
fit_tnorm <- list()
for(i in 1:length(H_trunc)){
  set.seed(100)
  b2 <- AF_data[AF_data$Loss > H_trunc[i],]
dtrunc_ln <- function(x, meanlog, sdlog)
  dtrunc(x, "lnorm", a = H_trunc[i], b = Inf, meanlog = meanlog, sdlog = sdlog)
ptrunc_ln <- function(x, meanlog, sdlog)
  ptrunc(x, "lnorm", a = H_trunc[i], b = Inf, meanlog = meanlog, sdlog = sdlog)
qtrunc_ln <- function(x, meanlog, sdlog)
  qtrunc(x, "lnorm", a = H_trunc[i], b = Inf, meanlog = meanlog, sdlog = sdlog)

dtrunc_gm <- function(x, shape, rate)
  dtrunc(x, "gamma", a = H_trunc[i], b = Inf, shape = shape, rate = rate)
ptrunc_gm <- function(x, shape, rate)
  ptrunc(x, "gamma", a = H_trunc[i], b = Inf, shape = shape, rate = rate)
qtrunc_gm <- function(x, shape, rate)
  qtrunc(x, "gamma", a = H_trunc[i], b = Inf, shape = shape, rate = rate)

dtrunc_wb <- function(x, shape, scale)
  dtrunc(x, "weibull", a = H_trunc[i], b = Inf, shape = shape, scale = scale)
ptrunc_wb <- function(x, shape, scale)
  ptrunc(x, "weibull", a = H_trunc[i], b = Inf, shape = shape, scale = scale)
qtrunc_wb <- function(x, shape, scale)
  qtrunc(x, "weibull", a = H_trunc[i], b = Inf, shape = shape, scale =scale)

dtrunc_ll <- function(x, shape, scale)
  dtrunc(x, "llogis", a = H_trunc[i], b = Inf, shape = shape, scale =scale)
ptrunc_ll <- function(x, shape, scale)
  ptrunc(x, "llogis", a = H_trunc[i], b = Inf, shape = shape, scale = scale)
qtrunc_ll <- function(x, shape, scale)
  qtrunc(x, "llogis", a = H_trunc[i], b = Inf, shape = shape, scale = scale)

dtrunc_burr <- function(x, shape1, shape2, rate)
  dtrunc(x, "burr", a = H_trunc[i], b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)
ptrunc_burr <- function(x, shape1, shape2, rate)
  ptrunc(x, "burr", a = H_trunc[i], b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)
qtrunc_burr <- function(x, shape1, shape2, rate)
  qtrunc(x, "burr", a = H_trunc[i], b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)

dtrunc_t <- function(x, df, mean, sd)
  dtrunc(x, "t.scaled", a = H_trunc[i], b = Inf, df = df, mean = mean, sd =sd)
ptrunc_t <- function(x, df, mean, sd)
  ptrunc(x, "t.scaled", a = H_trunc[i], b = Inf, df = df, mean = mean, sd =sd)
qtrunc_t <- function(x, df, mean, sd)
  qtrunc(x, "t.scaled", a = H_trunc[i], b = Inf, df = df, mean = mean, sd =sd)

dtrunc_norm <- function(x, mean, sd)
  dtrunc(x, "norm", a = H_trunc[i], b = Inf, mean = mean, sd = sd)
ptrunc_norm <- function(x, mean, sd)
  ptrunc(x, "norm", a = H_trunc[i], b = Inf, mean = mean, sd = sd)
qtrunc_norm <- function(x, mean, sd)
  qtrunc(x, "norm", a = H_trunc[i], b = Inf, mean = mean, sd = sd)

fit_tln[[i]] <- fitdistrplus::fitdist(b2$Loss, "trunc_ln",start = list(meanlog =2, sdlog = 0.1))
fit_tgm[[i]] <- fitdistrplus::fitdist(b2$Loss,"trunc_gm",start = list(shape = 6, rate = 0.001))
fit_twb[[i]] <- fitdistrplus::fitdist(b2$Loss,"trunc_wb",start = list(shape = 1, scale = 1))
fit_tll[[i]] <- fitdistrplus::fitdist(b2$Loss,"trunc_ll",start = list(shape = 6, scale = 2))
fit_tburr[[i]] <- fitdistrplus::fitdist(b2$Loss, "trunc_burr", start = list(shape1 = 2, shape2 = 4, rate = 1.5))
fit_tt[[i]] <- fitdistrplus::fitdist(b2$Loss, "trunc_t", start=list(df=2, mean = mean(b2$Loss),sd = sd(b2$Loss)))
fit_tnorm[[i]] <- fitdistrplus::fitdist(b2$Loss, "trunc_norm", start = list(mean = mean(b2$Loss), sd = sd(b2$Loss)))
}
a_tln <- ks_tln <- ad_tln <- ad2_tln <-adup_tln <-ad2up_tln <-cvm_tln <- kp_tln<- a_tgm<-ks_tgm <-ad_tgm <-ad2_tgm <- adup_tgm<-ad2up_tgm <- cvm_tgm<- kp_tgm <- a_twb<-ks_twb <-ad_twb <-ad2_twb <- adup_twb <- ad2up_twb<- cvm_twb<- kp_twb <-a_tll <-ks_tll <- ad_tll<- ad2_tll <- adup_tll<- ad2up_tll<- cvm_tll <- kp_tll <- a_tnorm <- ks_tnorm <- ad_tnorm <- ad2_tnorm <- adup_tnorm <- ad2up_tnorm <-cvm_tnorm <- kp_tnorm <-a_tburr<- ks_tburr<- ad_tburr<- ad2_tburr <- adup_tburr <- ad2up_tburr <- cvm_tburr <- kp_tburr <- a_tt <- ks_tt <- ad_tt <-ad2_tt <-  adup_tt<- ad2up_tt <- cvm_tt <- kp_tt <- list()

for(i in 1:length(H_trunc)){
  set.seed(100)
b2 <- AF_data[AF_data$Loss > H_trunc[i],] 
h1=hist(b2$Loss,main = "Truncated Loss")
breaks_cdf <- plnormTrunc(h1$breaks, meanlog = fit_tln[[i]]$estimate[[1]], sdlog = fit_tln[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tln[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tln[[i]] <- truncgof::ks.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
ad_tln[[i]] <- truncgof::ad.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_tln[[i]] <- truncgof::ad2.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
adup_tln[[i]] <- truncgof::adup.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_tln[[i]] <- truncgof::ad2up.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_tln[[i]] <- truncgof::w2.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
kp_tln[[i]] <- truncgof::v.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- TruncatedDistributions::ptgamma(h1$breaks,shape = fit_tgm[[i]]$estimate[[1]],scale = 1/fit_tgm[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tgm[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tgm[[i]] <- truncgof::ks.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
ad_tgm[[i]] <- truncgof::ad.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_tgm[[i]] <- truncgof::ad2.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
adup_tgm[[i]] <- truncgof::adup.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_tgm[[i]] <- truncgof::ad2up.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_tgm[[i]] <- truncgof::w2.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
kp_tgm[[i]] <- truncgof::v.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- TruncatedDistributions::ptweibull(q = h1$breaks,shape = fit_twb[[i]]$estimate[[1]], scale = fit_twb[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_twb[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_twb[[i]] <- truncgof::ks.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
ad_twb[[i]] <- truncgof::ad.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_twb[[i]] <- truncgof::ad2.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
adup_twb[[i]] <- truncgof::adup.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_twb[[i]] <- truncgof::ad2up.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_twb[[i]] <- truncgof::w2.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
kp_twb[[i]] <- truncgof::v.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- pllogis(q = h1$breaks, shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tll[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tll[[i]] <- truncgof::ks.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
ad_tll[[i]] <- truncgof::ad.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_tll[[i]] <- truncgof::ad2.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
adup_tll[[i]] <- truncgof::adup.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_tll[[i]] <- truncgof::ad2up.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_tll[[i]] <- truncgof::w2.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
kp_tll[[i]] <- truncgof::v.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- TruncatedDistributions::ptnorm(q = h1$breaks,mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tnorm[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tnorm[[i]] <- truncgof::ks.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
ad_tnorm[[i]] <- truncgof::ad.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_tnorm[[i]] <- truncgof::ad2.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
adup_tnorm[[i]] <- truncgof::adup.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_tnorm[[i]] <- truncgof::ad2up.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_tnorm[[i]] <- truncgof::w2.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
kp_tnorm[[i]] <- truncgof::v.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- pburr(q = h1$breaks,shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tburr[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tburr[[i]] <- truncgof::ks.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
ad_tburr[[i]] <- truncgof::ad.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
ad2_tburr[[i]] <- truncgof::ad2.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
adup_tburr[[i]] <- truncgof::adup.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
ad2up_tburr[[i]] <- truncgof::ad2up.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
cvm_tburr[[i]] <- truncgof::w2.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
kp_tburr[[i]] <- truncgof::v.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])

breaks_cdf <- pt.scaled(q = h1$breaks,df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tt[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tt[[i]] <- truncgof::ks.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
ad_tt[[i]] <- truncgof::ad.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
ad2_tt[[i]] <- truncgof::ad2.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
adup_tt[[i]] <- truncgof::adup.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
ad2up_tt[[i]] <- truncgof::ad2up.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
cvm_tt[[i]] <- truncgof::w2.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
kp_tt[[i]] <- truncgof::v.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
}

ChiSq1 <- KS1 <- AD1 <- AD21 <- AD_Up1 <- CVM1 <- KP1 <- Ad2_Up1 <- list()
for(i in 1:length(H_trunc)){
  ChiSq1[[i]]=c(a_tln[[i]]$p.value,a_tgm[[i]]$p.value,a_twb[[i]]$p.value,a_tll[[i]]$p.value,a_tnorm[[i]]$p.value,a_tburr[[i]]$p.value,a_tt[[i]]$p.value)
  KS1[[i]]=c(ks_tln[[i]]$p.value,ks_tgm[[i]]$p.value,ks_twb[[i]]$p.value,ks_tll[[i]]$p.value,ks_tnorm[[i]]$p.value,ks_tburr[[i]]$p.value,ks_tt[[i]]$p.value)
  AD1[[i]]=c(ad_tln[[i]]$p.value,ad_tgm[[i]]$p.value,ad_twb[[i]]$p.value,ad_tll[[i]]$p.value,ad_tnorm[[i]]$p.value,ad_tburr[[i]]$p.value,ad_tt[[i]]$p.value) 
  AD21[[i]]=c(ad2_tln[[i]]$p.value,ad2_tgm[[i]]$p.value,ad2_twb[[i]]$p.value,ad2_tll[[i]]$p.value,ad2_tnorm[[i]]$p.value,ad2_tburr[[i]]$p.value,ad2_tt[[i]]$p.value)
  AD_Up1[[i]]=c(adup_tln[[i]]$p.value,adup_tgm[[i]]$p.value,adup_twb[[i]]$p.value,adup_tll[[i]]$p.value,adup_tnorm[[i]]$p.value,adup_tburr[[i]]$p.value,adup_tt[[i]]$p.value)
  Ad2_Up1[[i]]=c(ad2up_tln[[i]]$p.value,ad2up_tgm[[i]]$p.value,ad2up_twb[[i]]$p.value,ad2up_tll[[i]]$p.value,ad2up_tnorm[[i]]$p.value,ad2up_tburr[[i]]$p.value,ad2up_tt[[i]]$p.value)
  CVM1[[i]]=c(cvm_tln[[i]]$p.value,cvm_tgm[[i]]$p.value,cvm_twb[[i]]$p.value,cvm_tll[[i]]$p.value,cvm_tnorm[[i]]$p.value,cvm_tburr[[i]]$p.value,cvm_tt[[i]]$p.value)
  KP1[[i]]=c(kp_tln[[i]]$p.value,kp_tgm[[i]]$p.value,kp_twb[[i]]$p.value,kp_tll[[i]]$p.value,kp_tnorm[[i]]$p.value,kp_tburr[[i]]$p.value,kp_tt[[i]]$p.value)
}
ChiSq <- KS <- AD <- AD2 <- AD_Up <- AD2Up <-  CVM <- KP <- Distribution <- `Truncation Point`<- Justification <-Assesment <-  c()
dis <- c("Log-normal","Gamma","Weibull","Log-logistic","Normal","Burr","Student's-t")
temp <- c("xxx","xxx1","xxx2","xxxx3","xxx4","xxxx5")
for(i in 1:length(H_trunc)){
   ChiSq <- c(ChiSq,ChiSq1[[i]]) 
   KS <- c(KS,KS1[[i]])
   AD <- c(AD,AD1[[i]])
   AD2 <- c(AD2,AD21[[i]])
   AD_Up <- c(AD_Up,AD_Up1[[i]])
   AD2Up <- c(AD2Up,Ad2_Up1[[i]])
   CVM <- c(CVM,CVM1[[i]])
   KP <- c(KP,KP1[[i]])
   Distribution <- c(Distribution,dis)
   `Truncation Point` <- c(`Truncation Point`,rep(paste0(H_trunc[i],"($",exp(H_trunc[i]),")"),7))
   #Justification <- c(Justification,rep(temp[i],7))
   Assesment <- c(Assesment,rep("Fail",7))
 }
goft_a <- round_df(data.frame(ChiSq,KS,AD,AD2,AD_Up,AD2Up,CVM,KP),2) # goodness of fit table at different truncation point.
goft_a <- cbind(`Truncation Point`,Distribution,goft_a,Assesment)
```

```{r, warning=FALSE, echo=FALSE,message=FALSE,include=FALSE}
H_trunc <- c(min(ORX_IM_data$Loss)-0.001,11,11.20)
fit_tln <- list()
fit_tgm <- list()
fit_twb <- list()
fit_tll <-  list()
fit_tburr <- list()
fit_tt <- list()
fit_tnorm <- list()
for(i in 1:length(H_trunc)){
  set.seed(100)
  b2 <- ORX_IM_data[ORX_IM_data$Loss > H_trunc[i],]
dtrunc_ln <- function(x, meanlog, sdlog)
  dtrunc(x, "lnorm", a = H_trunc[i], b = Inf, meanlog = meanlog, sdlog = sdlog)
ptrunc_ln <- function(x, meanlog, sdlog)
  ptrunc(x, "lnorm", a = H_trunc[i], b = Inf, meanlog = meanlog, sdlog = sdlog)
qtrunc_ln <- function(x, meanlog, sdlog)
  qtrunc(x, "lnorm", a = H_trunc[i], b = Inf, meanlog = meanlog, sdlog = sdlog)

dtrunc_gm <- function(x, shape, rate)
  dtrunc(x, "gamma", a = H_trunc[i], b = Inf, shape = shape, rate = rate)
ptrunc_gm <- function(x, shape, rate)
  ptrunc(x, "gamma", a = H_trunc[i], b = Inf, shape = shape, rate = rate)
qtrunc_gm <- function(x, shape, rate)
  qtrunc(x, "gamma", a = H_trunc[i], b = Inf, shape = shape, rate = rate)

dtrunc_wb <- function(x, shape, scale)
  dtrunc(x, "weibull", a = H_trunc[i], b = Inf, shape = shape, scale = scale)
ptrunc_wb <- function(x, shape, scale)
  ptrunc(x, "weibull", a = H_trunc[i], b = Inf, shape = shape, scale = scale)
qtrunc_wb <- function(x, shape, scale)
  qtrunc(x, "weibull", a = H_trunc[i], b = Inf, shape = shape, scale =scale)

dtrunc_ll <- function(x, shape, scale)
  dtrunc(x, "llogis", a = H_trunc[i], b = Inf, shape = shape, scale =scale)
ptrunc_ll <- function(x, shape, scale)
  ptrunc(x, "llogis", a = H_trunc[i], b = Inf, shape = shape, scale = scale)
qtrunc_ll <- function(x, shape, scale)
  qtrunc(x, "llogis", a = H_trunc[i], b = Inf, shape = shape, scale = scale)

dtrunc_burr <- function(x, shape1, shape2, rate)
  dtrunc(x, "burr", a = H_trunc[i], b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)
ptrunc_burr <- function(x, shape1, shape2, rate)
  ptrunc(x, "burr", a = H_trunc[i], b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)
qtrunc_burr <- function(x, shape1, shape2, rate)
  qtrunc(x, "burr", a = H_trunc[i], b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)

dtrunc_t <- function(x, df, mean, sd)
  dtrunc(x, "t.scaled", a = H_trunc[i], b = Inf, df = df, mean = mean, sd =sd)
ptrunc_t <- function(x, df, mean, sd)
  ptrunc(x, "t.scaled", a = H_trunc[i], b = Inf, df = df, mean = mean, sd =sd)
qtrunc_t <- function(x, df, mean, sd)
  qtrunc(x, "t.scaled", a = H_trunc[i], b = Inf, df = df, mean = mean, sd =sd)

dtrunc_norm <- function(x, mean, sd)
  dtrunc(x, "norm", a = H_trunc[i], b = Inf, mean = mean, sd = sd)
ptrunc_norm <- function(x, mean, sd)
  ptrunc(x, "norm", a = H_trunc[i], b = Inf, mean = mean, sd = sd)
qtrunc_norm <- function(x, mean, sd)
  qtrunc(x, "norm", a = H_trunc[i], b = Inf, mean = mean, sd = sd)

fit_tln[[i]] <- fitdistrplus::fitdist(b2$Loss, "trunc_ln",start = list(meanlog =2, sdlog = 0.1))
fit_tgm[[i]] <- fitdistrplus::fitdist(b2$Loss,"trunc_gm",start = list(shape = 6, rate = 0.001))
fit_twb[[i]] <- fitdistrplus::fitdist(b2$Loss,"trunc_wb",start = list(shape = 1, scale = 1))
fit_tll[[i]] <- fitdistrplus::fitdist(b2$Loss,"trunc_ll",start = list(shape = 8, scale = 1))
fit_tburr[[i]] <- fitdistrplus::fitdist(b2$Loss, "trunc_burr", start = list(shape1 = 2, shape2 = 4, rate = 1.5))
fit_tt[[i]] <- fitdistrplus::fitdist(b2$Loss, "trunc_t", start=list(df=2, mean = mean(b2$Loss),sd = sd(b2$Loss)))
fit_tnorm[[i]] <- fitdistrplus::fitdist(b2$Loss, "trunc_norm", start = list(mean = mean(b2$Loss), sd = sd(b2$Loss)))
}

a_tln <- ks_tln <- ad_tln <- ad2_tln <-adup_tln <-ad2up_tln <-cvm_tln <- kp_tln<- a_tgm<-ks_tgm <-ad_tgm <-ad2_tgm <- adup_tgm<-ad2up_tgm <- cvm_tgm<- kp_tgm <- a_twb<-ks_twb <-ad_twb <-ad2_twb <- adup_twb <- ad2up_twb<- cvm_twb<- kp_twb <-a_tll <-ks_tll <- ad_tll<- ad2_tll <- adup_tll<- ad2up_tll<- cvm_tll <- kp_tll <- a_tnorm <- ks_tnorm <- ad_tnorm <- ad2_tnorm <- adup_tnorm <- ad2up_tnorm <-cvm_tnorm <- kp_tnorm <-a_tburr<- ks_tburr<- ad_tburr<- ad2_tburr <- adup_tburr <- ad2up_tburr <- cvm_tburr <- kp_tburr <- a_tt <- ks_tt <- ad_tt <-ad2_tt <-  adup_tt<- ad2up_tt <- cvm_tt <- kp_tt <- list()

for(i in 1:length(H_trunc)){
  set.seed(100)
b2 <- ORX_IM_data[ORX_IM_data$Loss > H_trunc[i],]  
h1=hist(b2$Loss,main = "Truncated Loss")
breaks_cdf <- plnormTrunc(h1$breaks, meanlog = fit_tln[[i]]$estimate[[1]], sdlog = fit_tln[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tln[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tln[[i]] <- truncgof::ks.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
ad_tln[[i]] <- truncgof::ad.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_tln[[i]] <- truncgof::ad2.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
adup_tln[[i]] <- truncgof::adup.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_tln[[i]] <- truncgof::ad2up.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_tln[[i]] <- truncgof::w2.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
kp_tln[[i]] <- truncgof::v.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- TruncatedDistributions::ptgamma(h1$breaks,shape = fit_tgm[[i]]$estimate[[1]],scale = 1/fit_tgm[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tgm[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tgm[[i]] <- truncgof::ks.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
ad_tgm[[i]] <- truncgof::ad.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_tgm[[i]] <- truncgof::ad2.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
adup_tgm[[i]] <- truncgof::adup.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_tgm[[i]] <- truncgof::ad2up.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_tgm[[i]] <- truncgof::w2.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
kp_tgm[[i]] <- truncgof::v.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- TruncatedDistributions::ptweibull(q = h1$breaks,shape = fit_twb[[i]]$estimate[[1]], scale = fit_twb[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_twb[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_twb[[i]] <- truncgof::ks.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
ad_twb[[i]] <- truncgof::ad.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_twb[[i]] <- truncgof::ad2.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
adup_twb[[i]] <- truncgof::adup.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_twb[[i]] <- truncgof::ad2up.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_twb[[i]] <- truncgof::w2.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
kp_twb[[i]] <- truncgof::v.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- pllogis(q = h1$breaks, shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tll[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tll[[i]] <- truncgof::ks.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
ad_tll[[i]] <- truncgof::ad.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_tll[[i]] <- truncgof::ad2.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
adup_tll[[i]] <- truncgof::adup.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_tll[[i]] <- truncgof::ad2up.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_tll[[i]] <- truncgof::w2.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
kp_tll[[i]] <- truncgof::v.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- TruncatedDistributions::ptnorm(q = h1$breaks,mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tnorm[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tnorm[[i]] <- truncgof::ks.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
ad_tnorm[[i]] <- truncgof::ad.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_tnorm[[i]] <- truncgof::ad2.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
adup_tnorm[[i]] <- truncgof::adup.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_tnorm[[i]] <- truncgof::ad2up.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_tnorm[[i]] <- truncgof::w2.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
kp_tnorm[[i]] <- truncgof::v.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- pburr(q = h1$breaks,shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tburr[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tburr[[i]] <- truncgof::ks.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
ad_tburr[[i]] <- truncgof::ad.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
ad2_tburr[[i]] <- truncgof::ad2.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
adup_tburr[[i]] <- truncgof::adup.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
ad2up_tburr[[i]] <- truncgof::ad2up.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
cvm_tburr[[i]] <- truncgof::w2.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
kp_tburr[[i]] <- truncgof::v.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])

breaks_cdf <- pt.scaled(q = h1$breaks,df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tt[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tt[[i]] <- truncgof::ks.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
ad_tt[[i]] <- truncgof::ad.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
ad2_tt[[i]] <- truncgof::ad2.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
adup_tt[[i]] <- truncgof::adup.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
ad2up_tt[[i]] <- truncgof::ad2up.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
cvm_tt[[i]] <- truncgof::w2.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
kp_tt[[i]] <- truncgof::v.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
}

ChiSq1 <- KS1 <- AD1 <- AD21 <- AD_Up1 <- CVM1 <- KP1 <- Ad2_Up1 <- list()
for(i in 1:length(H_trunc)){
  ChiSq1[[i]]=c(a_tln[[i]]$p.value,a_tgm[[i]]$p.value,a_twb[[i]]$p.value,a_tll[[i]]$p.value,a_tnorm[[i]]$p.value,a_tburr[[i]]$p.value,a_tt[[i]]$p.value)
  KS1[[i]]=c(ks_tln[[i]]$p.value,ks_tgm[[i]]$p.value,ks_twb[[i]]$p.value,ks_tll[[i]]$p.value,ks_tnorm[[i]]$p.value,ks_tburr[[i]]$p.value,ks_tt[[i]]$p.value)
  AD1[[i]]=c(ad_tln[[i]]$p.value,ad_tgm[[i]]$p.value,ad_twb[[i]]$p.value,ad_tll[[i]]$p.value,ad_tnorm[[i]]$p.value,ad_tburr[[i]]$p.value,ad_tt[[i]]$p.value)
  AD21[[i]]=c(ad2_tln[[i]]$p.value,ad2_tgm[[i]]$p.value,ad2_twb[[i]]$p.value,ad2_tll[[i]]$p.value,ad2_tnorm[[i]]$p.value,ad2_tburr[[i]]$p.value,ad2_tt[[i]]$p.value)
  AD_Up1[[i]]=c(adup_tln[[i]]$p.value,adup_tgm[[i]]$p.value,adup_twb[[i]]$p.value,adup_tll[[i]]$p.value,adup_tnorm[[i]]$p.value,adup_tburr[[i]]$p.value,adup_tt[[i]]$p.value)
  Ad2_Up1[[i]]=c(ad2up_tln[[i]]$p.value,ad2up_tgm[[i]]$p.value,ad2up_twb[[i]]$p.value,ad2up_tll[[i]]$p.value,ad2up_tnorm[[i]]$p.value,ad2up_tburr[[i]]$p.value,ad2up_tt[[i]]$p.value)
  CVM1[[i]]=c(cvm_tln[[i]]$p.value,cvm_tgm[[i]]$p.value,cvm_twb[[i]]$p.value,cvm_tll[[i]]$p.value,cvm_tnorm[[i]]$p.value,cvm_tburr[[i]]$p.value,cvm_tt[[i]]$p.value)
  KP1[[i]]=c(kp_tln[[i]]$p.value,kp_tgm[[i]]$p.value,kp_twb[[i]]$p.value,kp_tll[[i]]$p.value,kp_tnorm[[i]]$p.value,kp_tburr[[i]]$p.value,kp_tt[[i]]$p.value)
}
ChiSq <- KS <- AD <- AD2 <- AD_Up <- AD2Up <-  CVM <- KP <- Distribution <- `Truncation Point`<- Assesment <-  c()
dis <- c("Log-normal","Gamma","Weibull","Log-logistic","Normal","Burr","Student's-t")
temp <- c("xxx","xxx1","xxx2","xxxx3","xxx4","xxxx5")
for(i in 1:length(H_trunc)){
   ChiSq <- c(ChiSq,ChiSq1[[i]])
   KS <- c(KS,KS1[[i]])
   AD <- c(AD,AD1[[i]])
   AD2 <- c(AD2,AD21[[i]])
   AD_Up <- c(AD_Up,AD_Up1[[i]])
   AD2Up <- c(AD2Up,Ad2_Up1[[i]])
   CVM <- c(CVM,CVM1[[i]])
   KP <- c(KP,KP1[[i]])
   Distribution <- c(Distribution,dis)
   `Truncation Point` <- c(`Truncation Point`,rep(paste0(H_trunc[i],"($",exp(H_trunc[i]),")"),7))
   #Justification <- c(Justification,rep(temp[i],7))
   Assesment <- c(Assesment,rep("xxx",7))
 }
 goft_oim <- round_df(data.frame(ChiSq,KS,AD,AD2,AD_Up,AD2Up,CVM,KP),2) # goodness of fit table at different truncation point.
goft_oim <- cbind(`Truncation Point`,Distribution,goft_oim,Assesment)
```

```{r, warning=FALSE, echo=FALSE,message=FALSE,include=FALSE}
H_trunc <- c(13.75,13.80,13.90)
fit_tln <- list()
fit_tgm <- list()
fit_twb <- list()
fit_tll <-  list()
fit_tburr <- list()
fit_tt <- list()
fit_tnorm <- list()
for(i in 1:length(H_trunc)){
  set.seed(100)
 b2 <- ORX_News_data[ORX_News_data$Loss > H_trunc[i],]
dtrunc_ln <- function(x, meanlog, sdlog)
  dtrunc(x, "lnorm", a = H_trunc[i], b = Inf, meanlog = meanlog, sdlog = sdlog)
ptrunc_ln <- function(x, meanlog, sdlog)
  ptrunc(x, "lnorm", a = H_trunc[i], b = Inf, meanlog = meanlog, sdlog = sdlog)
qtrunc_ln <- function(x, meanlog, sdlog)
  qtrunc(x, "lnorm", a = H_trunc[i], b = Inf, meanlog = meanlog, sdlog = sdlog)

dtrunc_gm <- function(x, shape, rate)
  dtrunc(x, "gamma", a = H_trunc[i], b = Inf, shape = shape, rate = rate)
ptrunc_gm <- function(x, shape, rate)
  ptrunc(x, "gamma", a = H_trunc[i], b = Inf, shape = shape, rate = rate)
qtrunc_gm <- function(x, shape, rate)
  qtrunc(x, "gamma", a = H_trunc[i], b = Inf, shape = shape, rate = rate)

dtrunc_wb <- function(x, shape, scale)
  dtrunc(x, "weibull", a = H_trunc[i], b = Inf, shape = shape, scale = scale)
ptrunc_wb <- function(x, shape, scale)
  ptrunc(x, "weibull", a = H_trunc[i], b = Inf, shape = shape, scale = scale)
qtrunc_wb <- function(x, shape, scale)
  qtrunc(x, "weibull", a = H_trunc[i], b = Inf, shape = shape, scale =scale)

dtrunc_ll <- function(x, shape, scale)
  dtrunc(x, "llogis", a = H_trunc[i], b = Inf, shape = shape, scale =scale)
ptrunc_ll <- function(x, shape, scale)
  ptrunc(x, "llogis", a = H_trunc[i], b = Inf, shape = shape, scale = scale)
qtrunc_ll <- function(x, shape, scale)
  qtrunc(x, "llogis", a = H_trunc[i], b = Inf, shape = shape, scale = scale)

dtrunc_burr <- function(x, shape1, shape2, rate)
  dtrunc(x, "burr", a = H_trunc[i], b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)
ptrunc_burr <- function(x, shape1, shape2, rate)
  ptrunc(x, "burr", a = H_trunc[i], b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)
qtrunc_burr <- function(x, shape1, shape2, rate)
  qtrunc(x, "burr", a = H_trunc[i], b = Inf, shape1 = shape1, shape2 = shape2, rate = rate)

dtrunc_t <- function(x, df, mean, sd)
  dtrunc(x, "t.scaled", a = H_trunc[i], b = Inf, df = df, mean = mean, sd =sd)
ptrunc_t <- function(x, df, mean, sd)
  ptrunc(x, "t.scaled", a = H_trunc[i], b = Inf, df = df, mean = mean, sd =sd)
qtrunc_t <- function(x, df, mean, sd)
  qtrunc(x, "t.scaled", a = H_trunc[i], b = Inf, df = df, mean = mean, sd =sd)

dtrunc_norm <- function(x, mean, sd)
  dtrunc(x, "norm", a = H_trunc[i], b = Inf, mean = mean, sd = sd)
ptrunc_norm <- function(x, mean, sd)
  ptrunc(x, "norm", a = H_trunc[i], b = Inf, mean = mean, sd = sd)
qtrunc_norm <- function(x, mean, sd)
  qtrunc(x, "norm", a = H_trunc[i], b = Inf, mean = mean, sd = sd)

fit_tln[[i]] <- fitdistrplus::fitdist(b2$Loss, "trunc_ln",start = list(meanlog =2, sdlog = 0.1))
fit_tgm[[i]] <- fitdistrplus::fitdist(b2$Loss,"trunc_gm",start = list(shape = 6, rate = 0.001))
fit_twb[[i]] <- fitdistrplus::fitdist(b2$Loss,"trunc_wb",start = list(shape = 1, scale = 1))
fit_tll[[i]] <- fitdistrplus::fitdist(b2$Loss,"trunc_ll",start = list(shape = 8, scale = 1))
fit_tburr[[i]] <- fitdistrplus::fitdist(b2$Loss, "trunc_burr", start = list(shape1 = 2, shape2 = 4, rate = 1.5))
fit_tt[[i]] <- fitdistrplus::fitdist(b2$Loss, "trunc_t", start=list(df=2, mean = mean(b2$Loss),sd = sd(b2$Loss)))
fit_tnorm[[i]] <- fitdistrplus::fitdist(b2$Loss, "trunc_norm", start = list(mean = mean(b2$Loss), sd = sd(b2$Loss)))
}

a_tln <- ks_tln <- ad_tln <- ad2_tln <-adup_tln <-ad2up_tln <-cvm_tln <- kp_tln<- a_tgm<-ks_tgm <-ad_tgm <-ad2_tgm <- adup_tgm<-ad2up_tgm <- cvm_tgm<- kp_tgm <- a_twb<-ks_twb <-ad_twb <-ad2_twb <- adup_twb <- ad2up_twb<- cvm_twb<- kp_twb <-a_tll <-ks_tll <- ad_tll<- ad2_tll <- adup_tll<- ad2up_tll<- cvm_tll <- kp_tll <- a_tnorm <- ks_tnorm <- ad_tnorm <- ad2_tnorm <- adup_tnorm <- ad2up_tnorm <-cvm_tnorm <- kp_tnorm <-a_tburr<- ks_tburr<- ad_tburr<- ad2_tburr <- adup_tburr <- ad2up_tburr <- cvm_tburr <- kp_tburr <- a_tt <- ks_tt <- ad_tt <-ad2_tt <-  adup_tt<- ad2up_tt <- cvm_tt <- kp_tt <- list()

for(i in 1:length(H_trunc)){
  set.seed(100)
b2 <- ORX_News_data[ORX_News_data$Loss > H_trunc[i],]
h1=hist(b2$Loss,main = "Truncated Loss")
breaks_cdf <- plnormTrunc(h1$breaks, meanlog = fit_tln[[i]]$estimate[[1]], sdlog = fit_tln[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tln[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tln[[i]] <- truncgof::ks.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
ad_tln[[i]] <- truncgof::ad.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_tln[[i]] <- truncgof::ad2.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
adup_tln[[i]] <- truncgof::adup.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_tln[[i]] <- truncgof::ad2up.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_tln[[i]] <- truncgof::w2.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])
kp_tln[[i]] <- truncgof::v.test(b2$Loss,"plnorm",list(meanlog = fit_tln[[i]]$estimate[[1]],sdlog = fit_tln[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- TruncatedDistributions::ptgamma(h1$breaks,shape = fit_tgm[[i]]$estimate[[1]],scale = 1/fit_tgm[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tgm[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tgm[[i]] <- truncgof::ks.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
ad_tgm[[i]] <- truncgof::ad.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_tgm[[i]] <- truncgof::ad2.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
adup_tgm[[i]] <- truncgof::adup.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_tgm[[i]] <- truncgof::ad2up.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_tgm[[i]] <- truncgof::w2.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])
kp_tgm[[i]] <- truncgof::v.test(b2$Loss,"pgamma",list(shape = fit_tgm[[i]]$estimate[[1]],rate = fit_tgm[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- TruncatedDistributions::ptweibull(q = h1$breaks,shape = fit_twb[[i]]$estimate[[1]], scale = fit_twb[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_twb[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_twb[[i]] <- truncgof::ks.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
ad_twb[[i]] <- truncgof::ad.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_twb[[i]] <- truncgof::ad2.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
adup_twb[[i]] <- truncgof::adup.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_twb[[i]] <- truncgof::ad2up.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_twb[[i]] <- truncgof::w2.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])
kp_twb[[i]] <- truncgof::v.test(b2$Loss,"pweibull",list(shape =  fit_twb[[i]]$estimate[[1]],scale = fit_twb[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- pllogis(q = h1$breaks, shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tll[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tll[[i]] <- truncgof::ks.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
ad_tll[[i]] <- truncgof::ad.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_tll[[i]] <- truncgof::ad2.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
adup_tll[[i]] <- truncgof::adup.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_tll[[i]] <- truncgof::ad2up.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_tll[[i]] <- truncgof::w2.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])
kp_tll[[i]] <- truncgof::v.test(b2$Loss, "pllogis", list(shape = fit_tll[[i]]$estimate[[1]], scale = fit_tll[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- TruncatedDistributions::ptnorm(q = h1$breaks,mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tnorm[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tnorm[[i]] <- truncgof::ks.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
ad_tnorm[[i]] <- truncgof::ad.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
ad2_tnorm[[i]] <- truncgof::ad2.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
adup_tnorm[[i]] <- truncgof::adup.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
ad2up_tnorm[[i]] <- truncgof::ad2up.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
cvm_tnorm[[i]] <- truncgof::w2.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])
kp_tnorm[[i]] <- truncgof::v.test(b2$Loss,"pnorm",list(mean=fit_tnorm[[i]]$estimate[[1]],sd=fit_tnorm[[i]]$estimate[[2]]), H = H_trunc[i])

breaks_cdf <- pburr(q = h1$breaks,shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tburr[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tburr[[i]] <- truncgof::ks.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
ad_tburr[[i]] <- truncgof::ad.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
ad2_tburr[[i]] <- truncgof::ad2.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
adup_tburr[[i]] <- truncgof::adup.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
ad2up_tburr[[i]] <- truncgof::ad2up.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
cvm_tburr[[i]] <- truncgof::w2.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])
kp_tburr[[i]] <- truncgof::v.test(b2$Loss, "pburr", list(shape1=fit_tburr[[i]]$estimate[[1]],shape2=fit_tburr[[i]]$estimate[[2]],rate=fit_tburr[[i]]$estimate[[3]]), H = H_trunc[i])

breaks_cdf <- pt.scaled(q = h1$breaks,df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]])
null.probs <- rollapply(breaks_cdf, 2, function(x) x[2]-x[1])
a_tt[[i]] <- chisq.test(h1$counts, p=null.probs, rescale.p=TRUE)
ks_tt[[i]] <- truncgof::ks.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
ad_tt[[i]] <- truncgof::ad.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
ad2_tt[[i]] <- truncgof::ad2.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
adup_tt[[i]] <- truncgof::adup.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
ad2up_tt[[i]] <- truncgof::ad2up.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
cvm_tt[[i]] <- truncgof::w2.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
kp_tt[[i]] <- truncgof::v.test(b2$Loss, "pt.scaled", list(df=fit_tt[[i]]$estimate[[1]],mean=fit_tt[[i]]$estimate[[2]],sd=fit_tt[[i]]$estimate[[3]]), H = H_trunc[i])
}

ChiSq1 <- KS1 <- AD1 <- AD21 <- AD_Up1 <- CVM1 <- KP1 <- Ad2_Up1 <- list()
for(i in 1:length(H_trunc)){
  ChiSq1[[i]]=c(a_tln[[i]]$p.value,a_tgm[[i]]$p.value,a_twb[[i]]$p.value,a_tll[[i]]$p.value,a_tnorm[[i]]$p.value,a_tburr[[i]]$p.value,a_tt[[i]]$p.value)
  KS1[[i]]=c(ks_tln[[i]]$p.value,ks_tgm[[i]]$p.value,ks_twb[[i]]$p.value,ks_tll[[i]]$p.value,ks_tnorm[[i]]$p.value,ks_tburr[[i]]$p.value,ks_tt[[i]]$p.value)
  AD1[[i]]=c(ad_tln[[i]]$p.value,ad_tgm[[i]]$p.value,ad_twb[[i]]$p.value,ad_tll[[i]]$p.value,ad_tnorm[[i]]$p.value,ad_tburr[[i]]$p.value,ad_tt[[i]]$p.value) 
  AD21[[i]]=c(ad2_tln[[i]]$p.value,ad2_tgm[[i]]$p.value,ad2_twb[[i]]$p.value,ad2_tll[[i]]$p.value,ad2_tnorm[[i]]$p.value,ad2_tburr[[i]]$p.value,ad2_tt[[i]]$p.value)
  AD_Up1[[i]]=c(adup_tln[[i]]$p.value,adup_tgm[[i]]$p.value,adup_twb[[i]]$p.value,adup_tll[[i]]$p.value,adup_tnorm[[i]]$p.value,adup_tburr[[i]]$p.value,adup_tt[[i]]$p.value)
  Ad2_Up1[[i]]=c(ad2up_tln[[i]]$p.value,ad2up_tgm[[i]]$p.value,ad2up_twb[[i]]$p.value,ad2up_tll[[i]]$p.value,ad2up_tnorm[[i]]$p.value,ad2up_tburr[[i]]$p.value,ad2up_tt[[i]]$p.value)
  CVM1[[i]]=c(cvm_tln[[i]]$p.value,cvm_tgm[[i]]$p.value,cvm_twb[[i]]$p.value,cvm_tll[[i]]$p.value,cvm_tnorm[[i]]$p.value,cvm_tburr[[i]]$p.value,cvm_tt[[i]]$p.value)
  KP1[[i]]=c(kp_tln[[i]]$p.value,kp_tgm[[i]]$p.value,kp_twb[[i]]$p.value,kp_tll[[i]]$p.value,kp_tnorm[[i]]$p.value,kp_tburr[[i]]$p.value,kp_tt[[i]]$p.value)
}
ChiSq <- KS <- AD <- AD2 <- AD_Up <- AD2Up <-  CVM <- KP <- Distribution <- `Truncation Point`<- Assesment <-  c()
dis <- c("Log-normal","Gamma","Weibull","Log-logistic","Normal","Burr","Student's-t")
temp <- c("xxx","xxx1","xxx2","xxxx3","xxx4","xxxx5")
for(i in 1:length(H_trunc)){
   ChiSq <- c(ChiSq,ChiSq1[[i]]) 
   KS <- c(KS,KS1[[i]])
   AD <- c(AD,AD1[[i]])
   AD2 <- c(AD2,AD21[[i]])
   AD_Up <- c(AD_Up,AD_Up1[[i]])
   AD2Up <- c(AD2Up,Ad2_Up1[[i]])
   CVM <- c(CVM,CVM1[[i]])
   KP <- c(KP,KP1[[i]])
   Distribution <- c(Distribution,dis)
   `Truncation Point` <- c(`Truncation Point`,rep(paste0(H_trunc[i],"($",exp(H_trunc[i]),")"),7))
   #Justification <- c(Justification,rep(temp[i],7))
   Assesment <- c(Assesment,rep("xxx",7))
 }
goft_on <- round_df(data.frame(ChiSq,KS,AD,AD2,AD_Up,AD2Up,CVM,KP),2) # goodness of fit table at different truncation point.
goft_on <- cbind(`Truncation Point`,Distribution,goft_on,Assesment)
```

### Appendix A

`r table_nums('tab_139')`
```{r,echo=FALSE,fig.cap=tab.139,ft.align='left'}
tab139 <- flextable(goft_t)
tab139 <- merge_v(tab139,j=c(1,2))
tab139 <- theme_box(tab139)
tab139 <- bg(tab139, bg = "#66B3FF", part = "header")
tab139 <- color(tab139, ~ ChiSq >= 0.05 , ~ChiSq,color = "green")
tab139 <- color(tab139, ~ KS >= 0.05 , ~KS,color = "green")
tab139 <- color(tab139, ~ AD >= 0.05 , ~AD,color = "green")
tab139 <- color(tab139, ~ AD2 >= 0.05 , ~AD2,color = "green")
tab139 <- color(tab139, ~ AD_Up >= 0.05 , ~AD_Up,color = "green")
tab139 <- color(tab139, ~ AD2Up >= 0.05 , ~AD2Up,color = "green")
tab139 <- color(tab139, ~ CVM >= 0.05 , ~CVM,color = "green")
tab139 <- color(tab139, ~ KP >= 0.05 , ~KP,color = "green")
tab139 <- color(tab139, ~ (ChiSq >= 0.01 & ChiSq < 0.05) , ~ChiSq,color = "orange")
tab139 <- color(tab139, ~ (KS >= 0.01 & KS < 0.05) , ~KS,color = "orange")
tab139 <- color(tab139, ~ (AD >= 0.01 & AD < 0.05) , ~AD,color = "orange")
tab139 <- color(tab139, ~ (AD2 >= 0.01 & AD2 < 0.05) , ~AD2,color = "orange")
tab139 <- color(tab139, ~ (AD_Up >= 0.01 & AD_Up < 0.05) , ~AD_Up,color = "orange")
tab139 <- color(tab139, ~ (AD2Up >= 0.01 & AD2Up < 0.05) , ~AD2Up,color = "orange")
tab139 <- color(tab139, ~ (CVM >= 0.01 & CVM < 0.05) , ~CVM,color = "orange")
tab139 <- color(tab139, ~ (KP >= 0.01 & KP < 0.05) , ~KP,color = "orange")
tab139 <- color(tab139, ~ (ChiSq < 0.01 ) , ~ChiSq,color = "red")
tab139 <- color(tab139, ~ (KS < 0.01 ) , ~KS,color = "red")
tab139 <- color(tab139, ~ (AD < 0.01 ) , ~AD,color = "red")
tab139 <- color(tab139, ~ (AD2 < 0.01 ) , ~AD2,color = "red")
tab139 <- color(tab139, ~ (AD_Up < 0.01) , ~AD_Up,color = "red")
tab139 <- color(tab139, ~ (AD2Up < 0.01) , ~AD2Up,color = "red")
tab139 <- color(tab139, ~ (CVM < 0.01) , ~CVM,color = "red")
tab139 <- color(tab139, ~ (KP < 0.01) , ~KP,color = "red")
tab139 <- add_header_row(tab139,values=c(" "," ","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)"," "))
tab139 <- bg(tab139, bg = "#66B3FF", part = "header")
tab139 <- merge_at(tab139, i = 1, j = 3:10, part = "header")
colkeys = c("ChiSq","KS","AD","AD2","AD_Up","AD2Up","CVM","KP")
tab139 <- colformat_num(x = tab139, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab139 <- add_footer_lines(tab139,values = c("p-value greater than or equal to 0.05 is highlighted in green","p-value less than 0.05 and greater than or equal to 0.01 is highlighted in amber","p-value less than 0.01 is highlighted in red"),top=FALSE)
tab139 <- fontsize(x=tab139,size = 6,part = "footer")
tab139 <- autofit(tab139)
tab139
```

### Appendix B

`r table_nums('tab_140')`
```{r,echo=FALSE,fig.cap=tab.140,ft.align='left'}
tab140 <- flextable(goft_a)
tab140 <- merge_v(tab140,j=c(1,2))
tab140 <- theme_box(tab140)
tab140 <- bg(tab140, bg = "#66B3FF", part = "header")
tab140 <- color(tab140, ~ ChiSq >= 0.05 , ~ChiSq,color = "green")
tab140 <- color(tab140, ~ KS >= 0.05 , ~KS,color = "green")
tab140 <- color(tab140, ~ AD >= 0.05 , ~AD,color = "green")
tab140 <- color(tab140, ~ AD2 >= 0.05 , ~AD2,color = "green")
tab140 <- color(tab140, ~ AD_Up >= 0.05 , ~AD_Up,color = "green")
tab140 <- color(tab140, ~ AD2Up >= 0.05 , ~AD2Up,color = "green")
tab140 <- color(tab140, ~ CVM >= 0.05 , ~CVM,color = "green")
tab140 <- color(tab140, ~ KP >= 0.05 , ~KP,color = "green")
tab140 <- color(tab140, ~ (ChiSq >= 0.01 & ChiSq < 0.05) , ~ChiSq,color = "orange")
tab140 <- color(tab140, ~ (KS >= 0.01 & KS < 0.05) , ~KS,color = "orange")
tab140 <- color(tab140, ~ (AD >= 0.01 & AD < 0.05) , ~AD,color = "orange")
tab140 <- color(tab140, ~ (AD2 >= 0.01 & AD2 < 0.05) , ~AD2,color = "orange")
tab140 <- color(tab140, ~ (AD_Up >= 0.01 & AD_Up < 0.05) , ~AD_Up,color = "orange")
tab140 <- color(tab140, ~ (AD2Up >= 0.01 & AD2Up < 0.05) , ~AD2Up,color = "orange")
tab140 <- color(tab140, ~ (CVM >= 0.01 & CVM < 0.05) , ~CVM,color = "orange")
tab140 <- color(tab140, ~ (KP >= 0.01 & KP < 0.05) , ~KP,color = "orange")
tab140 <- color(tab140, ~ (ChiSq < 0.01 ) , ~ChiSq,color = "red")
tab140 <- color(tab140, ~ (KS < 0.01 ) , ~KS,color = "red")
tab140 <- color(tab140, ~ (AD < 0.01 ) , ~AD,color = "red")
tab140 <- color(tab140, ~ (AD2 < 0.01 ) , ~AD2,color = "red")
tab140 <- color(tab140, ~ (AD_Up < 0.01) , ~AD_Up,color = "red")
tab140 <- color(tab140, ~ (AD2Up < 0.01) , ~AD2Up,color = "red")
tab140 <- color(tab140, ~ (CVM < 0.01) , ~CVM,color = "red")
tab140 <- color(tab140, ~ (KP < 0.01) , ~KP,color = "red")
tab140 <- add_header_row(tab140,values=c(" "," ","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)", "Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)"," "))
tab140 <- bg(tab140, bg = "#66B3FF", part = "header")
tab140 <- merge_at(tab140, i = 1, j = 3:10, part = "header")
colkeys = c("ChiSq","KS","AD","AD2","AD_Up","AD2Up","CVM","KP")
tab140 <- colformat_num(x = tab140, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab140 <- add_footer_lines(tab140,values = c("p-value greater than or equal to 0.05 is highlighted in green","p-value less than 0.05 and greater than or equal to 0.01 is highlighted in amber","p-value less than 0.01 is highlighted in red"),top=FALSE)
tab140 <- fontsize(x=tab140,size = 6,part = "footer")
tab140 <- autofit(tab140)
tab140
```

### Appendix C

`r table_nums('tab_141')`
```{r,echo=FALSE,fig.cap=tab.141,ft.align='left'}
tab141 <- flextable(goft_oim)
tab141 <- merge_v(tab141,j=c(1,2))
tab141 <- theme_box(tab141)
tab141 <- bg(tab141, bg = "#66B3FF", part = "header")
tab141 <- color(tab141, ~ ChiSq >= 0.05 , ~ChiSq,color = "green")
tab141 <- color(tab141, ~ KS >= 0.05 , ~KS,color = "green")
tab141 <- color(tab141, ~ AD >= 0.05 , ~AD,color = "green")
tab141 <- color(tab141, ~ AD2 >= 0.05 , ~AD2,color = "green")
tab141 <- color(tab141, ~ AD_Up >= 0.05 , ~AD_Up,color = "green")
tab141 <- color(tab141, ~ AD2Up >= 0.05 , ~AD2Up,color = "green")
tab141 <- color(tab141, ~ CVM >= 0.05 , ~CVM,color = "green")
tab141 <- color(tab141, ~ KP >= 0.05 , ~KP,color = "green")
tab141 <- color(tab141, ~ (ChiSq >= 0.01 & ChiSq < 0.05) , ~ChiSq,color = "orange")
tab141 <- color(tab141, ~ (KS >= 0.01 & KS < 0.05) , ~KS,color = "orange")
tab141 <- color(tab141, ~ (AD >= 0.01 & AD < 0.05) , ~AD,color = "orange")
tab141 <- color(tab141, ~ (AD2 >= 0.01 & AD2 < 0.05) , ~AD2,color = "orange")
tab141 <- color(tab141, ~ (AD_Up >= 0.01 & AD_Up < 0.05) , ~AD_Up,color = "orange")
tab141 <- color(tab141, ~ (AD2Up >= 0.01 & AD2Up < 0.05) , ~AD2Up,color = "orange")
tab141 <- color(tab141, ~ (CVM >= 0.01 & CVM < 0.05) , ~CVM,color = "orange")
tab141 <- color(tab141, ~ (KP >= 0.01 & KP < 0.05) , ~KP,color = "orange")
tab141 <- color(tab141, ~ (ChiSq < 0.01 ) , ~ChiSq,color = "red")
tab141 <- color(tab141, ~ (KS < 0.01 ) , ~KS,color = "red")
tab141 <- color(tab141, ~ (AD < 0.01 ) , ~AD,color = "red")
tab141 <- color(tab141, ~ (AD2 < 0.01 ) , ~AD2,color = "red")
tab141 <- color(tab141, ~ (AD_Up < 0.01) , ~AD_Up,color = "red")
tab141 <- color(tab141, ~ (AD2Up < 0.01) , ~AD2Up,color = "red")
tab141 <- color(tab141, ~ (CVM < 0.01) , ~CVM,color = "red")
tab141 <- color(tab141, ~ (KP < 0.01) , ~KP,color = "red")
tab141 <- add_header_row(tab141,values=c(" "," ","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)"," Goodness of fit Tests(p.values)"," "))
tab141 <- bg(tab141, bg = "#66B3FF", part = "header")
tab141 <- merge_at(tab141, i = 1, j = 3:10, part = "header")
colkeys = c("ChiSq","KS","AD","AD2","AD_Up","AD2Up","CVM","KP")
tab141 <- colformat_num(x = tab141, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab141 <- add_footer_lines(tab141,values = c("p-value greater than or equal to 0.05 is highlighted in green","p-value less than 0.05 and greater than or equal to 0.01 is highlighted in amber","p-value less than 0.01 is highlighted in red"),top=FALSE)
tab141 <- fontsize(x=tab141,size = 6,part = "footer")
tab141 <- autofit(tab141)
tab141
```

### Appendix D

`r table_nums('tab_142')`
```{r,echo=FALSE,fig.cap=tab.142,ft.align='left'}
tab142 <- flextable(goft_on)
tab142 <- merge_v(tab142,j=c(1,2))
tab142 <- theme_box(tab142)
tab142 <- bg(tab142, bg = "#66B3FF", part = "header")
tab142 <- color(tab142, ~ ChiSq >= 0.05 , ~ChiSq,color = "green")
tab142 <- color(tab142, ~ KS >= 0.05 , ~KS,color = "green")
tab142 <- color(tab142, ~ AD >= 0.05 , ~AD,color = "green")
tab142 <- color(tab142, ~ AD2 >= 0.05 , ~AD2,color = "green")
tab142 <- color(tab142, ~ AD_Up >= 0.05 , ~AD_Up,color = "green")
tab142 <- color(tab142, ~ AD2Up >= 0.05 , ~AD2Up,color = "green")
tab142 <- color(tab142, ~ CVM >= 0.05 , ~CVM,color = "green")
tab142 <- color(tab142, ~ KP >= 0.05 , ~KP,color = "green")
tab142 <- color(tab142, ~ (ChiSq >= 0.01 & ChiSq < 0.05) , ~ChiSq,color = "orange")
tab142 <- color(tab142, ~ (KS >= 0.01 & KS < 0.05) , ~KS,color = "orange")
tab142 <- color(tab142, ~ (AD >= 0.01 & AD < 0.05) , ~AD,color = "orange")
tab142 <- color(tab142, ~ (AD2 >= 0.01 & AD2 < 0.05) , ~AD2,color = "orange")
tab142 <- color(tab142, ~ (AD_Up >= 0.01 & AD_Up < 0.05) , ~AD_Up,color = "orange")
tab142 <- color(tab142, ~ (AD2Up >= 0.01 & AD2Up < 0.05) , ~AD2Up,color = "orange")
tab142 <- color(tab142, ~ (CVM >= 0.01 & CVM < 0.05) , ~CVM,color = "orange")
tab142 <- color(tab142, ~ (KP >= 0.01 & KP < 0.05) , ~KP,color = "orange")
tab142 <- color(tab142, ~ (ChiSq < 0.01 ) , ~ChiSq,color = "red")
tab142 <- color(tab142, ~ (KS < 0.01 ) , ~KS,color = "red")
tab142 <- color(tab142, ~ (AD < 0.01 ) , ~AD,color = "red")
tab142 <- color(tab142, ~ (AD2 < 0.01 ) , ~AD2,color = "red")
tab142 <- color(tab142, ~ (AD_Up < 0.01) , ~AD_Up,color = "red")
tab142 <- color(tab142, ~ (AD2Up < 0.01) , ~AD2Up,color = "red")
tab142 <- color(tab142, ~ (CVM < 0.01) , ~CVM,color = "red")
tab142 <- color(tab142, ~ (KP < 0.01) , ~KP,color = "red")
tab142 <- add_header_row(tab142,values=c(" "," ","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)","Goodness of fit Tests(p.values)"," Goodness of fit Tests(p.values)"," Goodness of fit Tests(p.values)"," "))
tab142 <- bg(tab142, bg = "#66B3FF", part = "header")
tab142 <- merge_at(tab142, i = 1, j = 3:10, part = "header")
colkeys = c("ChiSq","KS","AD","AD2","AD_Up","AD2Up","CVM","KP")
tab142 <- colformat_num(x = tab142, col_keys = colkeys,big.mark=",", digits = 2, na_str = "N/A")
tab142 <- add_footer_lines(tab142,values = c("p-value greater than or equal to 0.05 is highlighted in green","p-value less than 0.05 and greater than or equal to 0.01 is highlighted in amber","p-value less than 0.01 is highlighted in red"),top=FALSE)
tab142 <- fontsize(x=tab142,size = 6,part = "footer")
tab142 <- autofit(tab142)
tab142
```


